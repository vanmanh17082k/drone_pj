/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "nrf24l01mbal.h"
#include "mpu6050.h"
#include "stdio.h"
#include "stdlib.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int16_t Accel_X_RAW=0;
int16_t Accel_Y_RAW=0;
int16_t Accel_Z_RAW=0;
int16_t Gyro_X_RAW=0;
int16_t Gyro_Y_RAW=0;
int16_t Gyro_Z_RAW=0;
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c2;

SPI_HandleTypeDef hspi1;

TIM_HandleTypeDef htim1;

/* USER CODE BEGIN PV */
uint16_t PWM[4]={1000,1000,1000,1000};
NRF24L01_config_TypeDef nrf_rx_cfg;
uint8_t data_rx_real = 0 ;
uint8_t old_data_rx_real = 0;
uint8_t CONTROl = 10;
MPU6050_t MPU6050_Data;
PWM_Control_For_Axis Axis_X;
PWM_Control_For_Axis Axis_Y;
PWM_Control_For_Axis Axis_Z;
//rx_data rx_data_rc;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C2_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_val_for_nfr24(NRF24L01_config_TypeDef* nfr24_dummy)
{
	  HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	  	 //nrf_rx_cfg.RX_TX           = 1; //RX
	  nfr24_dummy->CE_pin          = CE_pin_Pin;
	  nfr24_dummy->CE_port         = CE_pin_GPIO_Port;
	  nfr24_dummy->CSN_pin         = CSN_pin_Pin;
	  nfr24_dummy->CSN_port        = CSN_pin_GPIO_Port;
	  nfr24_dummy->SPI             = &hspi1;
	  nfr24_dummy->radio_channel   = 15;
	  nfr24_dummy->baud_rate       = TM_NRF24L01_DataRate_1M;
	  nfr24_dummy->payload_len     = 1;
	  nfr24_dummy->crc_len         = 1;
	  nfr24_dummy->output_power    = TM_NRF24L01_OutputPower_0dBm;
	  nfr24_dummy->rx_address[ 0 ] = 0x7E;
	  nfr24_dummy->rx_address[ 1 ] = 0x7E;
	  nfr24_dummy->rx_address[ 2 ] = 0x7E;
	  nfr24_dummy->rx_address[ 3 ] = 0x7E;
	  nfr24_dummy->rx_address[ 4 ] = 0x7E;
	  nfr24_dummy->tx_address[ 0 ] = 0xE7;
	  nfr24_dummy->tx_address[ 1 ] = 0xE7;
	  nfr24_dummy->tx_address[ 2 ] = 0xE7;
	  nfr24_dummy->tx_address[ 3 ] = 0xE7;
	  nfr24_dummy->tx_address[ 4 ] = 0xE7;

}
void quad_up(){
PWM[0] += 1;PWM[1] += 1;
PWM[2] += 1;PWM[3] += 1;
}
void quad_down(){
PWM[0] -= 1;PWM[1] -= 1;
PWM[2] -= 1;PWM[3] -= 1;
}
void quad_right(){
Axis_Y.define_offset_angle = Run_LRFB;
}
void quad_left(){
Axis_Y.define_offset_angle = -Run_LRFB;
}
void quad_front(){
Axis_X.define_offset_angle = Run_LRFB;
}
void quad_behind(){
Axis_X.define_offset_angle = -Run_LRFB;
}
void quad_stop(){
	while(1)
	{
		PWM[0]=0;PWM[1]=0;PWM[2]=0;PWM[3]=0;
		mbal_NRF24L01_GetData(&nrf_rx_cfg, &data_rx_real);
		if(data_rx_real>>4 == 0 && (data_rx_real>>3 == 1 ||data_rx_real>>5 == 1))
		{
			break;
		}
	}
}
void quad_start(){
PWM[0] = Run_When_Start_Value;PWM[1] = Run_When_Start_Value;
PWM[2] = Run_When_Start_Value;PWM[3] = Run_When_Start_Value;
}
void quad_reset(){
PWM[0] = 1000;PWM[1] = 1000;
PWM[2] = 1000;PWM[3] = 1000;
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C2_Init();
  MX_SPI1_Init();
  MX_TIM1_Init();
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_SET);
  MPU6050_Data.MPU6050_address =MPU6050_Init(&hi2c2);
  set_val_for_nfr24(&nrf_rx_cfg);
  mbal_NRF24L01_Init(&nrf_rx_cfg );
  HAL_Delay(100);
  // Innit value for NRF24
  MPU6050_Data.Ax = 0;
  MPU6050_Data.Ay = 0;
  MPU6050_Data.Az = 100;
  MPU6050_Data.KalmanAngleX = 0;
  MPU6050_Data.KalmanAngleY = 0;
  MPU6050_Data.KalmanAngleZ = 100;
  HAL_Delay(2000);
  // Innit value for MORTOR
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,1300);
  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,1300);
  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,1300);
  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,1300);
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_RESET);
  // Innit value for AXIS X Y Z
  Axis_X.define_offset_angle = 0;
  Axis_Y.define_offset_angle = 0;
  Axis_Z.define_offset_angle = 0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
/*------------------------------READ DATA----------------------*/
	  HAL_Delay(100);
	  mbal_NRF24L01_GetData(&nrf_rx_cfg, &data_rx_real);
	  MPU6050_Read_Accel(&hi2c2, &MPU6050_Data);
/*-------------------------Check right left front behind----------------------*/
if(((data_rx_real>>8)&1)==1){
	if(((data_rx_real>>7)&1)==1){		quad_right();}	//right
	else if(((data_rx_real>>7)&1)==1){	quad_left();}	//left
	else if(((data_rx_real>>6)&1)==1){	quad_front();}	//front
	else if(((data_rx_real>>6)&1)==1){	quad_behind();}	//behind
}
/*------------------------------Check UP DOWN ----------------------*/
if(((data_rx_real>>0)&1)==1){		quad_down();	}	//down
else if(((data_rx_real>>1)&1)==1){	quad_up();		}	//up
else if(((data_rx_real>>2)&1)==1){	quad_start();	}	//start
else if(((data_rx_real>>3)&1)==1){	quad_stop();	}	//stop
else if(((data_rx_real>>4)&1)==1){	quad_reset();	}	//Reset
else{}// No Think
/*------------------------------Operation ----------------------*/
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,1300);
//__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,1300);
//__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,1300);
//__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,1300);
//
//__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,PWM[0]);
//__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,PWM[1]);
//__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,PWM[2]);
//__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,PWM[3]);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
  hi2c2.Init.ClockSpeed = 400000;
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 31;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 19999;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 1000;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_pin_Pin|CE_pin_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : CSN_pin_Pin CE_pin_Pin */
  GPIO_InitStruct.Pin = CSN_pin_Pin|CE_pin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : irq_nrf_Pin */
  GPIO_InitStruct.Pin = irq_nrf_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(irq_nrf_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
