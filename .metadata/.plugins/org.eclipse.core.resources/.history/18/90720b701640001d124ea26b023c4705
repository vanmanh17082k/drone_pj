/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "nrf24l01mbal.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */
uint8_t data_tran[20] = {0};
uint8_t data_rx[20] = {0};
data_send data_to_quad;
NRF24L01_config_TypeDef nrf_tx_cfg;
uint16_t val_count = 0;
GPIO_PinState data;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
uint16_t counter = 0 ;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
//  UNUSED(GPIO_Pin);
  data = HAL_GPIO_ReadPin(GPIOB,GPIO_Pin);
   	if (GPIO_Pin == up_pin_Pin){
   		data_to_quad.data_button[0]= 0x1;
   	}
   	else if(GPIO_Pin == down_pin_Pin){
   		data_to_quad.data_button[0] =0x2;
   	}
   	else if(GPIO_Pin == setting_pin_0_Pin){
   		data_to_quad.data_button[0] = 0x4;
	}
	else if(GPIO_Pin == setting_pin_1_Pin){
		data_to_quad.data_button[0] = 0x8;
	}
	else if(GPIO_Pin == setting_pin_2_Pin){
		data_to_quad.data_button[0] = 0x10;
		}
	else{data_to_quad.data_button[0] = 0;}
   	data_to_quad.tx_quad_data[0]= data_to_quad.data_button[0];
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    //mbal_NRF24L01_Transmit( &nrf_tx_cfg, &(data_to_quad.data_button[0]));
}
void ADC_Select_CH0 (void)
{
 ADC_ChannelConfTypeDef sConfig = {0};
 sConfig.Channel = ADC_CHANNEL_0;
 sConfig.Rank = ADC_REGULAR_RANK_1;
 sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 {
   Error_Handler();
 }
}
// khởi tạo ADC1 channel 1
void ADC_Select_CH1 (void)
{
 ADC_ChannelConfTypeDef sConfig = {0};
 sConfig.Channel = ADC_CHANNEL_1;
 sConfig.Rank = ADC_REGULAR_RANK_1;
 sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 {
   Error_Handler();
 }
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
//  UNUSED(hadc);
//		  HAL_ADC_Start(&hadc1);
		  ADC_Select_CH0();
		  HAL_ADC_PollForConversion(&hadc1,100);
		  data_to_quad.dataread_sw[0] = HAL_ADC_GetValue(&hadc1);//Y row

//		  HAL_ADC_Stop(&hadc1);
//
//		  HAL_ADC_Start(&hadc1);
		  ADC_Select_CH1();
		  HAL_ADC_PollForConversion(&hadc1,100);
		  data_to_quad.dataread_sw[1] = HAL_ADC_GetValue(&hadc1);//Y row
//		  HAL_ADC_Stop(&hadc1);
		  // 1th sw
		  if(data_to_quad.dataread_sw[0] > 4000)
		  {		data_to_quad.tx_quad_data[0] |= 0x20 & 0xff ;}
		  else if(data_to_quad.dataread_sw[0] == 0)
		  {		data_to_quad.tx_quad_data[0] &= 0xdf & 0xff;}
		  // 2th sw
		  if(data_to_quad.dataread_sw[1] > 4000)
		  {		data_to_quad.tx_quad_data[0] |= 0x40 & 0xff;}
		  else if(data_to_quad.dataread_sw[0] == 0)
		  {		data_to_quad.tx_quad_data[0] &= 0xbf & 0xff;}
}

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_SET );
    //nrf_tx_cfg.RX_TX           = 0; //0 - TX
    nrf_tx_cfg.CE_pin          = CE_pin_Pin;
    nrf_tx_cfg.CE_port         = CE_pin_GPIO_Port;
    nrf_tx_cfg.CSN_pin         = CSN_pin_Pin;
    nrf_tx_cfg.CSN_port        = CSN_pin_GPIO_Port;
    nrf_tx_cfg.SPI             = &hspi1;
    nrf_tx_cfg.radio_channel   = 15;
    nrf_tx_cfg.baud_rate       = TM_NRF24L01_DataRate_1M;
    nrf_tx_cfg.payload_len     = 1;
    nrf_tx_cfg.crc_len         = 1;
    nrf_tx_cfg.output_power    = TM_NRF24L01_OutputPower_0dBm;
    nrf_tx_cfg.rx_address[ 0 ] = 0xE7;
    nrf_tx_cfg.rx_address[ 1 ] = 0xE7;
    nrf_tx_cfg.rx_address[ 2 ] = 0xE7;
    nrf_tx_cfg.rx_address[ 3 ] = 0xE7;
    nrf_tx_cfg.rx_address[ 4 ] = 0xE7;
    nrf_tx_cfg.tx_address[ 0 ] = 0x7E;
    nrf_tx_cfg.tx_address[ 1 ] = 0x7E;
    nrf_tx_cfg.tx_address[ 2 ] = 0x7E;
    nrf_tx_cfg.tx_address[ 3 ] = 0x7E;
    nrf_tx_cfg.tx_address[ 4 ] = 0x7E;
    /* Data received and data for send */
    //uint8_t dataOut[32], dataIn[32], config_bytes[ 100 ], text_to_show[ 100 ];
    //uint8_t cnt = 0;
//    TM_NRF24L01_Transmit_Status_t transmissionStatus;
    mbal_NRF24L01_Init( &nrf_tx_cfg );
    HAL_Delay( 100 );
    mbal_NRF24L01_Clear_Interrupts( &nrf_tx_cfg );
    HAL_Delay( 20 );
    HAL_ADC_Start_IT(&hadc1);
    HAL_Delay( 20 );
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int i = 0; i < 20 ; i++)
	  {
		  data_tran[0]= i;

	  HAL_GPIO_WritePin(CSN_pin_GPIO_Port, CSN_pin_Pin, GPIO_PIN_RESET);
	  HAL_SPI_Transmit(&hspi1, &data_tran[0], 1, 1000);
	  HAL_SPI_Receive(&hspi1, &data_rx[0], 1, 1000);
	  HAL_GPIO_WritePin(CSN_pin_GPIO_Port, CSN_pin_Pin, GPIO_PIN_SET);
	  HAL_Delay(1000);
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_pin_Pin|CE_pin_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : CSN_pin_Pin CE_pin_Pin */
  GPIO_InitStruct.Pin = CSN_pin_Pin|CE_pin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : up_pin_Pin down_pin_Pin setting_pin_0_Pin setting_pin_1_Pin
                           setting_pin_2_Pin */
  GPIO_InitStruct.Pin = up_pin_Pin|down_pin_Pin|setting_pin_0_Pin|setting_pin_1_Pin
                          |setting_pin_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
