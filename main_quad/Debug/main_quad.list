
main_quad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000819c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080082b0  080082b0  000182b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084b8  080084b8  00020170  2**0
                  CONTENTS
  4 .ARM          00000000  080084b8  080084b8  00020170  2**0
                  CONTENTS
  5 .preinit_array 00000000  080084b8  080084b8  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084b8  080084b8  000184b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084bc  080084bc  000184bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  080084c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000170  08008630  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08008630  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed07  00000000  00000000  00020199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff2  00000000  00000000  0002eea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00030e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00031ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a60  00000000  00000000  00032dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117d5  00000000  00000000  0004b838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d568  00000000  00000000  0005d00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea575  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a64  00000000  00000000  000ea5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000170 	.word	0x20000170
 800012c:	00000000 	.word	0x00000000
 8000130:	08008294 	.word	0x08008294

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000174 	.word	0x20000174
 800014c:	08008294 	.word	0x08008294

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <__aeabi_f2uiz>:
 800110c:	0042      	lsls	r2, r0, #1
 800110e:	d20e      	bcs.n	800112e <__aeabi_f2uiz+0x22>
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001114:	d30b      	bcc.n	800112e <__aeabi_f2uiz+0x22>
 8001116:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d409      	bmi.n	8001134 <__aeabi_f2uiz+0x28>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001128:	fa23 f002 	lsr.w	r0, r3, r2
 800112c:	4770      	bx	lr
 800112e:	f04f 0000 	mov.w	r0, #0
 8001132:	4770      	bx	lr
 8001134:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001138:	d101      	bne.n	800113e <__aeabi_f2uiz+0x32>
 800113a:	0242      	lsls	r2, r0, #9
 800113c:	d102      	bne.n	8001144 <__aeabi_f2uiz+0x38>
 800113e:	f04f 30ff 	mov.w	r0, #4294967295
 8001142:	4770      	bx	lr
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <PID_Calculation>:
float DT = 0;
#define MAX_PID_SP 400
#define MAX_PID_THROW_SP 100

void PID_Calculation(PIDSingle* axis, float set_point_agle, float input_agle/*ICM-20602 Angular Rate*/)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
	/*********** Single PID Begin (Yaw Angular Rate Control) *************/
	axis->reference = set_point_agle;	//Set point of yaw heading @ yaw stick is not center.
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	60da      	str	r2, [r3, #12]
	axis->meas_value = input_agle;			//Current ICM20602.gyro_z @ yaw stick is not center.
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	611a      	str	r2, [r3, #16]
	axis->error_x[0] = input_agle - set_point_agle;
 8001164:	68b9      	ldr	r1, [r7, #8]
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff fcda 	bl	8000b20 <__aeabi_fsub>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	619a      	str	r2, [r3, #24]
	axis->p_result = (float)((axis->error_x[0] * axis->kp));	 			//Calculate P result of yaw rate control
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	699a      	ldr	r2, [r3, #24]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4619      	mov	r1, r3
 800117e:	4610      	mov	r0, r2
 8001180:	f7ff fdd8 	bl	8000d34 <__aeabi_fmul>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	621a      	str	r2, [r3, #32]
	axis->i_result += (float)((axis->error_x[0]* axis->ki));					//Calculate I result of yaw rate control
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	699a      	ldr	r2, [r3, #24]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4619      	mov	r1, r3
 800119a:	4610      	mov	r0, r2
 800119c:	f7ff fdca 	bl	8000d34 <__aeabi_fmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4619      	mov	r1, r3
 80011a4:	4620      	mov	r0, r4
 80011a6:	f7ff fcbd 	bl	8000b24 <__addsf3>
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
	axis->d_result = (float)(((axis->error_x[0] -axis->error_x[1])* axis->kd));				//Calculate D result of yaw rate control
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	699a      	ldr	r2, [r3, #24]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4619      	mov	r1, r3
 80011bc:	4610      	mov	r0, r2
 80011be:	f7ff fcaf 	bl	8000b20 <__aeabi_fsub>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	4619      	mov	r1, r3
 80011cc:	4610      	mov	r0, r2
 80011ce:	f7ff fdb1 	bl	8000d34 <__aeabi_fmul>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
	if(axis->i_result > MAX_PID_SP){axis->i_result  = MAX_PID_SP;}
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	4925      	ldr	r1, [pc, #148]	; (8001274 <PID_Calculation+0x128>)
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff63 	bl	80010ac <__aeabi_fcmpgt>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <PID_Calculation+0xa6>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4a21      	ldr	r2, [pc, #132]	; (8001274 <PID_Calculation+0x128>)
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
	if(axis->i_result < -MAX_PID_SP){axis->i_result  = -MAX_PID_SP;}
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	4920      	ldr	r1, [pc, #128]	; (8001278 <PID_Calculation+0x12c>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff39 	bl	8001070 <__aeabi_fcmplt>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <PID_Calculation+0xbe>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <PID_Calculation+0x12c>)
 8001208:	625a      	str	r2, [r3, #36]	; 0x24
	axis->pid_result = (axis->p_result + axis->i_result + axis->d_result); 	//Calculate PID result of yaw control
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6a1a      	ldr	r2, [r3, #32]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	4619      	mov	r1, r3
 8001214:	4610      	mov	r0, r2
 8001216:	f7ff fc85 	bl	8000b24 <__addsf3>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001222:	4619      	mov	r1, r3
 8001224:	4610      	mov	r0, r2
 8001226:	f7ff fc7d 	bl	8000b24 <__addsf3>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	62da      	str	r2, [r3, #44]	; 0x2c
	/*******************************************************************/
	if (axis->pid_result > MAX_PID_SP) {axis->pid_result = MAX_PID_SP;}
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001236:	490f      	ldr	r1, [pc, #60]	; (8001274 <PID_Calculation+0x128>)
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff37 	bl	80010ac <__aeabi_fcmpgt>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <PID_Calculation+0xfe>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <PID_Calculation+0x128>)
 8001248:	62da      	str	r2, [r3, #44]	; 0x2c
	if (axis->pid_result < -MAX_PID_SP){axis->pid_result = -MAX_PID_SP;}
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124e:	490a      	ldr	r1, [pc, #40]	; (8001278 <PID_Calculation+0x12c>)
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff0d 	bl	8001070 <__aeabi_fcmplt>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d002      	beq.n	8001262 <PID_Calculation+0x116>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4a06      	ldr	r2, [pc, #24]	; (8001278 <PID_Calculation+0x12c>)
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c
	axis->error_x[1] = axis->error_x[0];
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	699a      	ldr	r2, [r3, #24]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	61da      	str	r2, [r3, #28]
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	bd90      	pop	{r4, r7, pc}
 8001272:	bf00      	nop
 8001274:	43c80000 	.word	0x43c80000
 8001278:	c3c80000 	.word	0xc3c80000

0800127c <PID_Calculation_thr>:
void PID_Calculation_thr(PIDSingle* axis, float set_point_agle, float input_agle/*ICM-20602 Angular Rate*/)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
	/*********** Single PID Begin (Yaw Angular Rate Control) *************/
	axis->reference = set_point_agle;	//Set point of yaw heading @ yaw stick is not center.
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	60da      	str	r2, [r3, #12]
	axis->meas_value = input_agle;			//Current ICM20602.gyro_z @ yaw stick is not center.
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	611a      	str	r2, [r3, #16]
	axis->error_x[0] = input_agle - set_point_agle;
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fc42 	bl	8000b20 <__aeabi_fsub>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	619a      	str	r2, [r3, #24]
	axis->p_result = (float)((axis->error_x[0] * axis->kp));	 			//Calculate P result of yaw rate control
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	699a      	ldr	r2, [r3, #24]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	4610      	mov	r0, r2
 80012b0:	f7ff fd40 	bl	8000d34 <__aeabi_fmul>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	621a      	str	r2, [r3, #32]
	axis->i_result += (float)((axis->error_x[0]* axis->ki));					//Calculate I result of yaw rate control
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	699a      	ldr	r2, [r3, #24]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	4619      	mov	r1, r3
 80012ca:	4610      	mov	r0, r2
 80012cc:	f7ff fd32 	bl	8000d34 <__aeabi_fmul>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4619      	mov	r1, r3
 80012d4:	4620      	mov	r0, r4
 80012d6:	f7ff fc25 	bl	8000b24 <__addsf3>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24
	axis->d_result = (float)(((axis->error_x[0] -axis->error_x[1])* axis->kd));				//Calculate D result of yaw rate control
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	699a      	ldr	r2, [r3, #24]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4619      	mov	r1, r3
 80012ec:	4610      	mov	r0, r2
 80012ee:	f7ff fc17 	bl	8000b20 <__aeabi_fsub>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	4619      	mov	r1, r3
 80012fc:	4610      	mov	r0, r2
 80012fe:	f7ff fd19 	bl	8000d34 <__aeabi_fmul>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	629a      	str	r2, [r3, #40]	; 0x28
	if(axis->i_result > MAX_PID_THROW_SP){axis->i_result  = MAX_PID_THROW_SP;}
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130e:	4925      	ldr	r1, [pc, #148]	; (80013a4 <PID_Calculation_thr+0x128>)
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fecb 	bl	80010ac <__aeabi_fcmpgt>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <PID_Calculation_thr+0xa6>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4a21      	ldr	r2, [pc, #132]	; (80013a4 <PID_Calculation_thr+0x128>)
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
	if(axis->i_result < -MAX_PID_THROW_SP){axis->i_result  = -MAX_PID_THROW_SP;}
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	4920      	ldr	r1, [pc, #128]	; (80013a8 <PID_Calculation_thr+0x12c>)
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fea1 	bl	8001070 <__aeabi_fcmplt>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <PID_Calculation_thr+0xbe>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <PID_Calculation_thr+0x12c>)
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
	axis->pid_result = (axis->p_result + axis->i_result + axis->d_result); 	//Calculate PID result of yaw control
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6a1a      	ldr	r2, [r3, #32]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	4619      	mov	r1, r3
 8001344:	4610      	mov	r0, r2
 8001346:	f7ff fbed 	bl	8000b24 <__addsf3>
 800134a:	4603      	mov	r3, r0
 800134c:	461a      	mov	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001352:	4619      	mov	r1, r3
 8001354:	4610      	mov	r0, r2
 8001356:	f7ff fbe5 	bl	8000b24 <__addsf3>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	62da      	str	r2, [r3, #44]	; 0x2c
	/*******************************************************************/
	if (axis->pid_result > MAX_PID_THROW_SP) {axis->pid_result = MAX_PID_THROW_SP;}
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001366:	490f      	ldr	r1, [pc, #60]	; (80013a4 <PID_Calculation_thr+0x128>)
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fe9f 	bl	80010ac <__aeabi_fcmpgt>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <PID_Calculation_thr+0xfe>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <PID_Calculation_thr+0x128>)
 8001378:	62da      	str	r2, [r3, #44]	; 0x2c
	if (axis->pid_result < -MAX_PID_THROW_SP){axis->pid_result = -MAX_PID_THROW_SP;}
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137e:	490a      	ldr	r1, [pc, #40]	; (80013a8 <PID_Calculation_thr+0x12c>)
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fe75 	bl	8001070 <__aeabi_fcmplt>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <PID_Calculation_thr+0x116>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <PID_Calculation_thr+0x12c>)
 8001390:	62da      	str	r2, [r3, #44]	; 0x2c
	axis->error_x[1] = axis->error_x[0];
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	699a      	ldr	r2, [r3, #24]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	61da      	str	r2, [r3, #28]
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd90      	pop	{r4, r7, pc}
 80013a2:	bf00      	nop
 80013a4:	42c80000 	.word	0x42c80000
 80013a8:	c2c80000 	.word	0xc2c80000

080013ac <Int_PID_Integrator>:
void Int_PID_Integrator(PIDSingle* axis,float kp_x,float ki_x,float kd_x)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	603b      	str	r3, [r7, #0]
	axis->kp = kp_x;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	601a      	str	r2, [r3, #0]
	axis->ki = ki_x;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	605a      	str	r2, [r3, #4]
	axis->kd = kd_x;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	609a      	str	r2, [r3, #8]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr

080013d6 <Reset_PID_Integrator>:

void Reset_PID_Integrator(PIDSingle* axis)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
	axis->i_result = 0;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
//	axis->error_x[0] = 0;
	axis->error_x[1] = 0;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{ 	bool status_ex = 0;
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
 8001402:	2300      	movs	r3, #0
 8001404:	73fb      	strb	r3, [r7, #15]
	status_ex = HAL_GPIO_ReadPin(GPIOB, GPIO_Pin);
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	4619      	mov	r1, r3
 800140a:	4829      	ldr	r0, [pc, #164]	; (80014b0 <HAL_GPIO_EXTI_Callback+0xb8>)
 800140c:	f002 fd5e 	bl	8003ecc <HAL_GPIO_ReadPin>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	bf14      	ite	ne
 8001416:	2301      	movne	r3, #1
 8001418:	2300      	moveq	r3, #0
 800141a:	73fb      	strb	r3, [r7, #15]
  if(GPIO_Pin == GPIO_PIN_1){
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d13c      	bne.n	800149c <HAL_GPIO_EXTI_Callback+0xa4>
	  if(status_ex == true)
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00a      	beq.n	800143e <HAL_GPIO_EXTI_Callback+0x46>
	  {
		  __HAL_TIM_SET_COUNTER(&htim2,0);
 8001428:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <HAL_GPIO_EXTI_Callback+0xbc>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2200      	movs	r2, #0
 800142e:	625a      	str	r2, [r3, #36]	; 0x24
		  HAL_TIM_Base_Start(&htim2);
 8001430:	4820      	ldr	r0, [pc, #128]	; (80014b4 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001432:	f004 fdf1 	bl	8006018 <HAL_TIM_Base_Start>
		  ok = 1;
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
		  IC_Val = __HAL_TIM_GET_COUNTER(&htim2);
		  Distance = (float)IC_Val * 0.034/2;
		  ok = 2;
	  }
  }
}
 800143c:	e02e      	b.n	800149c <HAL_GPIO_EXTI_Callback+0xa4>
	  else if(status_ex == false)
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	f083 0301 	eor.w	r3, r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d028      	beq.n	800149c <HAL_GPIO_EXTI_Callback+0xa4>
		  IC_Val = __HAL_TIM_GET_COUNTER(&htim2);
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_GPIO_EXTI_Callback+0xbc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	4a1a      	ldr	r2, [pc, #104]	; (80014bc <HAL_GPIO_EXTI_Callback+0xc4>)
 8001452:	6013      	str	r3, [r2, #0]
		  Distance = (float)IC_Val * 0.034/2;
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <HAL_GPIO_EXTI_Callback+0xc4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fc13 	bl	8000c84 <__aeabi_ui2f>
 800145e:	4603      	mov	r3, r0
 8001460:	4618      	mov	r0, r3
 8001462:	f7fe ffd9 	bl	8000418 <__aeabi_f2d>
 8001466:	a310      	add	r3, pc, #64	; (adr r3, 80014a8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7ff f82c 	bl	80004c8 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001480:	f7ff f94c 	bl	800071c <__aeabi_ddiv>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	f7ff faf4 	bl	8000a78 <__aeabi_d2f>
 8001490:	4603      	mov	r3, r0
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001494:	6013      	str	r3, [r2, #0]
		  ok = 2;
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001498:	2202      	movs	r2, #2
 800149a:	701a      	strb	r2, [r3, #0]
}
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	f3af 8000 	nop.w
 80014a8:	b020c49c 	.word	0xb020c49c
 80014ac:	3fa16872 	.word	0x3fa16872
 80014b0:	40010c00 	.word	0x40010c00
 80014b4:	20000280 	.word	0x20000280
 80014b8:	20000444 	.word	0x20000444
 80014bc:	2000043c 	.word	0x2000043c
 80014c0:	20000440 	.word	0x20000440

080014c4 <set_val_for_nfr24>:
void set_val_for_nfr24(NRF24L01_config_TypeDef* nfr24_dummy)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d2:	4823      	ldr	r0, [pc, #140]	; (8001560 <set_val_for_nfr24+0x9c>)
 80014d4:	f002 fd11 	bl	8003efa <HAL_GPIO_WritePin>
	  	 //nrf_rx_cfg.RX_TX           = 1; //RX
	  nfr24_dummy->CE_pin          = CE_pin_Pin;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2210      	movs	r2, #16
 80014dc:	801a      	strh	r2, [r3, #0]
	  nfr24_dummy->CE_port         = CE_pin_GPIO_Port;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a20      	ldr	r2, [pc, #128]	; (8001564 <set_val_for_nfr24+0xa0>)
 80014e2:	605a      	str	r2, [r3, #4]
	  nfr24_dummy->CSN_pin         = CSN_pin_Pin;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2202      	movs	r2, #2
 80014e8:	811a      	strh	r2, [r3, #8]
	  nfr24_dummy->CSN_port        = CSN_pin_GPIO_Port;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a1d      	ldr	r2, [pc, #116]	; (8001564 <set_val_for_nfr24+0xa0>)
 80014ee:	60da      	str	r2, [r3, #12]
	  nfr24_dummy->SPI             = &hspi1;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a1d      	ldr	r2, [pc, #116]	; (8001568 <set_val_for_nfr24+0xa4>)
 80014f4:	611a      	str	r2, [r3, #16]
	  nfr24_dummy->radio_channel   = 15;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	220f      	movs	r2, #15
 80014fa:	779a      	strb	r2, [r3, #30]
	  nfr24_dummy->baud_rate       = TM_NRF24L01_DataRate_1M;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	77da      	strb	r2, [r3, #31]
	  nfr24_dummy->payload_len     = 1;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 2020 	strb.w	r2, [r3, #32]
	  nfr24_dummy->crc_len         = 1;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	  nfr24_dummy->output_power    = TM_NRF24L01_OutputPower_0dBm;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2203      	movs	r2, #3
 8001516:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	  nfr24_dummy->rx_address[ 0 ] = 0x7E;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	227e      	movs	r2, #126	; 0x7e
 800151e:	751a      	strb	r2, [r3, #20]
	  nfr24_dummy->rx_address[ 1 ] = 0x7E;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	227e      	movs	r2, #126	; 0x7e
 8001524:	755a      	strb	r2, [r3, #21]
	  nfr24_dummy->rx_address[ 2 ] = 0x7E;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	227e      	movs	r2, #126	; 0x7e
 800152a:	759a      	strb	r2, [r3, #22]
	  nfr24_dummy->rx_address[ 3 ] = 0x7E;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	227e      	movs	r2, #126	; 0x7e
 8001530:	75da      	strb	r2, [r3, #23]
	  nfr24_dummy->rx_address[ 4 ] = 0x7E;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	227e      	movs	r2, #126	; 0x7e
 8001536:	761a      	strb	r2, [r3, #24]
	  nfr24_dummy->tx_address[ 0 ] = 0xE7;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	22e7      	movs	r2, #231	; 0xe7
 800153c:	765a      	strb	r2, [r3, #25]
	  nfr24_dummy->tx_address[ 1 ] = 0xE7;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	22e7      	movs	r2, #231	; 0xe7
 8001542:	769a      	strb	r2, [r3, #26]
	  nfr24_dummy->tx_address[ 2 ] = 0xE7;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	22e7      	movs	r2, #231	; 0xe7
 8001548:	76da      	strb	r2, [r3, #27]
	  nfr24_dummy->tx_address[ 3 ] = 0xE7;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	22e7      	movs	r2, #231	; 0xe7
 800154e:	771a      	strb	r2, [r3, #28]
	  nfr24_dummy->tx_address[ 4 ] = 0xE7;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	22e7      	movs	r2, #231	; 0xe7
 8001554:	775a      	strb	r2, [r3, #29]
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40011000 	.word	0x40011000
 8001564:	40010800 	.word	0x40010800
 8001568:	200001e0 	.word	0x200001e0
 800156c:	00000000 	.word	0x00000000

08001570 <quad_up>:
void quad_up(){
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	throttle = throttle + speed_up_down ;
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <quad_up+0x78>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ff4d 	bl	8000418 <__aeabi_f2d>
 800157e:	a318      	add	r3, pc, #96	; (adr r3, 80015e0 <quad_up+0x70>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7fe fdea 	bl	800015c <__adddf3>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fa72 	bl	8000a78 <__aeabi_d2f>
 8001594:	4603      	mov	r3, r0
 8001596:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <quad_up+0x78>)
 8001598:	6013      	str	r3, [r2, #0]
	if(throttle < Min_PWM){throttle = Min_PWM;}
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <quad_up+0x78>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a13      	ldr	r2, [pc, #76]	; (80015ec <quad_up+0x7c>)
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fd63 	bl	8001070 <__aeabi_fcmplt>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d004      	beq.n	80015ba <quad_up+0x4a>
 80015b0:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <quad_up+0x7c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0c      	ldr	r2, [pc, #48]	; (80015e8 <quad_up+0x78>)
 80015b6:	6013      	str	r3, [r2, #0]
	else if(throttle > Max_THR){throttle = Max_THR;}
}
 80015b8:	e00f      	b.n	80015da <quad_up+0x6a>
	else if(throttle > Max_THR){throttle = Max_THR;}
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <quad_up+0x78>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <quad_up+0x80>)
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fd71 	bl	80010ac <__aeabi_fcmpgt>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d100      	bne.n	80015d2 <quad_up+0x62>
}
 80015d0:	e003      	b.n	80015da <quad_up+0x6a>
	else if(throttle > Max_THR){throttle = Max_THR;}
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <quad_up+0x80>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <quad_up+0x78>)
 80015d8:	6013      	str	r3, [r2, #0]
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	9999999a 	.word	0x9999999a
 80015e4:	3fb99999 	.word	0x3fb99999
 80015e8:	2000000c 	.word	0x2000000c
 80015ec:	20000008 	.word	0x20000008
 80015f0:	20000004 	.word	0x20000004
 80015f4:	00000000 	.word	0x00000000

080015f8 <quad_down>:
void quad_down(){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	throttle = throttle - speed_up_down*1.5 ;
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <quad_down+0x58>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ff09 	bl	8000418 <__aeabi_f2d>
 8001606:	a310      	add	r3, pc, #64	; (adr r3, 8001648 <quad_down+0x50>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7fe fda4 	bl	8000158 <__aeabi_dsub>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f7ff fa2e 	bl	8000a78 <__aeabi_d2f>
 800161c:	4603      	mov	r3, r0
 800161e:	4a0c      	ldr	r2, [pc, #48]	; (8001650 <quad_down+0x58>)
 8001620:	6013      	str	r3, [r2, #0]
	if(throttle > Max_THR){throttle = Max_THR;}
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <quad_down+0x58>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <quad_down+0x5c>)
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fd3d 	bl	80010ac <__aeabi_fcmpgt>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d100      	bne.n	800163a <quad_down+0x42>
}
 8001638:	e003      	b.n	8001642 <quad_down+0x4a>
	if(throttle > Max_THR){throttle = Max_THR;}
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <quad_down+0x5c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a04      	ldr	r2, [pc, #16]	; (8001650 <quad_down+0x58>)
 8001640:	6013      	str	r3, [r2, #0]
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	33333334 	.word	0x33333334
 800164c:	3fc33333 	.word	0x3fc33333
 8001650:	2000000c 	.word	0x2000000c
 8001654:	20000004 	.word	0x20000004

08001658 <quad_right>:
void quad_right(){
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
	pid_pitch_setpoint= 0;
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <quad_right+0x1c>)
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
	pid_roll_setpoint = -speed_LRFB;
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <quad_right+0x20>)
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <quad_right+0x24>)
 8001668:	601a      	str	r2, [r3, #0]
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000430 	.word	0x20000430
 8001678:	20000434 	.word	0x20000434
 800167c:	c2c80000 	.word	0xc2c80000

08001680 <quad_left>:
void quad_left(){
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
	pid_pitch_setpoint = 0;
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <quad_left+0x1c>)
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
	pid_roll_setpoint = speed_LRFB;
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <quad_left+0x20>)
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <quad_left+0x24>)
 8001690:	601a      	str	r2, [r3, #0]
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000430 	.word	0x20000430
 80016a0:	20000434 	.word	0x20000434
 80016a4:	42c80000 	.word	0x42c80000

080016a8 <quad_front>:
void quad_front(){
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
	pid_pitch_setpoint = speed_LRFB;
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <quad_front+0x1c>)
 80016ae:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <quad_front+0x20>)
 80016b0:	601a      	str	r2, [r3, #0]
	pid_roll_setpoint = 0;
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <quad_front+0x24>)
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000430 	.word	0x20000430
 80016c8:	42c80000 	.word	0x42c80000
 80016cc:	20000434 	.word	0x20000434

080016d0 <quad_behind>:
void quad_behind(){
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
	pid_pitch_setpoint = -speed_LRFB;
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <quad_behind+0x1c>)
 80016d6:	4a06      	ldr	r2, [pc, #24]	; (80016f0 <quad_behind+0x20>)
 80016d8:	601a      	str	r2, [r3, #0]
	pid_roll_setpoint = 0;
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <quad_behind+0x24>)
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000430 	.word	0x20000430
 80016f0:	c2c80000 	.word	0xc2c80000
 80016f4:	20000434 	.word	0x20000434

080016f8 <quad_stop>:
	loop_time_hacanh = HAL_GetTick();
	throttle = throttle_PID;
	hacanh =true;
	is_giudocao  = false;
}
void quad_stop(){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	is_running = false;
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <quad_stop+0x2c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
	throttle  = 1000;
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <quad_stop+0x30>)
 8001704:	4a09      	ldr	r2, [pc, #36]	; (800172c <quad_stop+0x34>)
 8001706:	601a      	str	r2, [r3, #0]
	//Reset all
	Reset_PID_Integrator(&PID_ROLL);
 8001708:	4809      	ldr	r0, [pc, #36]	; (8001730 <quad_stop+0x38>)
 800170a:	f7ff fe64 	bl	80013d6 <Reset_PID_Integrator>
	Reset_PID_Integrator(&PID_PITCH);
 800170e:	4809      	ldr	r0, [pc, #36]	; (8001734 <quad_stop+0x3c>)
 8001710:	f7ff fe61 	bl	80013d6 <Reset_PID_Integrator>
	Reset_PID_Integrator(&PID_YAW);
 8001714:	4808      	ldr	r0, [pc, #32]	; (8001738 <quad_stop+0x40>)
 8001716:	f7ff fe5e 	bl	80013d6 <Reset_PID_Integrator>
	Reset_PID_Integrator(&PID_HG);
 800171a:	4808      	ldr	r0, [pc, #32]	; (800173c <quad_stop+0x44>)
 800171c:	f7ff fe5b 	bl	80013d6 <Reset_PID_Integrator>
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000447 	.word	0x20000447
 8001728:	2000000c 	.word	0x2000000c
 800172c:	447a0000 	.word	0x447a0000
 8001730:	20000338 	.word	0x20000338
 8001734:	20000368 	.word	0x20000368
 8001738:	20000398 	.word	0x20000398
 800173c:	200003c8 	.word	0x200003c8

08001740 <quad_start>:
void quad_start(){
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	is_running = true;
 8001744:	4b0d      	ldr	r3, [pc, #52]	; (800177c <quad_start+0x3c>)
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
	throttle  = thr_start;
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <quad_start+0x40>)
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <quad_start+0x44>)
 800174e:	601a      	str	r2, [r3, #0]
	angle_pitch = angle_pitch_acc;
 8001750:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <quad_start+0x48>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0d      	ldr	r2, [pc, #52]	; (800178c <quad_start+0x4c>)
 8001756:	6013      	str	r3, [r2, #0]
	angle_roll = angle_roll_acc;
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <quad_start+0x50>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <quad_start+0x54>)
 800175e:	6013      	str	r3, [r2, #0]
	//Reset all
	Reset_PID_Integrator(&PID_ROLL);
 8001760:	480d      	ldr	r0, [pc, #52]	; (8001798 <quad_start+0x58>)
 8001762:	f7ff fe38 	bl	80013d6 <Reset_PID_Integrator>
	Reset_PID_Integrator(&PID_PITCH);
 8001766:	480d      	ldr	r0, [pc, #52]	; (800179c <quad_start+0x5c>)
 8001768:	f7ff fe35 	bl	80013d6 <Reset_PID_Integrator>
	Reset_PID_Integrator(&PID_YAW);
 800176c:	480c      	ldr	r0, [pc, #48]	; (80017a0 <quad_start+0x60>)
 800176e:	f7ff fe32 	bl	80013d6 <Reset_PID_Integrator>
	Reset_PID_Integrator(&PID_HG);
 8001772:	480c      	ldr	r0, [pc, #48]	; (80017a4 <quad_start+0x64>)
 8001774:	f7ff fe2f 	bl	80013d6 <Reset_PID_Integrator>
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000447 	.word	0x20000447
 8001780:	2000000c 	.word	0x2000000c
 8001784:	44a28000 	.word	0x44a28000
 8001788:	2000041c 	.word	0x2000041c
 800178c:	20000420 	.word	0x20000420
 8001790:	20000418 	.word	0x20000418
 8001794:	20000424 	.word	0x20000424
 8001798:	20000338 	.word	0x20000338
 800179c:	20000368 	.word	0x20000368
 80017a0:	20000398 	.word	0x20000398
 80017a4:	200003c8 	.word	0x200003c8

080017a8 <calibrate_gyro>:
void quad_reset(){
PWM[0] = 1000;PWM[1] = 1000;
PWM[2] = 1000;PWM[3] = 1000;
}
void calibrate_gyro() {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
	uint16_t cal_int = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	80fb      	strh	r3, [r7, #6]
	gyro_roll_cal_tt = 0;
 80017b2:	4b41      	ldr	r3, [pc, #260]	; (80018b8 <calibrate_gyro+0x110>)
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
	gyro_pitch_cal_tt = 0;
 80017ba:	4b40      	ldr	r3, [pc, #256]	; (80018bc <calibrate_gyro+0x114>)
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
	gyro_yaw_cal_tt = 0;
 80017c2:	4b3f      	ldr	r3, [pc, #252]	; (80018c0 <calibrate_gyro+0x118>)
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
    for (cal_int = 0; cal_int < 2000 ; cal_int ++) {                                  //Take 2000 readings for calibration.                  //Change the led status every 125 readings to indicate calibration.
 80017ca:	2300      	movs	r3, #0
 80017cc:	80fb      	strh	r3, [r7, #6]
 80017ce:	e05b      	b.n	8001888 <calibrate_gyro+0xe0>
      MPU6050_Read_All(&hi2c2, &MPU6050_Data);                                                                //Read the gyro output.
 80017d0:	493c      	ldr	r1, [pc, #240]	; (80018c4 <calibrate_gyro+0x11c>)
 80017d2:	483d      	ldr	r0, [pc, #244]	; (80018c8 <calibrate_gyro+0x120>)
 80017d4:	f001 fa10 	bl	8002bf8 <MPU6050_Read_All>
      ax_cal_tt += (float)MPU6050_Data.Accel_X_RAW;
 80017d8:	4b3a      	ldr	r3, [pc, #232]	; (80018c4 <calibrate_gyro+0x11c>)
 80017da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fa54 	bl	8000c8c <__aeabi_i2f>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4b39      	ldr	r3, [pc, #228]	; (80018cc <calibrate_gyro+0x124>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4619      	mov	r1, r3
 80017ec:	4610      	mov	r0, r2
 80017ee:	f7ff f999 	bl	8000b24 <__addsf3>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b35      	ldr	r3, [pc, #212]	; (80018cc <calibrate_gyro+0x124>)
 80017f8:	601a      	str	r2, [r3, #0]
      ay_cal_tt += (float)MPU6050_Data.Accel_Y_RAW;
 80017fa:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <calibrate_gyro+0x11c>)
 80017fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fa43 	bl	8000c8c <__aeabi_i2f>
 8001806:	4602      	mov	r2, r0
 8001808:	4b31      	ldr	r3, [pc, #196]	; (80018d0 <calibrate_gyro+0x128>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
 800180e:	4610      	mov	r0, r2
 8001810:	f7ff f988 	bl	8000b24 <__addsf3>
 8001814:	4603      	mov	r3, r0
 8001816:	461a      	mov	r2, r3
 8001818:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <calibrate_gyro+0x128>)
 800181a:	601a      	str	r2, [r3, #0]
      gyro_roll_cal_tt += (float)MPU6050_Data.Gyro_X_RAW;                                                     //Ad roll value to gyro_roll_cal.
 800181c:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <calibrate_gyro+0x11c>)
 800181e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fa32 	bl	8000c8c <__aeabi_i2f>
 8001828:	4602      	mov	r2, r0
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <calibrate_gyro+0x110>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4619      	mov	r1, r3
 8001830:	4610      	mov	r0, r2
 8001832:	f7ff f977 	bl	8000b24 <__addsf3>
 8001836:	4603      	mov	r3, r0
 8001838:	461a      	mov	r2, r3
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <calibrate_gyro+0x110>)
 800183c:	601a      	str	r2, [r3, #0]
      gyro_pitch_cal_tt += (float)MPU6050_Data.Gyro_Y_RAW;                                                   //Ad pitch value to gyro_pitch_cal.
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <calibrate_gyro+0x11c>)
 8001840:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fa21 	bl	8000c8c <__aeabi_i2f>
 800184a:	4602      	mov	r2, r0
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <calibrate_gyro+0x114>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	4610      	mov	r0, r2
 8001854:	f7ff f966 	bl	8000b24 <__addsf3>
 8001858:	4603      	mov	r3, r0
 800185a:	461a      	mov	r2, r3
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <calibrate_gyro+0x114>)
 800185e:	601a      	str	r2, [r3, #0]
      gyro_yaw_cal_tt += (float)MPU6050_Data.Gyro_Z_RAW;                                                       //Ad yaw value to gyro_yaw_cal.
 8001860:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <calibrate_gyro+0x11c>)
 8001862:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fa10 	bl	8000c8c <__aeabi_i2f>
 800186c:	4602      	mov	r2, r0
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <calibrate_gyro+0x118>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4619      	mov	r1, r3
 8001874:	4610      	mov	r0, r2
 8001876:	f7ff f955 	bl	8000b24 <__addsf3>
 800187a:	4603      	mov	r3, r0
 800187c:	461a      	mov	r2, r3
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <calibrate_gyro+0x118>)
 8001880:	601a      	str	r2, [r3, #0]
    for (cal_int = 0; cal_int < 2000 ; cal_int ++) {                                  //Take 2000 readings for calibration.                  //Change the led status every 125 readings to indicate calibration.
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	3301      	adds	r3, #1
 8001886:	80fb      	strh	r3, [r7, #6]
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800188e:	d39f      	bcc.n	80017d0 <calibrate_gyro+0x28>
//  ax_cal_tt  /= 2000;
//	ay_cal_tt  /= 2000;
//	gyro_roll_cal_tt /= 2000;              //Divide the roll total by 2000.
//  gyro_pitch_cal_tt /= 2000;             //Divide the pitch total by 2000.
//  gyro_yaw_cal_tt /= 2000;                //Divide the yaw total by 2000.
    ax_cal_tt = 305;
 8001890:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <calibrate_gyro+0x124>)
 8001892:	4a10      	ldr	r2, [pc, #64]	; (80018d4 <calibrate_gyro+0x12c>)
 8001894:	601a      	str	r2, [r3, #0]
    ay_cal_tt = 170;
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <calibrate_gyro+0x128>)
 8001898:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <calibrate_gyro+0x130>)
 800189a:	601a      	str	r2, [r3, #0]
	gyro_roll_cal_tt = -248;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <calibrate_gyro+0x110>)
 800189e:	4a0f      	ldr	r2, [pc, #60]	; (80018dc <calibrate_gyro+0x134>)
 80018a0:	601a      	str	r2, [r3, #0]
	gyro_pitch_cal_tt = -142;
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <calibrate_gyro+0x114>)
 80018a4:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <calibrate_gyro+0x138>)
 80018a6:	601a      	str	r2, [r3, #0]
	gyro_yaw_cal_tt = -48;
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <calibrate_gyro+0x118>)
 80018aa:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <calibrate_gyro+0x13c>)
 80018ac:	601a      	str	r2, [r3, #0]
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	2000040c 	.word	0x2000040c
 80018bc:	20000410 	.word	0x20000410
 80018c0:	20000414 	.word	0x20000414
 80018c4:	200002f0 	.word	0x200002f0
 80018c8:	2000018c 	.word	0x2000018c
 80018cc:	20000404 	.word	0x20000404
 80018d0:	20000408 	.word	0x20000408
 80018d4:	43988000 	.word	0x43988000
 80018d8:	432a0000 	.word	0x432a0000
 80018dc:	c3780000 	.word	0xc3780000
 80018e0:	c30e0000 	.word	0xc30e0000
 80018e4:	c2400000 	.word	0xc2400000

080018e8 <correct_data_and_calibrate_3truc>:

void correct_data_and_calibrate_3truc(){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0

	MPU6050_Data.G_roll	 = 	(float)(MPU6050_Data.Gyro_X_RAW - gyro_roll_cal_tt	) ;
 80018ec:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <correct_data_and_calibrate_3truc+0xd0>)
 80018ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f9ca 	bl	8000c8c <__aeabi_i2f>
 80018f8:	4602      	mov	r2, r0
 80018fa:	4b30      	ldr	r3, [pc, #192]	; (80019bc <correct_data_and_calibrate_3truc+0xd4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4619      	mov	r1, r3
 8001900:	4610      	mov	r0, r2
 8001902:	f7ff f90d 	bl	8000b20 <__aeabi_fsub>
 8001906:	4603      	mov	r3, r0
 8001908:	461a      	mov	r2, r3
 800190a:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <correct_data_and_calibrate_3truc+0xd0>)
 800190c:	619a      	str	r2, [r3, #24]
	MPU6050_Data.G_pitch = 	(float)(MPU6050_Data.Gyro_Y_RAW - gyro_pitch_cal_tt	)*(-1);
 800190e:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <correct_data_and_calibrate_3truc+0xd0>)
 8001910:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff f9b9 	bl	8000c8c <__aeabi_i2f>
 800191a:	4602      	mov	r2, r0
 800191c:	4b28      	ldr	r3, [pc, #160]	; (80019c0 <correct_data_and_calibrate_3truc+0xd8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f7ff f8fc 	bl	8000b20 <__aeabi_fsub>
 8001928:	4603      	mov	r3, r0
 800192a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800192e:	4a22      	ldr	r2, [pc, #136]	; (80019b8 <correct_data_and_calibrate_3truc+0xd0>)
 8001930:	61d3      	str	r3, [r2, #28]
	MPU6050_Data.G_yaw 	 = 	(float)(MPU6050_Data.Gyro_Z_RAW - gyro_yaw_cal_tt	)*(-1);
 8001932:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <correct_data_and_calibrate_3truc+0xd0>)
 8001934:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff f9a7 	bl	8000c8c <__aeabi_i2f>
 800193e:	4602      	mov	r2, r0
 8001940:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <correct_data_and_calibrate_3truc+0xdc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	4610      	mov	r0, r2
 8001948:	f7ff f8ea 	bl	8000b20 <__aeabi_fsub>
 800194c:	4603      	mov	r3, r0
 800194e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001952:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <correct_data_and_calibrate_3truc+0xd0>)
 8001954:	6213      	str	r3, [r2, #32]

	MPU6050_Data.A_pitch 	= (float)(MPU6050_Data.Accel_X_RAW - ax_cal_tt)	*(1);
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <correct_data_and_calibrate_3truc+0xd0>)
 8001958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff f995 	bl	8000c8c <__aeabi_i2f>
 8001962:	4602      	mov	r2, r0
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <correct_data_and_calibrate_3truc+0xe0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4619      	mov	r1, r3
 800196a:	4610      	mov	r0, r2
 800196c:	f7ff f8d8 	bl	8000b20 <__aeabi_fsub>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <correct_data_and_calibrate_3truc+0xd0>)
 8001976:	611a      	str	r2, [r3, #16]
	MPU6050_Data.A_roll 	= (float)(MPU6050_Data.Accel_Y_RAW - ay_cal_tt)	*(-1);
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <correct_data_and_calibrate_3truc+0xd0>)
 800197a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f984 	bl	8000c8c <__aeabi_i2f>
 8001984:	4602      	mov	r2, r0
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <correct_data_and_calibrate_3truc+0xe4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4619      	mov	r1, r3
 800198c:	4610      	mov	r0, r2
 800198e:	f7ff f8c7 	bl	8000b20 <__aeabi_fsub>
 8001992:	4603      	mov	r3, r0
 8001994:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001998:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <correct_data_and_calibrate_3truc+0xd0>)
 800199a:	60d3      	str	r3, [r2, #12]
	MPU6050_Data.A_yaw 		= (float)(MPU6050_Data.Accel_Z_RAW)	*(-1);
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <correct_data_and_calibrate_3truc+0xd0>)
 800199e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff f972 	bl	8000c8c <__aeabi_i2f>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019ae:	4a02      	ldr	r2, [pc, #8]	; (80019b8 <correct_data_and_calibrate_3truc+0xd0>)
 80019b0:	6153      	str	r3, [r2, #20]

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200002f0 	.word	0x200002f0
 80019bc:	2000040c 	.word	0x2000040c
 80019c0:	20000410 	.word	0x20000410
 80019c4:	20000414 	.word	0x20000414
 80019c8:	20000404 	.word	0x20000404
 80019cc:	20000408 	.word	0x20000408

080019d0 <calculate_agl_roll_pitch>:

void calculate_agl_roll_pitch(){
 80019d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019d4:	af00      	add	r7, sp, #0
	//bo loc
	MPU6050_Data.Gx_roll  = MPU6050_Data.Gx_roll*0.8	+(float)(MPU6050_Data.G_roll /65.5)*0.2;//Gyro pid input is deg/sec.
 80019d6:	4bc0      	ldr	r3, [pc, #768]	; (8001cd8 <calculate_agl_roll_pitch+0x308>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fd1c 	bl	8000418 <__aeabi_f2d>
 80019e0:	a3b5      	add	r3, pc, #724	; (adr r3, 8001cb8 <calculate_agl_roll_pitch+0x2e8>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	f7fe fd6f 	bl	80004c8 <__aeabi_dmul>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4614      	mov	r4, r2
 80019f0:	461d      	mov	r5, r3
 80019f2:	4bb9      	ldr	r3, [pc, #740]	; (8001cd8 <calculate_agl_roll_pitch+0x308>)
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	49b9      	ldr	r1, [pc, #740]	; (8001cdc <calculate_agl_roll_pitch+0x30c>)
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fa4f 	bl	8000e9c <__aeabi_fdiv>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fd09 	bl	8000418 <__aeabi_f2d>
 8001a06:	a3ae      	add	r3, pc, #696	; (adr r3, 8001cc0 <calculate_agl_roll_pitch+0x2f0>)
 8001a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0c:	f7fe fd5c 	bl	80004c8 <__aeabi_dmul>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4620      	mov	r0, r4
 8001a16:	4629      	mov	r1, r5
 8001a18:	f7fe fba0 	bl	800015c <__adddf3>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4610      	mov	r0, r2
 8001a22:	4619      	mov	r1, r3
 8001a24:	f7ff f828 	bl	8000a78 <__aeabi_d2f>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4aab      	ldr	r2, [pc, #684]	; (8001cd8 <calculate_agl_roll_pitch+0x308>)
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
	MPU6050_Data.Gy_pitch = MPU6050_Data.Gy_pitch*0.8	+(float)(MPU6050_Data.G_pitch /65.5)*0.2;//Gyro pid input is deg/sec.
 8001a2e:	4baa      	ldr	r3, [pc, #680]	; (8001cd8 <calculate_agl_roll_pitch+0x308>)
 8001a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fcf0 	bl	8000418 <__aeabi_f2d>
 8001a38:	a39f      	add	r3, pc, #636	; (adr r3, 8001cb8 <calculate_agl_roll_pitch+0x2e8>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe fd43 	bl	80004c8 <__aeabi_dmul>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4614      	mov	r4, r2
 8001a48:	461d      	mov	r5, r3
 8001a4a:	4ba3      	ldr	r3, [pc, #652]	; (8001cd8 <calculate_agl_roll_pitch+0x308>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	49a3      	ldr	r1, [pc, #652]	; (8001cdc <calculate_agl_roll_pitch+0x30c>)
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fa23 	bl	8000e9c <__aeabi_fdiv>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fcdd 	bl	8000418 <__aeabi_f2d>
 8001a5e:	a398      	add	r3, pc, #608	; (adr r3, 8001cc0 <calculate_agl_roll_pitch+0x2f0>)
 8001a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a64:	f7fe fd30 	bl	80004c8 <__aeabi_dmul>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	4629      	mov	r1, r5
 8001a70:	f7fe fb74 	bl	800015c <__adddf3>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f7fe fffc 	bl	8000a78 <__aeabi_d2f>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4a95      	ldr	r2, [pc, #596]	; (8001cd8 <calculate_agl_roll_pitch+0x308>)
 8001a84:	6353      	str	r3, [r2, #52]	; 0x34
	MPU6050_Data.Gz_yaw   = MPU6050_Data.Gz_yaw*0.8		+(float)(MPU6050_Data.G_yaw /65.5)*0.2;//Gyro pid input is deg/sec.
 8001a86:	4b94      	ldr	r3, [pc, #592]	; (8001cd8 <calculate_agl_roll_pitch+0x308>)
 8001a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fcc4 	bl	8000418 <__aeabi_f2d>
 8001a90:	a389      	add	r3, pc, #548	; (adr r3, 8001cb8 <calculate_agl_roll_pitch+0x2e8>)
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	f7fe fd17 	bl	80004c8 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	4b8d      	ldr	r3, [pc, #564]	; (8001cd8 <calculate_agl_roll_pitch+0x308>)
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	498d      	ldr	r1, [pc, #564]	; (8001cdc <calculate_agl_roll_pitch+0x30c>)
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff f9f7 	bl	8000e9c <__aeabi_fdiv>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fcb1 	bl	8000418 <__aeabi_f2d>
 8001ab6:	a382      	add	r3, pc, #520	; (adr r3, 8001cc0 <calculate_agl_roll_pitch+0x2f0>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	f7fe fd04 	bl	80004c8 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	f7fe fb48 	bl	800015c <__adddf3>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7fe ffd0 	bl	8000a78 <__aeabi_d2f>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a7f      	ldr	r2, [pc, #508]	; (8001cd8 <calculate_agl_roll_pitch+0x308>)
 8001adc:	6393      	str	r3, [r2, #56]	; 0x38

	angle_roll  +=  MPU6050_Data.G_roll  * 0.00007634;
 8001ade:	4b80      	ldr	r3, [pc, #512]	; (8001ce0 <calculate_agl_roll_pitch+0x310>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fc98 	bl	8000418 <__aeabi_f2d>
 8001ae8:	4604      	mov	r4, r0
 8001aea:	460d      	mov	r5, r1
 8001aec:	4b7a      	ldr	r3, [pc, #488]	; (8001cd8 <calculate_agl_roll_pitch+0x308>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fc91 	bl	8000418 <__aeabi_f2d>
 8001af6:	a374      	add	r3, pc, #464	; (adr r3, 8001cc8 <calculate_agl_roll_pitch+0x2f8>)
 8001af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afc:	f7fe fce4 	bl	80004c8 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4620      	mov	r0, r4
 8001b06:	4629      	mov	r1, r5
 8001b08:	f7fe fb28 	bl	800015c <__adddf3>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	f7fe ffb0 	bl	8000a78 <__aeabi_d2f>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4a71      	ldr	r2, [pc, #452]	; (8001ce0 <calculate_agl_roll_pitch+0x310>)
 8001b1c:	6013      	str	r3, [r2, #0]
	angle_pitch +=  MPU6050_Data.G_pitch  * 0.00007634;   //Calculate the traveled pitch angle and add this to the angle_pitch variable.
 8001b1e:	4b71      	ldr	r3, [pc, #452]	; (8001ce4 <calculate_agl_roll_pitch+0x314>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fc78 	bl	8000418 <__aeabi_f2d>
 8001b28:	4604      	mov	r4, r0
 8001b2a:	460d      	mov	r5, r1
 8001b2c:	4b6a      	ldr	r3, [pc, #424]	; (8001cd8 <calculate_agl_roll_pitch+0x308>)
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fc71 	bl	8000418 <__aeabi_f2d>
 8001b36:	a364      	add	r3, pc, #400	; (adr r3, 8001cc8 <calculate_agl_roll_pitch+0x2f8>)
 8001b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3c:	f7fe fcc4 	bl	80004c8 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4620      	mov	r0, r4
 8001b46:	4629      	mov	r1, r5
 8001b48:	f7fe fb08 	bl	800015c <__adddf3>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	f7fe ff90 	bl	8000a78 <__aeabi_d2f>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4a62      	ldr	r2, [pc, #392]	; (8001ce4 <calculate_agl_roll_pitch+0x314>)
 8001b5c:	6013      	str	r3, [r2, #0]

	angle_pitch -= angle_roll * sin(MPU6050_Data.G_yaw * 0.000001332);//If the IMU has yawed transfer the roll angle to the pitch angel.
 8001b5e:	4b61      	ldr	r3, [pc, #388]	; (8001ce4 <calculate_agl_roll_pitch+0x314>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fc58 	bl	8000418 <__aeabi_f2d>
 8001b68:	4604      	mov	r4, r0
 8001b6a:	460d      	mov	r5, r1
 8001b6c:	4b5c      	ldr	r3, [pc, #368]	; (8001ce0 <calculate_agl_roll_pitch+0x310>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fc51 	bl	8000418 <__aeabi_f2d>
 8001b76:	4680      	mov	r8, r0
 8001b78:	4689      	mov	r9, r1
 8001b7a:	4b57      	ldr	r3, [pc, #348]	; (8001cd8 <calculate_agl_roll_pitch+0x308>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fc4a 	bl	8000418 <__aeabi_f2d>
 8001b84:	a352      	add	r3, pc, #328	; (adr r3, 8001cd0 <calculate_agl_roll_pitch+0x300>)
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	f7fe fc9d 	bl	80004c8 <__aeabi_dmul>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	f005 f883 	bl	8006ca0 <sin>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4640      	mov	r0, r8
 8001ba0:	4649      	mov	r1, r9
 8001ba2:	f7fe fc91 	bl	80004c8 <__aeabi_dmul>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4620      	mov	r0, r4
 8001bac:	4629      	mov	r1, r5
 8001bae:	f7fe fad3 	bl	8000158 <__aeabi_dsub>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f7fe ff5d 	bl	8000a78 <__aeabi_d2f>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	4a48      	ldr	r2, [pc, #288]	; (8001ce4 <calculate_agl_roll_pitch+0x314>)
 8001bc2:	6013      	str	r3, [r2, #0]
	angle_roll  += angle_pitch* sin(MPU6050_Data.G_yaw * 0.000001332);//If the IMU has yawed transfer the pitch angle to the roll angel.
 8001bc4:	4b46      	ldr	r3, [pc, #280]	; (8001ce0 <calculate_agl_roll_pitch+0x310>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fc25 	bl	8000418 <__aeabi_f2d>
 8001bce:	4604      	mov	r4, r0
 8001bd0:	460d      	mov	r5, r1
 8001bd2:	4b44      	ldr	r3, [pc, #272]	; (8001ce4 <calculate_agl_roll_pitch+0x314>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fc1e 	bl	8000418 <__aeabi_f2d>
 8001bdc:	4680      	mov	r8, r0
 8001bde:	4689      	mov	r9, r1
 8001be0:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <calculate_agl_roll_pitch+0x308>)
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fc17 	bl	8000418 <__aeabi_f2d>
 8001bea:	a339      	add	r3, pc, #228	; (adr r3, 8001cd0 <calculate_agl_roll_pitch+0x300>)
 8001bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf0:	f7fe fc6a 	bl	80004c8 <__aeabi_dmul>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f005 f850 	bl	8006ca0 <sin>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4640      	mov	r0, r8
 8001c06:	4649      	mov	r1, r9
 8001c08:	f7fe fc5e 	bl	80004c8 <__aeabi_dmul>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4620      	mov	r0, r4
 8001c12:	4629      	mov	r1, r5
 8001c14:	f7fe faa2 	bl	800015c <__adddf3>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7fe ff2a 	bl	8000a78 <__aeabi_d2f>
 8001c24:	4603      	mov	r3, r0
 8001c26:	4a2e      	ldr	r2, [pc, #184]	; (8001ce0 <calculate_agl_roll_pitch+0x310>)
 8001c28:	6013      	str	r3, [r2, #0]

		//Tinh toan goc
	acc_total_vector = sqrt((MPU6050_Data.A_roll * MPU6050_Data.A_roll) +
 8001c2a:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <calculate_agl_roll_pitch+0x308>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	4a2a      	ldr	r2, [pc, #168]	; (8001cd8 <calculate_agl_roll_pitch+0x308>)
 8001c30:	68d2      	ldr	r2, [r2, #12]
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff f87d 	bl	8000d34 <__aeabi_fmul>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	461c      	mov	r4, r3
			(MPU6050_Data.A_pitch * MPU6050_Data.A_pitch) + (MPU6050_Data.A_yaw * MPU6050_Data.A_yaw));
 8001c3e:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <calculate_agl_roll_pitch+0x308>)
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	4a25      	ldr	r2, [pc, #148]	; (8001cd8 <calculate_agl_roll_pitch+0x308>)
 8001c44:	6912      	ldr	r2, [r2, #16]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff f873 	bl	8000d34 <__aeabi_fmul>
 8001c4e:	4603      	mov	r3, r0
	acc_total_vector = sqrt((MPU6050_Data.A_roll * MPU6050_Data.A_roll) +
 8001c50:	4619      	mov	r1, r3
 8001c52:	4620      	mov	r0, r4
 8001c54:	f7fe ff66 	bl	8000b24 <__addsf3>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	461c      	mov	r4, r3
			(MPU6050_Data.A_pitch * MPU6050_Data.A_pitch) + (MPU6050_Data.A_yaw * MPU6050_Data.A_yaw));
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <calculate_agl_roll_pitch+0x308>)
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <calculate_agl_roll_pitch+0x308>)
 8001c62:	6952      	ldr	r2, [r2, #20]
 8001c64:	4611      	mov	r1, r2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff f864 	bl	8000d34 <__aeabi_fmul>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4620      	mov	r0, r4
 8001c72:	f7fe ff57 	bl	8000b24 <__addsf3>
 8001c76:	4603      	mov	r3, r0
	acc_total_vector = sqrt((MPU6050_Data.A_roll * MPU6050_Data.A_roll) +
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fbcd 	bl	8000418 <__aeabi_f2d>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	f005 f879 	bl	8006d7c <sqrt>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4610      	mov	r0, r2
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7fe fef1 	bl	8000a78 <__aeabi_d2f>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4a13      	ldr	r2, [pc, #76]	; (8001ce8 <calculate_agl_roll_pitch+0x318>)
 8001c9a:	6013      	str	r3, [r2, #0]
	if(abs(MPU6050_Data.A_roll) < acc_total_vector)
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <calculate_agl_roll_pitch+0x308>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fa0d 	bl	80010c0 <__aeabi_f2iz>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	bfb8      	it	lt
 8001cac:	425b      	neglt	r3, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	e01c      	b.n	8001cec <calculate_agl_roll_pitch+0x31c>
 8001cb2:	bf00      	nop
 8001cb4:	f3af 8000 	nop.w
 8001cb8:	9999999a 	.word	0x9999999a
 8001cbc:	3fe99999 	.word	0x3fe99999
 8001cc0:	9999999a 	.word	0x9999999a
 8001cc4:	3fc99999 	.word	0x3fc99999
 8001cc8:	36a85dad 	.word	0x36a85dad
 8001ccc:	3f140317 	.word	0x3f140317
 8001cd0:	7cfa851f 	.word	0x7cfa851f
 8001cd4:	3eb658e5 	.word	0x3eb658e5
 8001cd8:	200002f0 	.word	0x200002f0
 8001cdc:	42830000 	.word	0x42830000
 8001ce0:	20000424 	.word	0x20000424
 8001ce4:	20000420 	.word	0x20000420
 8001ce8:	20000014 	.word	0x20000014
 8001cec:	f7fe ffce 	bl	8000c8c <__aeabi_i2f>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b65      	ldr	r3, [pc, #404]	; (8001e88 <calculate_agl_roll_pitch+0x4b8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	f7ff f9b9 	bl	8001070 <__aeabi_fcmplt>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d01f      	beq.n	8001d44 <calculate_agl_roll_pitch+0x374>
		{angle_roll_acc = asin(MPU6050_Data.A_roll/acc_total_vector)*(-57.296);	}	//(0 ->90)
 8001d04:	4b61      	ldr	r3, [pc, #388]	; (8001e8c <calculate_agl_roll_pitch+0x4bc>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4a5f      	ldr	r2, [pc, #380]	; (8001e88 <calculate_agl_roll_pitch+0x4b8>)
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f8c4 	bl	8000e9c <__aeabi_fdiv>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fb7e 	bl	8000418 <__aeabi_f2d>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	f005 f802 	bl	8006d2c <asin>
 8001d28:	a34f      	add	r3, pc, #316	; (adr r3, 8001e68 <calculate_agl_roll_pitch+0x498>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	f7fe fbcb 	bl	80004c8 <__aeabi_dmul>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f7fe fe9d 	bl	8000a78 <__aeabi_d2f>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4a53      	ldr	r2, [pc, #332]	; (8001e90 <calculate_agl_roll_pitch+0x4c0>)
 8001d42:	6013      	str	r3, [r2, #0]
	if(abs(MPU6050_Data.A_pitch) < acc_total_vector)
 8001d44:	4b51      	ldr	r3, [pc, #324]	; (8001e8c <calculate_agl_roll_pitch+0x4bc>)
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff f9b9 	bl	80010c0 <__aeabi_f2iz>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bfb8      	it	lt
 8001d54:	425b      	neglt	r3, r3
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe ff98 	bl	8000c8c <__aeabi_i2f>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4b4a      	ldr	r3, [pc, #296]	; (8001e88 <calculate_agl_roll_pitch+0x4b8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4619      	mov	r1, r3
 8001d64:	4610      	mov	r0, r2
 8001d66:	f7ff f983 	bl	8001070 <__aeabi_fcmplt>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d01f      	beq.n	8001db0 <calculate_agl_roll_pitch+0x3e0>
		{angle_pitch_acc = asin(MPU6050_Data.A_pitch/acc_total_vector)* (57.296);}	//(0 ->90)
 8001d70:	4b46      	ldr	r3, [pc, #280]	; (8001e8c <calculate_agl_roll_pitch+0x4bc>)
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	4a44      	ldr	r2, [pc, #272]	; (8001e88 <calculate_agl_roll_pitch+0x4b8>)
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	4611      	mov	r1, r2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff f88e 	bl	8000e9c <__aeabi_fdiv>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fb48 	bl	8000418 <__aeabi_f2d>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f004 ffcc 	bl	8006d2c <asin>
 8001d94:	a336      	add	r3, pc, #216	; (adr r3, 8001e70 <calculate_agl_roll_pitch+0x4a0>)
 8001d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9a:	f7fe fb95 	bl	80004c8 <__aeabi_dmul>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	f7fe fe67 	bl	8000a78 <__aeabi_d2f>
 8001daa:	4603      	mov	r3, r0
 8001dac:	4a39      	ldr	r2, [pc, #228]	; (8001e94 <calculate_agl_roll_pitch+0x4c4>)
 8001dae:	6013      	str	r3, [r2, #0]
	angle_pitch_acc -= (0);
 8001db0:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <calculate_agl_roll_pitch+0x4c4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a37      	ldr	r2, [pc, #220]	; (8001e94 <calculate_agl_roll_pitch+0x4c4>)
 8001db6:	6013      	str	r3, [r2, #0]
	angle_roll_acc -=  (0);
 8001db8:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <calculate_agl_roll_pitch+0x4c0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a34      	ldr	r2, [pc, #208]	; (8001e90 <calculate_agl_roll_pitch+0x4c0>)
 8001dbe:	6013      	str	r3, [r2, #0]
	angle_pitch = angle_pitch * 0.9995 + angle_pitch_acc * 0.0005;
 8001dc0:	4b35      	ldr	r3, [pc, #212]	; (8001e98 <calculate_agl_roll_pitch+0x4c8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fb27 	bl	8000418 <__aeabi_f2d>
 8001dca:	a32b      	add	r3, pc, #172	; (adr r3, 8001e78 <calculate_agl_roll_pitch+0x4a8>)
 8001dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd0:	f7fe fb7a 	bl	80004c8 <__aeabi_dmul>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4614      	mov	r4, r2
 8001dda:	461d      	mov	r5, r3
 8001ddc:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <calculate_agl_roll_pitch+0x4c4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fb19 	bl	8000418 <__aeabi_f2d>
 8001de6:	a326      	add	r3, pc, #152	; (adr r3, 8001e80 <calculate_agl_roll_pitch+0x4b0>)
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	f7fe fb6c 	bl	80004c8 <__aeabi_dmul>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4620      	mov	r0, r4
 8001df6:	4629      	mov	r1, r5
 8001df8:	f7fe f9b0 	bl	800015c <__adddf3>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f7fe fe38 	bl	8000a78 <__aeabi_d2f>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4a23      	ldr	r2, [pc, #140]	; (8001e98 <calculate_agl_roll_pitch+0x4c8>)
 8001e0c:	6013      	str	r3, [r2, #0]
	angle_roll = angle_roll * 0.9995 + angle_roll_acc * 0.0005;
 8001e0e:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <calculate_agl_roll_pitch+0x4cc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fb00 	bl	8000418 <__aeabi_f2d>
 8001e18:	a317      	add	r3, pc, #92	; (adr r3, 8001e78 <calculate_agl_roll_pitch+0x4a8>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	f7fe fb53 	bl	80004c8 <__aeabi_dmul>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4614      	mov	r4, r2
 8001e28:	461d      	mov	r5, r3
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <calculate_agl_roll_pitch+0x4c0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe faf2 	bl	8000418 <__aeabi_f2d>
 8001e34:	a312      	add	r3, pc, #72	; (adr r3, 8001e80 <calculate_agl_roll_pitch+0x4b0>)
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	f7fe fb45 	bl	80004c8 <__aeabi_dmul>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4620      	mov	r0, r4
 8001e44:	4629      	mov	r1, r5
 8001e46:	f7fe f989 	bl	800015c <__adddf3>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	f7fe fe11 	bl	8000a78 <__aeabi_d2f>
 8001e56:	4603      	mov	r3, r0
 8001e58:	4a10      	ldr	r2, [pc, #64]	; (8001e9c <calculate_agl_roll_pitch+0x4cc>)
 8001e5a:	6013      	str	r3, [r2, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e62:	bf00      	nop
 8001e64:	f3af 8000 	nop.w
 8001e68:	53f7ced9 	.word	0x53f7ced9
 8001e6c:	c04ca5e3 	.word	0xc04ca5e3
 8001e70:	53f7ced9 	.word	0x53f7ced9
 8001e74:	404ca5e3 	.word	0x404ca5e3
 8001e78:	6c8b4396 	.word	0x6c8b4396
 8001e7c:	3feffbe7 	.word	0x3feffbe7
 8001e80:	d2f1a9fc 	.word	0xd2f1a9fc
 8001e84:	3f40624d 	.word	0x3f40624d
 8001e88:	20000014 	.word	0x20000014
 8001e8c:	200002f0 	.word	0x200002f0
 8001e90:	20000418 	.word	0x20000418
 8001e94:	2000041c 	.word	0x2000041c
 8001e98:	20000420 	.word	0x20000420
 8001e9c:	20000424 	.word	0x20000424

08001ea0 <calculate_setpoint_pid>:
void calculate_setpoint_pid(){
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
	//Set point roll pitch yal
	pid_roll_setpoint  = 0;
 8001ea4:	4b3c      	ldr	r3, [pc, #240]	; (8001f98 <calculate_setpoint_pid+0xf8>)
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
	pid_pitch_setpoint = 0;
 8001eac:	4b3b      	ldr	r3, [pc, #236]	; (8001f9c <calculate_setpoint_pid+0xfc>)
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
	pid_yaw_setpoint = 0;
 8001eb4:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <calculate_setpoint_pid+0x100>)
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
	pitch_level_adjust = angle_pitch * 15 ;
 8001ebc:	4b39      	ldr	r3, [pc, #228]	; (8001fa4 <calculate_setpoint_pid+0x104>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4939      	ldr	r1, [pc, #228]	; (8001fa8 <calculate_setpoint_pid+0x108>)
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe ff36 	bl	8000d34 <__aeabi_fmul>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4b37      	ldr	r3, [pc, #220]	; (8001fac <calculate_setpoint_pid+0x10c>)
 8001ece:	601a      	str	r2, [r3, #0]
	roll_level_adjust =  angle_roll * 15;
 8001ed0:	4b37      	ldr	r3, [pc, #220]	; (8001fb0 <calculate_setpoint_pid+0x110>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4934      	ldr	r1, [pc, #208]	; (8001fa8 <calculate_setpoint_pid+0x108>)
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe ff2c 	bl	8000d34 <__aeabi_fmul>
 8001edc:	4603      	mov	r3, r0
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b34      	ldr	r3, [pc, #208]	; (8001fb4 <calculate_setpoint_pid+0x114>)
 8001ee2:	601a      	str	r2, [r3, #0]
	if(data_rx_real != 0 && ((data_rx_real & 0b11111) == 0)){
 8001ee4:	4b34      	ldr	r3, [pc, #208]	; (8001fb8 <calculate_setpoint_pid+0x118>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d027      	beq.n	8001f3c <calculate_setpoint_pid+0x9c>
 8001eec:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <calculate_setpoint_pid+0x118>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d121      	bne.n	8001f3c <calculate_setpoint_pid+0x9c>
			if(data_rx_real == 0x20){		quad_front();	}
 8001ef8:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <calculate_setpoint_pid+0x118>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b20      	cmp	r3, #32
 8001efe:	d102      	bne.n	8001f06 <calculate_setpoint_pid+0x66>
 8001f00:	f7ff fbd2 	bl	80016a8 <quad_front>
 8001f04:	e01a      	b.n	8001f3c <calculate_setpoint_pid+0x9c>
			else if(data_rx_real == 0x40){	quad_right();	}
 8001f06:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <calculate_setpoint_pid+0x118>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b40      	cmp	r3, #64	; 0x40
 8001f0c:	d102      	bne.n	8001f14 <calculate_setpoint_pid+0x74>
 8001f0e:	f7ff fba3 	bl	8001658 <quad_right>
 8001f12:	e013      	b.n	8001f3c <calculate_setpoint_pid+0x9c>
			else if(data_rx_real == 0x60){	quad_behind();	}
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <calculate_setpoint_pid+0x118>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b60      	cmp	r3, #96	; 0x60
 8001f1a:	d102      	bne.n	8001f22 <calculate_setpoint_pid+0x82>
 8001f1c:	f7ff fbd8 	bl	80016d0 <quad_behind>
 8001f20:	e00c      	b.n	8001f3c <calculate_setpoint_pid+0x9c>
			else if(data_rx_real == 0x80){	quad_left();	}
 8001f22:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <calculate_setpoint_pid+0x118>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b80      	cmp	r3, #128	; 0x80
 8001f28:	d102      	bne.n	8001f30 <calculate_setpoint_pid+0x90>
 8001f2a:	f7ff fba9 	bl	8001680 <quad_left>
 8001f2e:	e005      	b.n	8001f3c <calculate_setpoint_pid+0x9c>
			else if(data_rx_real == 0x10){	quad_stop();	}
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <calculate_setpoint_pid+0x118>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b10      	cmp	r3, #16
 8001f36:	d101      	bne.n	8001f3c <calculate_setpoint_pid+0x9c>
 8001f38:	f7ff fbde 	bl	80016f8 <quad_stop>
	}
	else{
	}
	pid_roll_setpoint  -= roll_level_adjust;
 8001f3c:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <calculate_setpoint_pid+0xf8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a1c      	ldr	r2, [pc, #112]	; (8001fb4 <calculate_setpoint_pid+0x114>)
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fdea 	bl	8000b20 <__aeabi_fsub>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <calculate_setpoint_pid+0xf8>)
 8001f52:	601a      	str	r2, [r3, #0]
	pid_pitch_setpoint -= pitch_level_adjust;
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <calculate_setpoint_pid+0xfc>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a14      	ldr	r2, [pc, #80]	; (8001fac <calculate_setpoint_pid+0x10c>)
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fdde 	bl	8000b20 <__aeabi_fsub>
 8001f64:	4603      	mov	r3, r0
 8001f66:	461a      	mov	r2, r3
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <calculate_setpoint_pid+0xfc>)
 8001f6a:	601a      	str	r2, [r3, #0]
	pid_roll_setpoint  /= 3.0;
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <calculate_setpoint_pid+0xf8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4912      	ldr	r1, [pc, #72]	; (8001fbc <calculate_setpoint_pid+0x11c>)
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe ff92 	bl	8000e9c <__aeabi_fdiv>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <calculate_setpoint_pid+0xf8>)
 8001f7e:	601a      	str	r2, [r3, #0]
	pid_pitch_setpoint /= 3.0;
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <calculate_setpoint_pid+0xfc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	490d      	ldr	r1, [pc, #52]	; (8001fbc <calculate_setpoint_pid+0x11c>)
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe ff88 	bl	8000e9c <__aeabi_fdiv>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b02      	ldr	r3, [pc, #8]	; (8001f9c <calculate_setpoint_pid+0xfc>)
 8001f92:	601a      	str	r2, [r3, #0]
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000434 	.word	0x20000434
 8001f9c:	20000430 	.word	0x20000430
 8001fa0:	20000438 	.word	0x20000438
 8001fa4:	20000420 	.word	0x20000420
 8001fa8:	41700000 	.word	0x41700000
 8001fac:	20000428 	.word	0x20000428
 8001fb0:	20000424 	.word	0x20000424
 8001fb4:	2000042c 	.word	0x2000042c
 8001fb8:	200002ec 	.word	0x200002ec
 8001fbc:	40400000 	.word	0x40400000

08001fc0 <read_hc05>:
void read_hc05(){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, hc_trigger_pin_Pin, GPIO_PIN_SET);
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	4804      	ldr	r0, [pc, #16]	; (8001fdc <read_hc05+0x1c>)
 8001fca:	f001 ff96 	bl	8003efa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, hc_trigger_pin_Pin, GPIO_PIN_RESET);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	4802      	ldr	r0, [pc, #8]	; (8001fdc <read_hc05+0x1c>)
 8001fd4:	f001 ff91 	bl	8003efa <HAL_GPIO_WritePin>
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40010c00 	.word	0x40010c00

08001fe0 <read_hc05_and_fillter>:
void read_hc05_and_fillter(){
 8001fe0:	b5b0      	push	{r4, r5, r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
	if(first_read_hc == 0){
 8001fe4:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <read_hc05_and_fillter+0xc8>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d149      	bne.n	8002080 <read_hc05_and_fillter+0xa0>
		read_hc05();
 8001fec:	f7ff ffe8 	bl	8001fc0 <read_hc05>
		Kalman_Distance =Kalman_Distance*0.8 + Distance*0.2;
 8001ff0:	4b2e      	ldr	r3, [pc, #184]	; (80020ac <read_hc05_and_fillter+0xcc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fa0f 	bl	8000418 <__aeabi_f2d>
 8001ffa:	a327      	add	r3, pc, #156	; (adr r3, 8002098 <read_hc05_and_fillter+0xb8>)
 8001ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002000:	f7fe fa62 	bl	80004c8 <__aeabi_dmul>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4614      	mov	r4, r2
 800200a:	461d      	mov	r5, r3
 800200c:	4b28      	ldr	r3, [pc, #160]	; (80020b0 <read_hc05_and_fillter+0xd0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fa01 	bl	8000418 <__aeabi_f2d>
 8002016:	a322      	add	r3, pc, #136	; (adr r3, 80020a0 <read_hc05_and_fillter+0xc0>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	f7fe fa54 	bl	80004c8 <__aeabi_dmul>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4620      	mov	r0, r4
 8002026:	4629      	mov	r1, r5
 8002028:	f7fe f898 	bl	800015c <__adddf3>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	f7fe fd20 	bl	8000a78 <__aeabi_d2f>
 8002038:	4603      	mov	r3, r0
 800203a:	4a1c      	ldr	r2, [pc, #112]	; (80020ac <read_hc05_and_fillter+0xcc>)
 800203c:	6013      	str	r3, [r2, #0]
		if(Kalman_Distance <4 )		{Kalman_Distance =4;}
 800203e:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <read_hc05_and_fillter+0xcc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff f812 	bl	8001070 <__aeabi_fcmplt>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <read_hc05_and_fillter+0x7a>
 8002052:	4b16      	ldr	r3, [pc, #88]	; (80020ac <read_hc05_and_fillter+0xcc>)
 8002054:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002058:	601a      	str	r2, [r3, #0]
		if(Kalman_Distance >450 )	{Kalman_Distance =450; }
 800205a:	4b14      	ldr	r3, [pc, #80]	; (80020ac <read_hc05_and_fillter+0xcc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4915      	ldr	r1, [pc, #84]	; (80020b4 <read_hc05_and_fillter+0xd4>)
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff f823 	bl	80010ac <__aeabi_fcmpgt>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <read_hc05_and_fillter+0x92>
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <read_hc05_and_fillter+0xcc>)
 800206e:	4a11      	ldr	r2, [pc, #68]	; (80020b4 <read_hc05_and_fillter+0xd4>)
 8002070:	601a      	str	r2, [r3, #0]
		first_read_hc++;
 8002072:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <read_hc05_and_fillter+0xc8>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <read_hc05_and_fillter+0xc8>)
 800207c:	701a      	strb	r2, [r3, #0]
	}
	else if(first_read_hc >= 1){
		first_read_hc = 0;
	}
}
 800207e:	e006      	b.n	800208e <read_hc05_and_fillter+0xae>
	else if(first_read_hc >= 1){
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <read_hc05_and_fillter+0xc8>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <read_hc05_and_fillter+0xae>
		first_read_hc = 0;
 8002088:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <read_hc05_and_fillter+0xc8>)
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
}
 800208e:	bf00      	nop
 8002090:	bdb0      	pop	{r4, r5, r7, pc}
 8002092:	bf00      	nop
 8002094:	f3af 8000 	nop.w
 8002098:	9999999a 	.word	0x9999999a
 800209c:	3fe99999 	.word	0x3fe99999
 80020a0:	9999999a 	.word	0x9999999a
 80020a4:	3fc99999 	.word	0x3fc99999
 80020a8:	20000445 	.word	0x20000445
 80020ac:	20000024 	.word	0x20000024
 80020b0:	20000440 	.word	0x20000440
 80020b4:	43e10000 	.word	0x43e10000

080020b8 <check_looptime>:
void check_looptime(){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
	//check loop time for 1 time calculate
	loop_time =(HAL_GetTick() - timer_before) ;
 80020bc:	f001 fc46 	bl	800394c <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <check_looptime+0x4c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <check_looptime+0x50>)
 80020ca:	6013      	str	r3, [r2, #0]
	if(loop_time > 5){loi_xxx = 1;}
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <check_looptime+0x50>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b05      	cmp	r3, #5
 80020d2:	d90b      	bls.n	80020ec <check_looptime+0x34>
 80020d4:	4b0d      	ldr	r3, [pc, #52]	; (800210c <check_looptime+0x54>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
 	while(loop_time <= 3){
 80020da:	e007      	b.n	80020ec <check_looptime+0x34>
		loop_time =(HAL_GetTick() - timer_before);
 80020dc:	f001 fc36 	bl	800394c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <check_looptime+0x4c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	4a07      	ldr	r2, [pc, #28]	; (8002108 <check_looptime+0x50>)
 80020ea:	6013      	str	r3, [r2, #0]
 	while(loop_time <= 3){
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <check_looptime+0x50>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d9f3      	bls.n	80020dc <check_looptime+0x24>
	}
	timer_before = HAL_GetTick();
 80020f4:	f001 fc2a 	bl	800394c <HAL_GetTick>
 80020f8:	4603      	mov	r3, r0
 80020fa:	4a02      	ldr	r2, [pc, #8]	; (8002104 <check_looptime+0x4c>)
 80020fc:	6013      	str	r3, [r2, #0]
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000400 	.word	0x20000400
 8002108:	200003f8 	.word	0x200003f8
 800210c:	20000446 	.word	0x20000446

08002110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
 	Int_PID_Integrator(&PID_ROLL,	KP_xy	,	KI_xy	,	KD_xy	);
 8002116:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800211a:	4a7e      	ldr	r2, [pc, #504]	; (8002314 <main+0x204>)
 800211c:	497e      	ldr	r1, [pc, #504]	; (8002318 <main+0x208>)
 800211e:	487f      	ldr	r0, [pc, #508]	; (800231c <main+0x20c>)
 8002120:	f7ff f944 	bl	80013ac <Int_PID_Integrator>
	Int_PID_Integrator(&PID_PITCH,	KP_xy	,	KI_xy	,	KD_xy	);
 8002124:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8002128:	4a7a      	ldr	r2, [pc, #488]	; (8002314 <main+0x204>)
 800212a:	497b      	ldr	r1, [pc, #492]	; (8002318 <main+0x208>)
 800212c:	487c      	ldr	r0, [pc, #496]	; (8002320 <main+0x210>)
 800212e:	f7ff f93d 	bl	80013ac <Int_PID_Integrator>
	Int_PID_Integrator(&PID_YAW,	KP_z	,	KI_z	,	KD_z	);
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	4a7b      	ldr	r2, [pc, #492]	; (8002324 <main+0x214>)
 8002138:	497b      	ldr	r1, [pc, #492]	; (8002328 <main+0x218>)
 800213a:	487c      	ldr	r0, [pc, #496]	; (800232c <main+0x21c>)
 800213c:	f7ff f936 	bl	80013ac <Int_PID_Integrator>
	Int_PID_Integrator(&PID_HG,		KP_dc	,	KI_dc	,	KD_dc	);
 8002140:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002144:	4a7a      	ldr	r2, [pc, #488]	; (8002330 <main+0x220>)
 8002146:	497b      	ldr	r1, [pc, #492]	; (8002334 <main+0x224>)
 8002148:	487b      	ldr	r0, [pc, #492]	; (8002338 <main+0x228>)
 800214a:	f7ff f92f 	bl	80013ac <Int_PID_Integrator>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800214e:	f001 fba5 	bl	800389c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002152:	f000 fa9d 	bl	8002690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002156:	f000 fc37 	bl	80029c8 <MX_GPIO_Init>
  MX_I2C2_Init();
 800215a:	f000 fadd 	bl	8002718 <MX_I2C2_Init>
  MX_SPI1_Init();
 800215e:	f000 fb09 	bl	8002774 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002162:	f000 fb3d 	bl	80027e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002166:	f000 fbe3 	bl	8002930 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_RESET);
 800216a:	2200      	movs	r2, #0
 800216c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002170:	4872      	ldr	r0, [pc, #456]	; (800233c <main+0x22c>)
 8002172:	f001 fec2 	bl	8003efa <HAL_GPIO_WritePin>
  while(MPU6050_Data.MPU6050_address != 0x68){
 8002176:	e00a      	b.n	800218e <main+0x7e>
	  MPU6050_Data.MPU6050_address =MPU6050_Init(&hi2c2);
 8002178:	4871      	ldr	r0, [pc, #452]	; (8002340 <main+0x230>)
 800217a:	f000 fcd0 	bl	8002b1e <MPU6050_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	461a      	mov	r2, r3
 8002182:	4b70      	ldr	r3, [pc, #448]	; (8002344 <main+0x234>)
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	  HAL_Delay(50);
 8002188:	2032      	movs	r0, #50	; 0x32
 800218a:	f001 fbe9 	bl	8003960 <HAL_Delay>
  while(MPU6050_Data.MPU6050_address != 0x68){
 800218e:	4b6d      	ldr	r3, [pc, #436]	; (8002344 <main+0x234>)
 8002190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002194:	2b68      	cmp	r3, #104	; 0x68
 8002196:	d1ef      	bne.n	8002178 <main+0x68>
  }
  set_val_for_nfr24(&nrf_rx_cfg);
 8002198:	486b      	ldr	r0, [pc, #428]	; (8002348 <main+0x238>)
 800219a:	f7ff f993 	bl	80014c4 <set_val_for_nfr24>
  mbal_NRF24L01_Init(&nrf_rx_cfg );
 800219e:	486a      	ldr	r0, [pc, #424]	; (8002348 <main+0x238>)
 80021a0:	f000 ff6d 	bl	800307e <mbal_NRF24L01_Init>
  HAL_Delay(100);
 80021a4:	2064      	movs	r0, #100	; 0x64
 80021a6:	f001 fbdb 	bl	8003960 <HAL_Delay>
  // Innit value for NRF24
MPU6050_Data.A_roll = 0;
 80021aa:	4b66      	ldr	r3, [pc, #408]	; (8002344 <main+0x234>)
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	60da      	str	r2, [r3, #12]
MPU6050_Data.A_pitch = 0;
 80021b2:	4b64      	ldr	r3, [pc, #400]	; (8002344 <main+0x234>)
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]
MPU6050_Data.A_yaw = 0;
 80021ba:	4b62      	ldr	r3, [pc, #392]	; (8002344 <main+0x234>)
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	615a      	str	r2, [r3, #20]
  MPU6050_Data.KalmanAngleX = 0;
 80021c2:	4b60      	ldr	r3, [pc, #384]	; (8002344 <main+0x234>)
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24
  MPU6050_Data.KalmanAngleY = 0;
 80021ca:	4b5e      	ldr	r3, [pc, #376]	; (8002344 <main+0x234>)
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	629a      	str	r2, [r3, #40]	; 0x28
  MPU6050_Data.KalmanAngleZ = 0;
 80021d2:	4b5c      	ldr	r3, [pc, #368]	; (8002344 <main+0x234>)
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	62da      	str	r2, [r3, #44]	; 0x2c
  MPU6050_Data.Gx_roll  = 0;
 80021da:	4b5a      	ldr	r3, [pc, #360]	; (8002344 <main+0x234>)
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	631a      	str	r2, [r3, #48]	; 0x30
  MPU6050_Data.Gy_pitch =0;
 80021e2:	4b58      	ldr	r3, [pc, #352]	; (8002344 <main+0x234>)
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	635a      	str	r2, [r3, #52]	; 0x34
  MPU6050_Data.Gz_yaw   =0;
 80021ea:	4b56      	ldr	r3, [pc, #344]	; (8002344 <main+0x234>)
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(100);
 80021f2:	2064      	movs	r0, #100	; 0x64
 80021f4:	f001 fbb4 	bl	8003960 <HAL_Delay>
  // Innit value for MORTOR
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80021f8:	2100      	movs	r1, #0
 80021fa:	4854      	ldr	r0, [pc, #336]	; (800234c <main+0x23c>)
 80021fc:	f003 ffa6 	bl	800614c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8002200:	2104      	movs	r1, #4
 8002202:	4852      	ldr	r0, [pc, #328]	; (800234c <main+0x23c>)
 8002204:	f003 ffa2 	bl	800614c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8002208:	2108      	movs	r1, #8
 800220a:	4850      	ldr	r0, [pc, #320]	; (800234c <main+0x23c>)
 800220c:	f003 ff9e 	bl	800614c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8002210:	210c      	movs	r1, #12
 8002212:	484e      	ldr	r0, [pc, #312]	; (800234c <main+0x23c>)
 8002214:	f003 ff9a 	bl	800614c <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,1000);
 8002218:	4b4c      	ldr	r3, [pc, #304]	; (800234c <main+0x23c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002220:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,1000);
 8002222:	4b4a      	ldr	r3, [pc, #296]	; (800234c <main+0x23c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800222a:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,1000);
 800222c:	4b47      	ldr	r3, [pc, #284]	; (800234c <main+0x23c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002234:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,1000);
 8002236:	4b45      	ldr	r3, [pc, #276]	; (800234c <main+0x23c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
  //get first value
  calibrate_gyro();
 8002240:	f7ff fab2 	bl	80017a8 <calibrate_gyro>
  timer_before = HAL_GetTick();//get time when starting
 8002244:	f001 fb82 	bl	800394c <HAL_GetTick>
 8002248:	4603      	mov	r3, r0
 800224a:	4a41      	ldr	r2, [pc, #260]	; (8002350 <main+0x240>)
 800224c:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_SET);
 800224e:	2201      	movs	r2, #1
 8002250:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002254:	4839      	ldr	r0, [pc, #228]	; (800233c <main+0x22c>)
 8002256:	f001 fe50 	bl	8003efa <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
/*------------------------------READ DATA----------------------*/
	  mbal_NRF24L01_GetData(&nrf_rx_cfg, &data_rx_real);
 800225a:	493e      	ldr	r1, [pc, #248]	; (8002354 <main+0x244>)
 800225c:	483a      	ldr	r0, [pc, #232]	; (8002348 <main+0x238>)
 800225e:	f001 f862 	bl	8003326 <mbal_NRF24L01_GetData>
	  MPU6050_Read_All(&hi2c2, &MPU6050_Data);//read data
 8002262:	4938      	ldr	r1, [pc, #224]	; (8002344 <main+0x234>)
 8002264:	4836      	ldr	r0, [pc, #216]	; (8002340 <main+0x230>)
 8002266:	f000 fcc7 	bl	8002bf8 <MPU6050_Read_All>
	  correct_data_and_calibrate_3truc();
 800226a:	f7ff fb3d 	bl	80018e8 <correct_data_and_calibrate_3truc>
	  calculate_agl_roll_pitch();
 800226e:	f7ff fbaf 	bl	80019d0 <calculate_agl_roll_pitch>
	  calculate_setpoint_pid();
 8002272:	f7ff fe15 	bl	8001ea0 <calculate_setpoint_pid>
	  read_hc05_and_fillter();
 8002276:	f7ff feb3 	bl	8001fe0 <read_hc05_and_fillter>
///*-------------------------Check right left front behind----------------------*/
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  button_press = 0;
 800227a:	4b37      	ldr	r3, [pc, #220]	; (8002358 <main+0x248>)
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
	  for(button_press = 0 ;button_press < 5 ; button_press ++){
 8002280:	4b35      	ldr	r3, [pc, #212]	; (8002358 <main+0x248>)
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
 8002286:	e023      	b.n	80022d0 <main+0x1c0>
		  if((data_rx_real>>button_press)&1){
 8002288:	4b32      	ldr	r3, [pc, #200]	; (8002354 <main+0x244>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	4b32      	ldr	r3, [pc, #200]	; (8002358 <main+0x248>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	fa42 f303 	asr.w	r3, r2, r3
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d11d      	bne.n	80022da <main+0x1ca>
			  break;
		  }
		  if(button_press == 4){
 800229e:	4b2e      	ldr	r3, [pc, #184]	; (8002358 <main+0x248>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d10e      	bne.n	80022c4 <main+0x1b4>
			  if(!((data_rx_real>>button_press)&1)){
 80022a6:	4b2b      	ldr	r3, [pc, #172]	; (8002354 <main+0x244>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <main+0x248>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	fa42 f303 	asr.w	r3, r2, r3
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d103      	bne.n	80022c4 <main+0x1b4>
				  button_press = 10;
 80022bc:	4b26      	ldr	r3, [pc, #152]	; (8002358 <main+0x248>)
 80022be:	220a      	movs	r2, #10
 80022c0:	701a      	strb	r2, [r3, #0]
				  break;
 80022c2:	e00b      	b.n	80022dc <main+0x1cc>
	  for(button_press = 0 ;button_press < 5 ; button_press ++){
 80022c4:	4b24      	ldr	r3, [pc, #144]	; (8002358 <main+0x248>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	3301      	adds	r3, #1
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	4b22      	ldr	r3, [pc, #136]	; (8002358 <main+0x248>)
 80022ce:	701a      	strb	r2, [r3, #0]
 80022d0:	4b21      	ldr	r3, [pc, #132]	; (8002358 <main+0x248>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d9d7      	bls.n	8002288 <main+0x178>
 80022d8:	e000      	b.n	80022dc <main+0x1cc>
			  break;
 80022da:	bf00      	nop
			  }
		  }
	  }
	if(button_press==3)		{	quad_stop();	}
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <main+0x248>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d102      	bne.n	80022ea <main+0x1da>
 80022e4:	f7ff fa08 	bl	80016f8 <quad_stop>
 80022e8:	e047      	b.n	800237a <main+0x26a>
	else if(button_press==2){	if (hacanh == false){quad_start();	}}
 80022ea:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <main+0x248>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d109      	bne.n	8002306 <main+0x1f6>
 80022f2:	4b1a      	ldr	r3, [pc, #104]	; (800235c <main+0x24c>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	f083 0301 	eor.w	r3, r3, #1
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d03c      	beq.n	800237a <main+0x26a>
 8002300:	f7ff fa1e 	bl	8001740 <quad_start>
 8002304:	e039      	b.n	800237a <main+0x26a>
	else if(button_press==0){	quad_down();	}
 8002306:	4b14      	ldr	r3, [pc, #80]	; (8002358 <main+0x248>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d128      	bne.n	8002360 <main+0x250>
 800230e:	f7ff f973 	bl	80015f8 <quad_down>
 8002312:	e032      	b.n	800237a <main+0x26a>
 8002314:	3cb43958 	.word	0x3cb43958
 8002318:	3f6b851f 	.word	0x3f6b851f
 800231c:	20000338 	.word	0x20000338
 8002320:	20000368 	.word	0x20000368
 8002324:	3c9ba5e3 	.word	0x3c9ba5e3
 8002328:	404ccccd 	.word	0x404ccccd
 800232c:	20000398 	.word	0x20000398
 8002330:	3a83126f 	.word	0x3a83126f
 8002334:	3e4ccccd 	.word	0x3e4ccccd
 8002338:	200003c8 	.word	0x200003c8
 800233c:	40011000 	.word	0x40011000
 8002340:	2000018c 	.word	0x2000018c
 8002344:	200002f0 	.word	0x200002f0
 8002348:	200002c8 	.word	0x200002c8
 800234c:	20000238 	.word	0x20000238
 8002350:	20000400 	.word	0x20000400
 8002354:	200002ec 	.word	0x200002ec
 8002358:	200002ed 	.word	0x200002ed
 800235c:	20000448 	.word	0x20000448
	else if(button_press==1){	if (hacanh == false){quad_up();		}}
 8002360:	4b7a      	ldr	r3, [pc, #488]	; (800254c <main+0x43c>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d108      	bne.n	800237a <main+0x26a>
 8002368:	4b79      	ldr	r3, [pc, #484]	; (8002550 <main+0x440>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	f083 0301 	eor.w	r3, r3, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <main+0x26a>
 8002376:	f7ff f8fb 	bl	8001570 <quad_up>
	else {}
///*------------------------------Operation Run Motor ----------------------*/
  	  	PID_Calculation(&PID_ROLL,pid_roll_setpoint,MPU6050_Data.Gx_roll );
 800237a:	4b76      	ldr	r3, [pc, #472]	; (8002554 <main+0x444>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a76      	ldr	r2, [pc, #472]	; (8002558 <main+0x448>)
 8002380:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002382:	4619      	mov	r1, r3
 8002384:	4875      	ldr	r0, [pc, #468]	; (800255c <main+0x44c>)
 8002386:	f7fe fee1 	bl	800114c <PID_Calculation>
  		PID_Calculation(&PID_PITCH,pid_pitch_setpoint,MPU6050_Data.Gy_pitch );
 800238a:	4b75      	ldr	r3, [pc, #468]	; (8002560 <main+0x450>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a72      	ldr	r2, [pc, #456]	; (8002558 <main+0x448>)
 8002390:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002392:	4619      	mov	r1, r3
 8002394:	4873      	ldr	r0, [pc, #460]	; (8002564 <main+0x454>)
 8002396:	f7fe fed9 	bl	800114c <PID_Calculation>
  		PID_Calculation(&PID_YAW,pid_yaw_setpoint,MPU6050_Data.Gz_yaw );
 800239a:	4b73      	ldr	r3, [pc, #460]	; (8002568 <main+0x458>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a6e      	ldr	r2, [pc, #440]	; (8002558 <main+0x448>)
 80023a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023a2:	4619      	mov	r1, r3
 80023a4:	4871      	ldr	r0, [pc, #452]	; (800256c <main+0x45c>)
 80023a6:	f7fe fed1 	bl	800114c <PID_Calculation>
  		PID_Calculation_thr(&PID_HG,Setting_docao,Kalman_Distance);
 80023aa:	4b71      	ldr	r3, [pc, #452]	; (8002570 <main+0x460>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a71      	ldr	r2, [pc, #452]	; (8002574 <main+0x464>)
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	4619      	mov	r1, r3
 80023b4:	4870      	ldr	r0, [pc, #448]	; (8002578 <main+0x468>)
 80023b6:	f7fe ff61 	bl	800127c <PID_Calculation_thr>

if(hacanh == true && is_running == true){
 80023ba:	4b65      	ldr	r3, [pc, #404]	; (8002550 <main+0x440>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d037      	beq.n	8002432 <main+0x322>
 80023c2:	4b6e      	ldr	r3, [pc, #440]	; (800257c <main+0x46c>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d033      	beq.n	8002432 <main+0x322>
	uint32_t time = (HAL_GetTick() - loop_time_hacanh);
 80023ca:	f001 fabf 	bl	800394c <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	4b6b      	ldr	r3, [pc, #428]	; (8002580 <main+0x470>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	603b      	str	r3, [r7, #0]
	if(time > 500){
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023de:	d90e      	bls.n	80023fe <main+0x2ee>
		throttle = throttle - 20;
 80023e0:	4b68      	ldr	r3, [pc, #416]	; (8002584 <main+0x474>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4968      	ldr	r1, [pc, #416]	; (8002588 <main+0x478>)
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fb9a 	bl	8000b20 <__aeabi_fsub>
 80023ec:	4603      	mov	r3, r0
 80023ee:	461a      	mov	r2, r3
 80023f0:	4b64      	ldr	r3, [pc, #400]	; (8002584 <main+0x474>)
 80023f2:	601a      	str	r2, [r3, #0]
		loop_time_hacanh = HAL_GetTick();
 80023f4:	f001 faaa 	bl	800394c <HAL_GetTick>
 80023f8:	4603      	mov	r3, r0
 80023fa:	4a61      	ldr	r2, [pc, #388]	; (8002580 <main+0x470>)
 80023fc:	6013      	str	r3, [r2, #0]
	}
	if((Kalman_Distance <= 8)&& (throttle <= 1200))
 80023fe:	4b5d      	ldr	r3, [pc, #372]	; (8002574 <main+0x464>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe fe3c 	bl	8001084 <__aeabi_fcmple>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <main+0x318>
 8002412:	4b5c      	ldr	r3, [pc, #368]	; (8002584 <main+0x474>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	495d      	ldr	r1, [pc, #372]	; (800258c <main+0x47c>)
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fe33 	bl	8001084 <__aeabi_fcmple>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <main+0x318>
	{	quad_stop();	}
 8002424:	f7ff f968 	bl	80016f8 <quad_stop>
	throttle_PID = throttle;
 8002428:	4b56      	ldr	r3, [pc, #344]	; (8002584 <main+0x474>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a58      	ldr	r2, [pc, #352]	; (8002590 <main+0x480>)
 800242e:	6013      	str	r3, [r2, #0]
if(hacanh == true && is_running == true){
 8002430:	e003      	b.n	800243a <main+0x32a>
}
else{
	throttle_PID = throttle;
 8002432:	4b54      	ldr	r3, [pc, #336]	; (8002584 <main+0x474>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a56      	ldr	r2, [pc, #344]	; (8002590 <main+0x480>)
 8002438:	6013      	str	r3, [r2, #0]
}
if((is_running== true)){
 800243a:	4b50      	ldr	r3, [pc, #320]	; (800257c <main+0x46c>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8104 	beq.w	800264c <main+0x53c>
	  		PWM[0] = (uint16_t)(throttle_PID + PID_ROLL.pid_result + PID_PITCH.pid_result + PID_YAW.pid_result);
 8002444:	4b45      	ldr	r3, [pc, #276]	; (800255c <main+0x44c>)
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	4a51      	ldr	r2, [pc, #324]	; (8002590 <main+0x480>)
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	4611      	mov	r1, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe fb68 	bl	8000b24 <__addsf3>
 8002454:	4603      	mov	r3, r0
 8002456:	461a      	mov	r2, r3
 8002458:	4b42      	ldr	r3, [pc, #264]	; (8002564 <main+0x454>)
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	4619      	mov	r1, r3
 800245e:	4610      	mov	r0, r2
 8002460:	f7fe fb60 	bl	8000b24 <__addsf3>
 8002464:	4603      	mov	r3, r0
 8002466:	461a      	mov	r2, r3
 8002468:	4b40      	ldr	r3, [pc, #256]	; (800256c <main+0x45c>)
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	4619      	mov	r1, r3
 800246e:	4610      	mov	r0, r2
 8002470:	f7fe fb58 	bl	8000b24 <__addsf3>
 8002474:	4603      	mov	r3, r0
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fe48 	bl	800110c <__aeabi_f2uiz>
 800247c:	4603      	mov	r3, r0
 800247e:	b29a      	uxth	r2, r3
 8002480:	4b44      	ldr	r3, [pc, #272]	; (8002594 <main+0x484>)
 8002482:	801a      	strh	r2, [r3, #0]
	  		PWM[1] = (uint16_t)(throttle_PID + PID_ROLL.pid_result - PID_PITCH.pid_result - PID_YAW.pid_result);
 8002484:	4b35      	ldr	r3, [pc, #212]	; (800255c <main+0x44c>)
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	4a41      	ldr	r2, [pc, #260]	; (8002590 <main+0x480>)
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fb48 	bl	8000b24 <__addsf3>
 8002494:	4603      	mov	r3, r0
 8002496:	461a      	mov	r2, r3
 8002498:	4b32      	ldr	r3, [pc, #200]	; (8002564 <main+0x454>)
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	4619      	mov	r1, r3
 800249e:	4610      	mov	r0, r2
 80024a0:	f7fe fb3e 	bl	8000b20 <__aeabi_fsub>
 80024a4:	4603      	mov	r3, r0
 80024a6:	461a      	mov	r2, r3
 80024a8:	4b30      	ldr	r3, [pc, #192]	; (800256c <main+0x45c>)
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	4619      	mov	r1, r3
 80024ae:	4610      	mov	r0, r2
 80024b0:	f7fe fb36 	bl	8000b20 <__aeabi_fsub>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe fe28 	bl	800110c <__aeabi_f2uiz>
 80024bc:	4603      	mov	r3, r0
 80024be:	b29a      	uxth	r2, r3
 80024c0:	4b34      	ldr	r3, [pc, #208]	; (8002594 <main+0x484>)
 80024c2:	805a      	strh	r2, [r3, #2]
	  		PWM[2] = (uint16_t)(throttle_PID - PID_ROLL.pid_result + PID_PITCH.pid_result - PID_YAW.pid_result);
 80024c4:	4b32      	ldr	r3, [pc, #200]	; (8002590 <main+0x480>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a24      	ldr	r2, [pc, #144]	; (800255c <main+0x44c>)
 80024ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fb26 	bl	8000b20 <__aeabi_fsub>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461a      	mov	r2, r3
 80024d8:	4b22      	ldr	r3, [pc, #136]	; (8002564 <main+0x454>)
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	4619      	mov	r1, r3
 80024de:	4610      	mov	r0, r2
 80024e0:	f7fe fb20 	bl	8000b24 <__addsf3>
 80024e4:	4603      	mov	r3, r0
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b20      	ldr	r3, [pc, #128]	; (800256c <main+0x45c>)
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	4619      	mov	r1, r3
 80024ee:	4610      	mov	r0, r2
 80024f0:	f7fe fb16 	bl	8000b20 <__aeabi_fsub>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe fe08 	bl	800110c <__aeabi_f2uiz>
 80024fc:	4603      	mov	r3, r0
 80024fe:	b29a      	uxth	r2, r3
 8002500:	4b24      	ldr	r3, [pc, #144]	; (8002594 <main+0x484>)
 8002502:	809a      	strh	r2, [r3, #4]
	  		PWM[3] = (uint16_t)(throttle_PID - PID_ROLL.pid_result - PID_PITCH.pid_result + PID_YAW.pid_result);
 8002504:	4b22      	ldr	r3, [pc, #136]	; (8002590 <main+0x480>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a14      	ldr	r2, [pc, #80]	; (800255c <main+0x44c>)
 800250a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800250c:	4611      	mov	r1, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe fb06 	bl	8000b20 <__aeabi_fsub>
 8002514:	4603      	mov	r3, r0
 8002516:	461a      	mov	r2, r3
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <main+0x454>)
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	4619      	mov	r1, r3
 800251e:	4610      	mov	r0, r2
 8002520:	f7fe fafe 	bl	8000b20 <__aeabi_fsub>
 8002524:	4603      	mov	r3, r0
 8002526:	461a      	mov	r2, r3
 8002528:	4b10      	ldr	r3, [pc, #64]	; (800256c <main+0x45c>)
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	4619      	mov	r1, r3
 800252e:	4610      	mov	r0, r2
 8002530:	f7fe faf8 	bl	8000b24 <__addsf3>
 8002534:	4603      	mov	r3, r0
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fde8 	bl	800110c <__aeabi_f2uiz>
 800253c:	4603      	mov	r3, r0
 800253e:	b29a      	uxth	r2, r3
 8002540:	4b14      	ldr	r3, [pc, #80]	; (8002594 <main+0x484>)
 8002542:	80da      	strh	r2, [r3, #6]
	  for(int i=0 ; i <4 ; i++){
 8002544:	2300      	movs	r3, #0
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	e068      	b.n	800261c <main+0x50c>
 800254a:	bf00      	nop
 800254c:	200002ed 	.word	0x200002ed
 8002550:	20000448 	.word	0x20000448
 8002554:	20000434 	.word	0x20000434
 8002558:	200002f0 	.word	0x200002f0
 800255c:	20000338 	.word	0x20000338
 8002560:	20000430 	.word	0x20000430
 8002564:	20000368 	.word	0x20000368
 8002568:	20000438 	.word	0x20000438
 800256c:	20000398 	.word	0x20000398
 8002570:	20000018 	.word	0x20000018
 8002574:	20000024 	.word	0x20000024
 8002578:	200003c8 	.word	0x200003c8
 800257c:	20000447 	.word	0x20000447
 8002580:	200003fc 	.word	0x200003fc
 8002584:	2000000c 	.word	0x2000000c
 8002588:	41a00000 	.word	0x41a00000
 800258c:	44960000 	.word	0x44960000
 8002590:	20000010 	.word	0x20000010
 8002594:	2000001c 	.word	0x2000001c
	  	if (PWM[i] > Max_PWM) {PWM[i] = Max_PWM;}
 8002598:	4a38      	ldr	r2, [pc, #224]	; (800267c <main+0x56c>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe fb73 	bl	8000c8c <__aeabi_i2f>
 80025a6:	4602      	mov	r2, r0
 80025a8:	4b35      	ldr	r3, [pc, #212]	; (8002680 <main+0x570>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4619      	mov	r1, r3
 80025ae:	4610      	mov	r0, r2
 80025b0:	f7fe fd7c 	bl	80010ac <__aeabi_fcmpgt>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <main+0x4c0>
 80025ba:	4b31      	ldr	r3, [pc, #196]	; (8002680 <main+0x570>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fda4 	bl	800110c <__aeabi_f2uiz>
 80025c4:	4603      	mov	r3, r0
 80025c6:	b299      	uxth	r1, r3
 80025c8:	4a2c      	ldr	r2, [pc, #176]	; (800267c <main+0x56c>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  	if (PWM[i] < Min_PWM) {if(hacanh == false){PWM[i] = Min_PWM;}}
 80025d0:	4a2a      	ldr	r2, [pc, #168]	; (800267c <main+0x56c>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe fb57 	bl	8000c8c <__aeabi_i2f>
 80025de:	4602      	mov	r2, r0
 80025e0:	4b28      	ldr	r3, [pc, #160]	; (8002684 <main+0x574>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	4610      	mov	r0, r2
 80025e8:	f7fe fd42 	bl	8001070 <__aeabi_fcmplt>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d011      	beq.n	8002616 <main+0x506>
 80025f2:	4b25      	ldr	r3, [pc, #148]	; (8002688 <main+0x578>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	f083 0301 	eor.w	r3, r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00a      	beq.n	8002616 <main+0x506>
 8002600:	4b20      	ldr	r3, [pc, #128]	; (8002684 <main+0x574>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe fd81 	bl	800110c <__aeabi_f2uiz>
 800260a:	4603      	mov	r3, r0
 800260c:	b299      	uxth	r1, r3
 800260e:	4a1b      	ldr	r2, [pc, #108]	; (800267c <main+0x56c>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int i=0 ; i <4 ; i++){
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3301      	adds	r3, #1
 800261a:	607b      	str	r3, [r7, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b03      	cmp	r3, #3
 8002620:	ddba      	ble.n	8002598 <main+0x488>
	  }
  		__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,PWM[0]);
 8002622:	4b16      	ldr	r3, [pc, #88]	; (800267c <main+0x56c>)
 8002624:	881a      	ldrh	r2, [r3, #0]
 8002626:	4b19      	ldr	r3, [pc, #100]	; (800268c <main+0x57c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	635a      	str	r2, [r3, #52]	; 0x34
  		__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,PWM[1]);
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <main+0x56c>)
 800262e:	885a      	ldrh	r2, [r3, #2]
 8002630:	4b16      	ldr	r3, [pc, #88]	; (800268c <main+0x57c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	639a      	str	r2, [r3, #56]	; 0x38
  		__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,PWM[2]);
 8002636:	4b11      	ldr	r3, [pc, #68]	; (800267c <main+0x56c>)
 8002638:	889a      	ldrh	r2, [r3, #4]
 800263a:	4b14      	ldr	r3, [pc, #80]	; (800268c <main+0x57c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	63da      	str	r2, [r3, #60]	; 0x3c
  		__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,PWM[3]);
 8002640:	4b0e      	ldr	r3, [pc, #56]	; (800267c <main+0x56c>)
 8002642:	88da      	ldrh	r2, [r3, #6]
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <main+0x57c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
 800264a:	e013      	b.n	8002674 <main+0x564>
	  }
	  else{
		__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,1000);
 800264c:	4b0f      	ldr	r3, [pc, #60]	; (800268c <main+0x57c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002654:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,1000);
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <main+0x57c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800265e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,1000);
 8002660:	4b0a      	ldr	r3, [pc, #40]	; (800268c <main+0x57c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002668:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_4,1000);
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <main+0x57c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002672:	641a      	str	r2, [r3, #64]	; 0x40
	  }
///*-----------------------------End-Operation ----------------------*/
  check_looptime();
 8002674:	f7ff fd20 	bl	80020b8 <check_looptime>
	  mbal_NRF24L01_GetData(&nrf_rx_cfg, &data_rx_real);
 8002678:	e5ef      	b.n	800225a <main+0x14a>
 800267a:	bf00      	nop
 800267c:	2000001c 	.word	0x2000001c
 8002680:	20000000 	.word	0x20000000
 8002684:	20000008 	.word	0x20000008
 8002688:	20000448 	.word	0x20000448
 800268c:	20000238 	.word	0x20000238

08002690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b090      	sub	sp, #64	; 0x40
 8002694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002696:	f107 0318 	add.w	r3, r7, #24
 800269a:	2228      	movs	r2, #40	; 0x28
 800269c:	2100      	movs	r1, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	f004 faf6 	bl	8006c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026a4:	1d3b      	adds	r3, r7, #4
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	609a      	str	r2, [r3, #8]
 80026ae:	60da      	str	r2, [r3, #12]
 80026b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026b2:	2301      	movs	r3, #1
 80026b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80026bc:	2300      	movs	r3, #0
 80026be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026c0:	2301      	movs	r3, #1
 80026c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026c4:	2302      	movs	r3, #2
 80026c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80026d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026d4:	f107 0318 	add.w	r3, r7, #24
 80026d8:	4618      	mov	r0, r3
 80026da:	f002 fc3f 	bl	8004f5c <HAL_RCC_OscConfig>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80026e4:	f000 fa16 	bl	8002b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026e8:	230f      	movs	r3, #15
 80026ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026ec:	2302      	movs	r3, #2
 80026ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80026f0:	2380      	movs	r3, #128	; 0x80
 80026f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026f4:	2300      	movs	r3, #0
 80026f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026fc:	1d3b      	adds	r3, r7, #4
 80026fe:	2102      	movs	r1, #2
 8002700:	4618      	mov	r0, r3
 8002702:	f002 fead 	bl	8005460 <HAL_RCC_ClockConfig>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800270c:	f000 fa02 	bl	8002b14 <Error_Handler>
  }
}
 8002710:	bf00      	nop
 8002712:	3740      	adds	r7, #64	; 0x40
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <MX_I2C2_Init+0x50>)
 800271e:	4a13      	ldr	r2, [pc, #76]	; (800276c <MX_I2C2_Init+0x54>)
 8002720:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <MX_I2C2_Init+0x50>)
 8002724:	4a12      	ldr	r2, [pc, #72]	; (8002770 <MX_I2C2_Init+0x58>)
 8002726:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <MX_I2C2_Init+0x50>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <MX_I2C2_Init+0x50>)
 8002730:	2200      	movs	r2, #0
 8002732:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <MX_I2C2_Init+0x50>)
 8002736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800273a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800273c:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <MX_I2C2_Init+0x50>)
 800273e:	2200      	movs	r2, #0
 8002740:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <MX_I2C2_Init+0x50>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002748:	4b07      	ldr	r3, [pc, #28]	; (8002768 <MX_I2C2_Init+0x50>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <MX_I2C2_Init+0x50>)
 8002750:	2200      	movs	r2, #0
 8002752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002754:	4804      	ldr	r0, [pc, #16]	; (8002768 <MX_I2C2_Init+0x50>)
 8002756:	f001 fc01 	bl	8003f5c <HAL_I2C_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002760:	f000 f9d8 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}
 8002768:	2000018c 	.word	0x2000018c
 800276c:	40005800 	.word	0x40005800
 8002770:	00061a80 	.word	0x00061a80

08002774 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002778:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <MX_SPI1_Init+0x64>)
 800277a:	4a18      	ldr	r2, [pc, #96]	; (80027dc <MX_SPI1_Init+0x68>)
 800277c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800277e:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <MX_SPI1_Init+0x64>)
 8002780:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002784:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002786:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <MX_SPI1_Init+0x64>)
 8002788:	2200      	movs	r2, #0
 800278a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800278c:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <MX_SPI1_Init+0x64>)
 800278e:	2200      	movs	r2, #0
 8002790:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <MX_SPI1_Init+0x64>)
 8002794:	2200      	movs	r2, #0
 8002796:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <MX_SPI1_Init+0x64>)
 800279a:	2200      	movs	r2, #0
 800279c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <MX_SPI1_Init+0x64>)
 80027a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80027a6:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <MX_SPI1_Init+0x64>)
 80027a8:	2230      	movs	r2, #48	; 0x30
 80027aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027ac:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <MX_SPI1_Init+0x64>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <MX_SPI1_Init+0x64>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027b8:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <MX_SPI1_Init+0x64>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <MX_SPI1_Init+0x64>)
 80027c0:	220a      	movs	r2, #10
 80027c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027c4:	4804      	ldr	r0, [pc, #16]	; (80027d8 <MX_SPI1_Init+0x64>)
 80027c6:	f002 ffcf 	bl	8005768 <HAL_SPI_Init>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80027d0:	f000 f9a0 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	200001e0 	.word	0x200001e0
 80027dc:	40013000 	.word	0x40013000

080027e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b092      	sub	sp, #72	; 0x48
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
 8002800:	615a      	str	r2, [r3, #20]
 8002802:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002804:	1d3b      	adds	r3, r7, #4
 8002806:	2220      	movs	r2, #32
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f004 fa40 	bl	8006c90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002810:	4b45      	ldr	r3, [pc, #276]	; (8002928 <MX_TIM1_Init+0x148>)
 8002812:	4a46      	ldr	r2, [pc, #280]	; (800292c <MX_TIM1_Init+0x14c>)
 8002814:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8002816:	4b44      	ldr	r3, [pc, #272]	; (8002928 <MX_TIM1_Init+0x148>)
 8002818:	221f      	movs	r2, #31
 800281a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800281c:	4b42      	ldr	r3, [pc, #264]	; (8002928 <MX_TIM1_Init+0x148>)
 800281e:	2200      	movs	r2, #0
 8002820:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8002822:	4b41      	ldr	r3, [pc, #260]	; (8002928 <MX_TIM1_Init+0x148>)
 8002824:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002828:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800282a:	4b3f      	ldr	r3, [pc, #252]	; (8002928 <MX_TIM1_Init+0x148>)
 800282c:	2200      	movs	r2, #0
 800282e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002830:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <MX_TIM1_Init+0x148>)
 8002832:	2200      	movs	r2, #0
 8002834:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002836:	4b3c      	ldr	r3, [pc, #240]	; (8002928 <MX_TIM1_Init+0x148>)
 8002838:	2200      	movs	r2, #0
 800283a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800283c:	483a      	ldr	r0, [pc, #232]	; (8002928 <MX_TIM1_Init+0x148>)
 800283e:	f003 fc35 	bl	80060ac <HAL_TIM_PWM_Init>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002848:	f000 f964 	bl	8002b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800284c:	2300      	movs	r3, #0
 800284e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002850:	2300      	movs	r3, #0
 8002852:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002854:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002858:	4619      	mov	r1, r3
 800285a:	4833      	ldr	r0, [pc, #204]	; (8002928 <MX_TIM1_Init+0x148>)
 800285c:	f004 f93e 	bl	8006adc <HAL_TIMEx_MasterConfigSynchronization>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002866:	f000 f955 	bl	8002b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800286a:	2360      	movs	r3, #96	; 0x60
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 800286e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002872:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002874:	2300      	movs	r3, #0
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002878:	2300      	movs	r3, #0
 800287a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800287c:	2300      	movs	r3, #0
 800287e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002880:	2300      	movs	r3, #0
 8002882:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002884:	2300      	movs	r3, #0
 8002886:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800288c:	2200      	movs	r2, #0
 800288e:	4619      	mov	r1, r3
 8002890:	4825      	ldr	r0, [pc, #148]	; (8002928 <MX_TIM1_Init+0x148>)
 8002892:	f003 fcfd 	bl	8006290 <HAL_TIM_PWM_ConfigChannel>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800289c:	f000 f93a 	bl	8002b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a4:	2204      	movs	r2, #4
 80028a6:	4619      	mov	r1, r3
 80028a8:	481f      	ldr	r0, [pc, #124]	; (8002928 <MX_TIM1_Init+0x148>)
 80028aa:	f003 fcf1 	bl	8006290 <HAL_TIM_PWM_ConfigChannel>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80028b4:	f000 f92e 	bl	8002b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028bc:	2208      	movs	r2, #8
 80028be:	4619      	mov	r1, r3
 80028c0:	4819      	ldr	r0, [pc, #100]	; (8002928 <MX_TIM1_Init+0x148>)
 80028c2:	f003 fce5 	bl	8006290 <HAL_TIM_PWM_ConfigChannel>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80028cc:	f000 f922 	bl	8002b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d4:	220c      	movs	r2, #12
 80028d6:	4619      	mov	r1, r3
 80028d8:	4813      	ldr	r0, [pc, #76]	; (8002928 <MX_TIM1_Init+0x148>)
 80028da:	f003 fcd9 	bl	8006290 <HAL_TIM_PWM_ConfigChannel>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80028e4:	f000 f916 	bl	8002b14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028e8:	2300      	movs	r3, #0
 80028ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002900:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	4619      	mov	r1, r3
 800290a:	4807      	ldr	r0, [pc, #28]	; (8002928 <MX_TIM1_Init+0x148>)
 800290c:	f004 f944 	bl	8006b98 <HAL_TIMEx_ConfigBreakDeadTime>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8002916:	f000 f8fd 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800291a:	4803      	ldr	r0, [pc, #12]	; (8002928 <MX_TIM1_Init+0x148>)
 800291c:	f000 ff30 	bl	8003780 <HAL_TIM_MspPostInit>

}
 8002920:	bf00      	nop
 8002922:	3748      	adds	r7, #72	; 0x48
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000238 	.word	0x20000238
 800292c:	40012c00 	.word	0x40012c00

08002930 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002936:	f107 0308 	add.w	r3, r7, #8
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002944:	463b      	mov	r3, r7
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800294c:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <MX_TIM2_Init+0x94>)
 800294e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002952:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35;
 8002954:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <MX_TIM2_Init+0x94>)
 8002956:	2223      	movs	r2, #35	; 0x23
 8002958:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800295a:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <MX_TIM2_Init+0x94>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8002960:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <MX_TIM2_Init+0x94>)
 8002962:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002966:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002968:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <MX_TIM2_Init+0x94>)
 800296a:	2200      	movs	r2, #0
 800296c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <MX_TIM2_Init+0x94>)
 8002970:	2200      	movs	r2, #0
 8002972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002974:	4813      	ldr	r0, [pc, #76]	; (80029c4 <MX_TIM2_Init+0x94>)
 8002976:	f003 faff 	bl	8005f78 <HAL_TIM_Base_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002980:	f000 f8c8 	bl	8002b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002988:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800298a:	f107 0308 	add.w	r3, r7, #8
 800298e:	4619      	mov	r1, r3
 8002990:	480c      	ldr	r0, [pc, #48]	; (80029c4 <MX_TIM2_Init+0x94>)
 8002992:	f003 fd3b 	bl	800640c <HAL_TIM_ConfigClockSource>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800299c:	f000 f8ba 	bl	8002b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029a0:	2300      	movs	r3, #0
 80029a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029a8:	463b      	mov	r3, r7
 80029aa:	4619      	mov	r1, r3
 80029ac:	4805      	ldr	r0, [pc, #20]	; (80029c4 <MX_TIM2_Init+0x94>)
 80029ae:	f004 f895 	bl	8006adc <HAL_TIMEx_MasterConfigSynchronization>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80029b8:	f000 f8ac 	bl	8002b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029bc:	bf00      	nop
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000280 	.word	0x20000280

080029c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ce:	f107 0310 	add.w	r3, r7, #16
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	605a      	str	r2, [r3, #4]
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029dc:	4b47      	ldr	r3, [pc, #284]	; (8002afc <MX_GPIO_Init+0x134>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	4a46      	ldr	r2, [pc, #280]	; (8002afc <MX_GPIO_Init+0x134>)
 80029e2:	f043 0310 	orr.w	r3, r3, #16
 80029e6:	6193      	str	r3, [r2, #24]
 80029e8:	4b44      	ldr	r3, [pc, #272]	; (8002afc <MX_GPIO_Init+0x134>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f4:	4b41      	ldr	r3, [pc, #260]	; (8002afc <MX_GPIO_Init+0x134>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	4a40      	ldr	r2, [pc, #256]	; (8002afc <MX_GPIO_Init+0x134>)
 80029fa:	f043 0320 	orr.w	r3, r3, #32
 80029fe:	6193      	str	r3, [r2, #24]
 8002a00:	4b3e      	ldr	r3, [pc, #248]	; (8002afc <MX_GPIO_Init+0x134>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	f003 0320 	and.w	r3, r3, #32
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0c:	4b3b      	ldr	r3, [pc, #236]	; (8002afc <MX_GPIO_Init+0x134>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	4a3a      	ldr	r2, [pc, #232]	; (8002afc <MX_GPIO_Init+0x134>)
 8002a12:	f043 0304 	orr.w	r3, r3, #4
 8002a16:	6193      	str	r3, [r2, #24]
 8002a18:	4b38      	ldr	r3, [pc, #224]	; (8002afc <MX_GPIO_Init+0x134>)
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a24:	4b35      	ldr	r3, [pc, #212]	; (8002afc <MX_GPIO_Init+0x134>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	4a34      	ldr	r2, [pc, #208]	; (8002afc <MX_GPIO_Init+0x134>)
 8002a2a:	f043 0308 	orr.w	r3, r3, #8
 8002a2e:	6193      	str	r3, [r2, #24]
 8002a30:	4b32      	ldr	r3, [pc, #200]	; (8002afc <MX_GPIO_Init+0x134>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	603b      	str	r3, [r7, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a42:	482f      	ldr	r0, [pc, #188]	; (8002b00 <MX_GPIO_Init+0x138>)
 8002a44:	f001 fa59 	bl	8003efa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_pin_Pin|CE_pin_Pin, GPIO_PIN_RESET);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2112      	movs	r1, #18
 8002a4c:	482d      	ldr	r0, [pc, #180]	; (8002b04 <MX_GPIO_Init+0x13c>)
 8002a4e:	f001 fa54 	bl	8003efa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(hc_trigger_pin_GPIO_Port, hc_trigger_pin_Pin, GPIO_PIN_RESET);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2101      	movs	r1, #1
 8002a56:	482c      	ldr	r0, [pc, #176]	; (8002b08 <MX_GPIO_Init+0x140>)
 8002a58:	f001 fa4f 	bl	8003efa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a62:	2301      	movs	r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a6e:	f107 0310 	add.w	r3, r7, #16
 8002a72:	4619      	mov	r1, r3
 8002a74:	4822      	ldr	r0, [pc, #136]	; (8002b00 <MX_GPIO_Init+0x138>)
 8002a76:	f001 f8a5 	bl	8003bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_pin_Pin CE_pin_Pin */
  GPIO_InitStruct.Pin = CSN_pin_Pin|CE_pin_Pin;
 8002a7a:	2312      	movs	r3, #18
 8002a7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a86:	2302      	movs	r3, #2
 8002a88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8a:	f107 0310 	add.w	r3, r7, #16
 8002a8e:	4619      	mov	r1, r3
 8002a90:	481c      	ldr	r0, [pc, #112]	; (8002b04 <MX_GPIO_Init+0x13c>)
 8002a92:	f001 f897 	bl	8003bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : hc_trigger_pin_Pin */
  GPIO_InitStruct.Pin = hc_trigger_pin_Pin;
 8002a96:	2301      	movs	r3, #1
 8002a98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(hc_trigger_pin_GPIO_Port, &GPIO_InitStruct);
 8002aa6:	f107 0310 	add.w	r3, r7, #16
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4816      	ldr	r0, [pc, #88]	; (8002b08 <MX_GPIO_Init+0x140>)
 8002aae:	f001 f889 	bl	8003bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <MX_GPIO_Init+0x144>)
 8002ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002abe:	f107 0310 	add.w	r3, r7, #16
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4810      	ldr	r0, [pc, #64]	; (8002b08 <MX_GPIO_Init+0x140>)
 8002ac6:	f001 f87d 	bl	8003bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : irq_nrf_Pin */
  GPIO_InitStruct.Pin = irq_nrf_Pin;
 8002aca:	2308      	movs	r3, #8
 8002acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ace:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <MX_GPIO_Init+0x148>)
 8002ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(irq_nrf_GPIO_Port, &GPIO_InitStruct);
 8002ad6:	f107 0310 	add.w	r3, r7, #16
 8002ada:	4619      	mov	r1, r3
 8002adc:	480a      	ldr	r0, [pc, #40]	; (8002b08 <MX_GPIO_Init+0x140>)
 8002ade:	f001 f871 	bl	8003bc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	2007      	movs	r0, #7
 8002ae8:	f001 f835 	bl	8003b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002aec:	2007      	movs	r0, #7
 8002aee:	f001 f84e 	bl	8003b8e <HAL_NVIC_EnableIRQ>

}
 8002af2:	bf00      	nop
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40011000 	.word	0x40011000
 8002b04:	40010800 	.word	0x40010800
 8002b08:	40010c00 	.word	0x40010c00
 8002b0c:	10310000 	.word	0x10310000
 8002b10:	10110000 	.word	0x10110000

08002b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b18:	b672      	cpsid	i
}
 8002b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <Error_Handler+0x8>

08002b1e <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b088      	sub	sp, #32
 8002b22:	af04      	add	r7, sp, #16
 8002b24:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002b26:	f242 7310 	movw	r3, #10000	; 0x2710
 8002b2a:	9302      	str	r3, [sp, #8]
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	9301      	str	r3, [sp, #4]
 8002b30:	f107 030f 	add.w	r3, r7, #15
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	2301      	movs	r3, #1
 8002b38:	2275      	movs	r2, #117	; 0x75
 8002b3a:	21d0      	movs	r1, #208	; 0xd0
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f001 fc4b 	bl	80043d8 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	2b68      	cmp	r3, #104	; 0x68
 8002b46:	d151      	bne.n	8002bec <MPU6050_Init+0xce>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0x00;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002b4c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002b50:	9302      	str	r3, [sp, #8]
 8002b52:	2301      	movs	r3, #1
 8002b54:	9301      	str	r3, [sp, #4]
 8002b56:	f107 030e 	add.w	r3, r7, #14
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	226b      	movs	r2, #107	; 0x6b
 8002b60:	21d0      	movs	r1, #208	; 0xd0
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f001 fb3e 	bl	80041e4 <HAL_I2C_Mem_Write>

        //Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002b6c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002b70:	9302      	str	r3, [sp, #8]
 8002b72:	2301      	movs	r3, #1
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	f107 030e 	add.w	r3, r7, #14
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	2219      	movs	r2, #25
 8002b80:	21d0      	movs	r1, #208	; 0xd0
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f001 fb2e 	bl	80041e4 <HAL_I2C_Mem_Write>

        // 1B ->8
        Data = 0x8;
 8002b88:	2308      	movs	r3, #8
 8002b8a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002b8c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002b90:	9302      	str	r3, [sp, #8]
 8002b92:	2301      	movs	r3, #1
 8002b94:	9301      	str	r3, [sp, #4]
 8002b96:	f107 030e 	add.w	r3, r7, #14
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	221b      	movs	r2, #27
 8002ba0:	21d0      	movs	r1, #208	; 0xd0
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f001 fb1e 	bl	80041e4 <HAL_I2C_Mem_Write>

        // 1C ->10
        Data = 0x10;
 8002ba8:	2310      	movs	r3, #16
 8002baa:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002bac:	f242 7310 	movw	r3, #10000	; 0x2710
 8002bb0:	9302      	str	r3, [sp, #8]
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	9301      	str	r3, [sp, #4]
 8002bb6:	f107 030e 	add.w	r3, r7, #14
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	221c      	movs	r2, #28
 8002bc0:	21d0      	movs	r1, #208	; 0xd0
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f001 fb0e 	bl	80041e4 <HAL_I2C_Mem_Write>

        // 1Khz
        Data = 0x03;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002bcc:	f242 7310 	movw	r3, #10000	; 0x2710
 8002bd0:	9302      	str	r3, [sp, #8]
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	9301      	str	r3, [sp, #4]
 8002bd6:	f107 030e 	add.w	r3, r7, #14
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	2301      	movs	r3, #1
 8002bde:	221a      	movs	r2, #26
 8002be0:	21d0      	movs	r1, #208	; 0xd0
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f001 fafe 	bl	80041e4 <HAL_I2C_Mem_Write>

        return check;
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	e000      	b.n	8002bee <MPU6050_Init+0xd0>
    }
    return 0;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002bf8:	b5b0      	push	{r4, r5, r7, lr}
 8002bfa:	b08a      	sub	sp, #40	; 0x28
 8002bfc:	af04      	add	r7, sp, #16
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[14];
//	uint8_t set_gyro_angles = 0;
	    // Read 14 BYTES of data starting from ACCEL_XOUT_H register
	    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002c02:	f242 7310 	movw	r3, #10000	; 0x2710
 8002c06:	9302      	str	r3, [sp, #8]
 8002c08:	230e      	movs	r3, #14
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	2301      	movs	r3, #1
 8002c14:	223b      	movs	r2, #59	; 0x3b
 8002c16:	21d0      	movs	r1, #208	; 0xd0
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f001 fbdd 	bl	80043d8 <HAL_I2C_Mem_Read>

	    DataStruct->Accel_X_RAW= (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8002c1e:	7a3b      	ldrb	r3, [r7, #8]
 8002c20:	021b      	lsls	r3, r3, #8
 8002c22:	b21a      	sxth	r2, r3
 8002c24:	7a7b      	ldrb	r3, [r7, #9]
 8002c26:	b21b      	sxth	r3, r3
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	b21a      	sxth	r2, r3
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	801a      	strh	r2, [r3, #0]
	    DataStruct->Accel_Y_RAW= (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8002c30:	7abb      	ldrb	r3, [r7, #10]
 8002c32:	021b      	lsls	r3, r3, #8
 8002c34:	b21a      	sxth	r2, r3
 8002c36:	7afb      	ldrb	r3, [r7, #11]
 8002c38:	b21b      	sxth	r3, r3
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	b21a      	sxth	r2, r3
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	805a      	strh	r2, [r3, #2]
	    DataStruct->Accel_Z_RAW= (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002c42:	7b3b      	ldrb	r3, [r7, #12]
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	b21a      	sxth	r2, r3
 8002c48:	7b7b      	ldrb	r3, [r7, #13]
 8002c4a:	b21b      	sxth	r3, r3
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	b21a      	sxth	r2, r3
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	809a      	strh	r2, [r3, #4]
	    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8002c54:	7c3b      	ldrb	r3, [r7, #16]
 8002c56:	021b      	lsls	r3, r3, #8
 8002c58:	b21a      	sxth	r2, r3
 8002c5a:	7c7b      	ldrb	r3, [r7, #17]
 8002c5c:	b21b      	sxth	r3, r3
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	b21a      	sxth	r2, r3
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	80da      	strh	r2, [r3, #6]
	    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10]<< 8 | Rec_Data[11]);
 8002c66:	7cbb      	ldrb	r3, [r7, #18]
 8002c68:	021b      	lsls	r3, r3, #8
 8002c6a:	b21a      	sxth	r2, r3
 8002c6c:	7cfb      	ldrb	r3, [r7, #19]
 8002c6e:	b21b      	sxth	r3, r3
 8002c70:	4313      	orrs	r3, r2
 8002c72:	b21a      	sxth	r2, r3
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	811a      	strh	r2, [r3, #8]
	    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12]<< 8 | Rec_Data[13]);
 8002c78:	7d3b      	ldrb	r3, [r7, #20]
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	b21a      	sxth	r2, r3
 8002c7e:	7d7b      	ldrb	r3, [r7, #21]
 8002c80:	b21b      	sxth	r3, r3
 8002c82:	4313      	orrs	r3, r2
 8002c84:	b21a      	sxth	r2, r3
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	815a      	strh	r2, [r3, #10]
//	    DataStruct->Ay = (float)DataStruct->Accel_Y_RAW / 1.0;
//	    DataStruct->Az = (float)DataStruct->Accel_Z_RAW / 1.0;
//	    DataStruct->Gx = (float)DataStruct->Gyro_X_RAW / 1.0;
//	    DataStruct->Gy = (float)DataStruct->Gyro_Y_RAW / 1.0;
//	    DataStruct->Gz = (float)DataStruct->Gyro_Z_RAW / 1.0;
	    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, (float)DataStruct->Accel_X_RAW ,(float)DataStruct->Accel_X_RAW/4200, 0.01);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fd fffb 	bl	8000c8c <__aeabi_i2f>
 8002c96:	4603      	mov	r3, r0
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd fbbd 	bl	8000418 <__aeabi_f2d>
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	460d      	mov	r5, r1
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fd ffef 	bl	8000c8c <__aeabi_i2f>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4945      	ldr	r1, [pc, #276]	; (8002dc8 <MPU6050_Read_All+0x1d0>)
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe f8f2 	bl	8000e9c <__aeabi_fdiv>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fd fbac 	bl	8000418 <__aeabi_f2d>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	a13e      	add	r1, pc, #248	; (adr r1, 8002dc0 <MPU6050_Read_All+0x1c8>)
 8002cc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002cce:	e9cd 2300 	strd	r2, r3, [sp]
 8002cd2:	4622      	mov	r2, r4
 8002cd4:	462b      	mov	r3, r5
 8002cd6:	483d      	ldr	r0, [pc, #244]	; (8002dcc <MPU6050_Read_All+0x1d4>)
 8002cd8:	f000 f87e 	bl	8002dd8 <Kalman_getAngle>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f7fd fec8 	bl	8000a78 <__aeabi_d2f>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24
	    DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, (float)DataStruct->Accel_Y_RAW ,(float)DataStruct->Accel_Y_RAW/4200, 0.01);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fd ffc9 	bl	8000c8c <__aeabi_i2f>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fd fb8b 	bl	8000418 <__aeabi_f2d>
 8002d02:	4604      	mov	r4, r0
 8002d04:	460d      	mov	r5, r1
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fd ffbd 	bl	8000c8c <__aeabi_i2f>
 8002d12:	4603      	mov	r3, r0
 8002d14:	492c      	ldr	r1, [pc, #176]	; (8002dc8 <MPU6050_Read_All+0x1d0>)
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe f8c0 	bl	8000e9c <__aeabi_fdiv>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fb7a 	bl	8000418 <__aeabi_f2d>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	a125      	add	r1, pc, #148	; (adr r1, 8002dc0 <MPU6050_Read_All+0x1c8>)
 8002d2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d32:	e9cd 2300 	strd	r2, r3, [sp]
 8002d36:	4622      	mov	r2, r4
 8002d38:	462b      	mov	r3, r5
 8002d3a:	4825      	ldr	r0, [pc, #148]	; (8002dd0 <MPU6050_Read_All+0x1d8>)
 8002d3c:	f000 f84c 	bl	8002dd8 <Kalman_getAngle>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	f7fd fe96 	bl	8000a78 <__aeabi_d2f>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	629a      	str	r2, [r3, #40]	; 0x28
	    DataStruct->KalmanAngleZ = Kalman_getAngle(&KalmanZ, (float)DataStruct->Accel_Z_RAW ,(float)DataStruct->Accel_Z_RAW/4200, 0.01);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fd ff97 	bl	8000c8c <__aeabi_i2f>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fd fb59 	bl	8000418 <__aeabi_f2d>
 8002d66:	4604      	mov	r4, r0
 8002d68:	460d      	mov	r5, r1
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd ff8b 	bl	8000c8c <__aeabi_i2f>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4913      	ldr	r1, [pc, #76]	; (8002dc8 <MPU6050_Read_All+0x1d0>)
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe f88e 	bl	8000e9c <__aeabi_fdiv>
 8002d80:	4603      	mov	r3, r0
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd fb48 	bl	8000418 <__aeabi_f2d>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	a10c      	add	r1, pc, #48	; (adr r1, 8002dc0 <MPU6050_Read_All+0x1c8>)
 8002d8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d96:	e9cd 2300 	strd	r2, r3, [sp]
 8002d9a:	4622      	mov	r2, r4
 8002d9c:	462b      	mov	r3, r5
 8002d9e:	480d      	ldr	r0, [pc, #52]	; (8002dd4 <MPU6050_Read_All+0x1dc>)
 8002da0:	f000 f81a 	bl	8002dd8 <Kalman_getAngle>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4610      	mov	r0, r2
 8002daa:	4619      	mov	r1, r3
 8002dac:	f7fd fe64 	bl	8000a78 <__aeabi_d2f>
 8002db0:	4602      	mov	r2, r0
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002db6:	bf00      	nop
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	47ae147b 	.word	0x47ae147b
 8002dc4:	3f847ae1 	.word	0x3f847ae1
 8002dc8:	45834000 	.word	0x45834000
 8002dcc:	20000028 	.word	0x20000028
 8002dd0:	20000070 	.word	0x20000070
 8002dd4:	200000b8 	.word	0x200000b8

08002dd8 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8002dd8:	b5b0      	push	{r4, r5, r7, lr}
 8002dda:	b092      	sub	sp, #72	; 0x48
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;//B1:Tìm góc ước tính
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002dea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002dee:	f7fd f9b3 	bl	8000158 <__aeabi_dsub>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;//Tìm tỷ lệ góc lệch với thời gian
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002e00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e04:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002e08:	f7fd fb5e 	bl	80004c8 <__aeabi_dmul>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4620      	mov	r0, r4
 8002e12:	4629      	mov	r1, r5
 8002e14:	f7fd f9a2 	bl	800015c <__adddf3>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	68f9      	ldr	r1, [r7, #12]
 8002e1e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    //B2 :Tìm lỗi dự đoán P bằng matrận 2x2:
    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle); //
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002e2e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002e32:	f7fd fb49 	bl	80004c8 <__aeabi_dmul>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002e44:	f7fd f988 	bl	8000158 <__aeabi_dsub>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4619      	mov	r1, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002e56:	f7fd f97f 	bl	8000158 <__aeabi_dsub>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e68:	f7fd f978 	bl	800015c <__adddf3>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002e78:	f7fd fb26 	bl	80004c8 <__aeabi_dmul>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4620      	mov	r0, r4
 8002e82:	4629      	mov	r1, r5
 8002e84:	f7fd f96a 	bl	800015c <__adddf3>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	68f9      	ldr	r1, [r7, #12]
 8002e8e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002e9e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002ea2:	f7fd fb11 	bl	80004c8 <__aeabi_dmul>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4620      	mov	r0, r4
 8002eac:	4629      	mov	r1, r5
 8002eae:	f7fd f953 	bl	8000158 <__aeabi_dsub>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	68f9      	ldr	r1, [r7, #12]
 8002eb8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002ec8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002ecc:	f7fd fafc 	bl	80004c8 <__aeabi_dmul>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	4629      	mov	r1, r5
 8002ed8:	f7fd f93e 	bl	8000158 <__aeabi_dsub>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	68f9      	ldr	r1, [r7, #12]
 8002ee2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002ef2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002ef6:	f7fd fae7 	bl	80004c8 <__aeabi_dmul>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4620      	mov	r0, r4
 8002f00:	4629      	mov	r1, r5
 8002f02:	f7fd f92b 	bl	800015c <__adddf3>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	68f9      	ldr	r1, [r7, #12]
 8002f0c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    //B3:Tìm hệ số lỗi
    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f1c:	f7fd f91e 	bl	800015c <__adddf3>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002f2e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f32:	f7fd fbf3 	bl	800071c <__aeabi_ddiv>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002f44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f48:	f7fd fbe8 	bl	800071c <__aeabi_ddiv>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	e9c7 2306 	strd	r2, r3, [r7, #24]
    //B4:Tìm sự biến đổi giá trị cũ và mới
    double y = newAngle - Kalman->angle;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f5e:	f7fd f8fb 	bl	8000158 <__aeabi_dsub>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002f70:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f78:	f7fd faa6 	bl	80004c8 <__aeabi_dmul>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4620      	mov	r0, r4
 8002f82:	4629      	mov	r1, r5
 8002f84:	f7fd f8ea 	bl	800015c <__adddf3>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	68f9      	ldr	r1, [r7, #12]
 8002f8e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002f98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002fa0:	f7fd fa92 	bl	80004c8 <__aeabi_dmul>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4620      	mov	r0, r4
 8002faa:	4629      	mov	r1, r5
 8002fac:	f7fd f8d6 	bl	800015c <__adddf3>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	68f9      	ldr	r1, [r7, #12]
 8002fb6:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002fc0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002fca:	e9c7 2308 	strd	r2, r3, [r7, #32]
    //B5: Cập nhật lỗi cho lần sau
    Kalman->P[0][0] -= K[0] * P00_temp;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002fd4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fdc:	f7fd fa74 	bl	80004c8 <__aeabi_dmul>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	4629      	mov	r1, r5
 8002fe8:	f7fd f8b6 	bl	8000158 <__aeabi_dsub>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	68f9      	ldr	r1, [r7, #12]
 8002ff2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002ffc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003000:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003004:	f7fd fa60 	bl	80004c8 <__aeabi_dmul>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4620      	mov	r0, r4
 800300e:	4629      	mov	r1, r5
 8003010:	f7fd f8a2 	bl	8000158 <__aeabi_dsub>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	68f9      	ldr	r1, [r7, #12]
 800301a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003024:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003028:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800302c:	f7fd fa4c 	bl	80004c8 <__aeabi_dmul>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4620      	mov	r0, r4
 8003036:	4629      	mov	r1, r5
 8003038:	f7fd f88e 	bl	8000158 <__aeabi_dsub>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	68f9      	ldr	r1, [r7, #12]
 8003042:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800304c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003050:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003054:	f7fd fa38 	bl	80004c8 <__aeabi_dmul>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4620      	mov	r0, r4
 800305e:	4629      	mov	r1, r5
 8003060:	f7fd f87a 	bl	8000158 <__aeabi_dsub>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	68f9      	ldr	r1, [r7, #12]
 800306a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    //B6: Xuất output
    return Kalman->angle;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 8003074:	4610      	mov	r0, r2
 8003076:	4619      	mov	r1, r3
 8003078:	3748      	adds	r7, #72	; 0x48
 800307a:	46bd      	mov	sp, r7
 800307c:	bdb0      	pop	{r4, r5, r7, pc}

0800307e <mbal_NRF24L01_Init>:
//void mbal_NRF24L01_SetChannel( NRF24L01_config_TypeDef*, uint8_t );
//void mbal_NRF24L01_SetRF( NRF24L01_config_TypeDef*, TM_NRF24L01_DataRate_t, TM_NRF24L01_OutputPower_t );
//void mbal_NRF24L01_Clear_Interrupts( NRF24L01_config_TypeDef* );


uint8_t mbal_NRF24L01_Init( NRF24L01_config_TypeDef *nrf_config ) {
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
	/* CSN high = disable SPI */
	mbal_NRF24L01_CSN_HIGH( nrf_config );
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f89f 	bl	80031ca <mbal_NRF24L01_CSN_HIGH>

	/* CE low = disable TX/RX */
	mbal_NRF24L01_CE_LOW( nrf_config );
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f86c 	bl	800316a <mbal_NRF24L01_CE_LOW>

	/* Max payload is 32bytes */
	if( nrf_config->payload_len > 32 ) {
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003098:	2b20      	cmp	r3, #32
 800309a:	d903      	bls.n	80030a4 <mbal_NRF24L01_Init+0x26>
		nrf_config->payload_len = 32;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 2020 	strb.w	r2, [r3, #32]
	}

	/* Reset nRF24L01+ to power on registers values */
	mbal_NRF24L01_SoftwareReset( nrf_config );
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f968 	bl	800337a <mbal_NRF24L01_SoftwareReset>

	/* Channel select */
	mbal_NRF24L01_SetChannel( nrf_config );
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fa13 	bl	80034d6 <mbal_NRF24L01_SetChannel>

	/* Set pipeline to max possible 32 bytes */
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P0, nrf_config->payload_len ); // Auto-ACK pipe
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030b6:	461a      	mov	r2, r3
 80030b8:	2111      	movs	r1, #17
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f8c5 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P1, nrf_config->payload_len ); // Data payload pipe
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030c6:	461a      	mov	r2, r3
 80030c8:	2112      	movs	r1, #18
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f8bd 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P2, nrf_config->payload_len );
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d6:	461a      	mov	r2, r3
 80030d8:	2113      	movs	r1, #19
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f8b5 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P3, nrf_config->payload_len );
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030e6:	461a      	mov	r2, r3
 80030e8:	2114      	movs	r1, #20
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f8ad 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P4, nrf_config->payload_len );
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f6:	461a      	mov	r2, r3
 80030f8:	2115      	movs	r1, #21
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f8a5 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P5, nrf_config->payload_len );
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003106:	461a      	mov	r2, r3
 8003108:	2116      	movs	r1, #22
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f89d 	bl	800324a <mbal_NRF24L01_WriteRegister>

	/* Set RF settings (2mbps, output power) */
	mbal_NRF24L01_SetRF( nrf_config );
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f9f3 	bl	80034fc <mbal_NRF24L01_SetRF>

	/* Config register */
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_CONFIG, NRF24L01_CONFIG );
 8003116:	2278      	movs	r2, #120	; 0x78
 8003118:	2100      	movs	r1, #0
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f895 	bl	800324a <mbal_NRF24L01_WriteRegister>

	/* Enable auto-acknowledgment for all pipes */
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_EN_AA, 0x00 ); //0x3F
 8003120:	2200      	movs	r2, #0
 8003122:	2101      	movs	r1, #1
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f890 	bl	800324a <mbal_NRF24L01_WriteRegister>

	/* Enable RX addresses */
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_EN_RXADDR, 0x3F );
 800312a:	223f      	movs	r2, #63	; 0x3f
 800312c:	2102      	movs	r1, #2
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f88b 	bl	800324a <mbal_NRF24L01_WriteRegister>

	/* Auto retransmit delay: 1000 (4x250) us and Up to 15 retransmit trials */
	//mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_SETUP_RETR, 0x4F );
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_SETUP_RETR, 0x40 ); //retransmit disabled
 8003134:	2240      	movs	r2, #64	; 0x40
 8003136:	2104      	movs	r1, #4
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f886 	bl	800324a <mbal_NRF24L01_WriteRegister>

	/* Dynamic length configurations: No dynamic length */
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_DYNPD, (0 << NRF24L01_DPL_P0) | (0 << NRF24L01_DPL_P1) | (0 << NRF24L01_DPL_P2) | (0 << NRF24L01_DPL_P3) | (0 << NRF24L01_DPL_P4) | (0 << NRF24L01_DPL_P5));
 800313e:	2200      	movs	r2, #0
 8003140:	211c      	movs	r1, #28
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f881 	bl	800324a <mbal_NRF24L01_WriteRegister>

	/* Clear FIFOs */
	mbal_NRF24L01_FLUSH_TX( nrf_config );
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f84e 	bl	80031ea <mbal_NRF24L01_FLUSH_TX>
	mbal_NRF24L01_FLUSH_RX( nrf_config );
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f863 	bl	800321a <mbal_NRF24L01_FLUSH_RX>

	/* Clear interrupts */
	mbal_NRF24L01_Clear_Interrupts( nrf_config );
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fa0f 	bl	8003578 <mbal_NRF24L01_Clear_Interrupts>

	/* Go to RX mode */
	mbal_NRF24L01_PowerUpRx( nrf_config );
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f8ca 	bl	80032f4 <mbal_NRF24L01_PowerUpRx>

	/* Return OK */
	return 1;
 8003160:	2301      	movs	r3, #1
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <mbal_NRF24L01_CE_LOW>:
//#define NRF24L01_CE_LOW				TM_GPIO_SetPinLow(NRF24L01_CE_PORT, NRF24L01_CE_PIN)
//#define NRF24L01_CE_HIGH			TM_GPIO_SetPinHigh(NRF24L01_CE_PORT, NRF24L01_CE_PIN)
//#define NRF24L01_CSN_LOW			TM_GPIO_SetPinLow(NRF24L01_CSN_PORT, NRF24L01_CSN_PIN)
//#define NRF24L01_CSN_HIGH			TM_GPIO_SetPinHigh(NRF24L01_CSN_PORT, NRF24L01_CSN_PIN)

void mbal_NRF24L01_CE_LOW( NRF24L01_config_TypeDef *nrf_config ) {
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin( nrf_config->CE_port, nrf_config->CE_pin, GPIO_PIN_RESET );
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6858      	ldr	r0, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	2200      	movs	r2, #0
 800317c:	4619      	mov	r1, r3
 800317e:	f000 febc 	bl	8003efa <HAL_GPIO_WritePin>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <mbal_NRF24L01_CE_HIGH>:

void mbal_NRF24L01_CE_HIGH( NRF24L01_config_TypeDef *nrf_config ) {
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin( nrf_config->CE_port, nrf_config->CE_pin, GPIO_PIN_SET );
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6858      	ldr	r0, [r3, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	2201      	movs	r2, #1
 800319c:	4619      	mov	r1, r3
 800319e:	f000 feac 	bl	8003efa <HAL_GPIO_WritePin>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <mbal_NRF24L01_CSN_LOW>:

void mbal_NRF24L01_CSN_LOW( NRF24L01_config_TypeDef *nrf_config ) {
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin( nrf_config->CSN_port, nrf_config->CSN_pin, GPIO_PIN_RESET );
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68d8      	ldr	r0, [r3, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	891b      	ldrh	r3, [r3, #8]
 80031ba:	2200      	movs	r2, #0
 80031bc:	4619      	mov	r1, r3
 80031be:	f000 fe9c 	bl	8003efa <HAL_GPIO_WritePin>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <mbal_NRF24L01_CSN_HIGH>:

void mbal_NRF24L01_CSN_HIGH( NRF24L01_config_TypeDef *nrf_config ) {
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin( nrf_config->CSN_port, nrf_config->CSN_pin, GPIO_PIN_SET );
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68d8      	ldr	r0, [r3, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	891b      	ldrh	r3, [r3, #8]
 80031da:	2201      	movs	r2, #1
 80031dc:	4619      	mov	r1, r3
 80031de:	f000 fe8c 	bl	8003efa <HAL_GPIO_WritePin>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <mbal_NRF24L01_FLUSH_TX>:

/* Flush FIFOs */
//#define NRF24L01_FLUSH_TX					do { NRF24L01_CSN_LOW; TM_SPI_Send(NRF24L01_SPI, NRF24L01_FLUSH_TX_MASK); NRF24L01_CSN_HIGH; } while (0)
//#define NRF24L01_FLUSH_RX					do { NRF24L01_CSN_LOW; TM_SPI_Send(NRF24L01_SPI, NRF24L01_FLUSH_RX_MASK); NRF24L01_CSN_HIGH; } while (0)

void mbal_NRF24L01_FLUSH_TX( NRF24L01_config_TypeDef *nrf_config ) {
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
	do {
		mbal_NRF24L01_CSN_LOW( nrf_config );
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff ffd9 	bl	80031aa <mbal_NRF24L01_CSN_LOW>
		unsigned char cData = NRF24L01_FLUSH_TX_MASK;
 80031f8:	23e1      	movs	r3, #225	; 0xe1
 80031fa:	73fb      	strb	r3, [r7, #15]
		HAL_SPI_Transmit( nrf_config->SPI, &cData, 1, 100 );
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6918      	ldr	r0, [r3, #16]
 8003200:	f107 010f 	add.w	r1, r7, #15
 8003204:	2364      	movs	r3, #100	; 0x64
 8003206:	2201      	movs	r2, #1
 8003208:	f002 fb32 	bl	8005870 <HAL_SPI_Transmit>
		mbal_NRF24L01_CSN_HIGH( nrf_config );
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff ffdc 	bl	80031ca <mbal_NRF24L01_CSN_HIGH>
	} while( 0 );
}
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <mbal_NRF24L01_FLUSH_RX>:

void mbal_NRF24L01_FLUSH_RX( NRF24L01_config_TypeDef *nrf_config ) {
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
	do {
		mbal_NRF24L01_CSN_LOW( nrf_config );
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ffc1 	bl	80031aa <mbal_NRF24L01_CSN_LOW>
		unsigned char cData = NRF24L01_FLUSH_RX_MASK;
 8003228:	23e2      	movs	r3, #226	; 0xe2
 800322a:	73fb      	strb	r3, [r7, #15]
		HAL_SPI_Transmit( nrf_config->SPI, &cData, 1, 100 );
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6918      	ldr	r0, [r3, #16]
 8003230:	f107 010f 	add.w	r1, r7, #15
 8003234:	2364      	movs	r3, #100	; 0x64
 8003236:	2201      	movs	r2, #1
 8003238:	f002 fb1a 	bl	8005870 <HAL_SPI_Transmit>
		mbal_NRF24L01_CSN_HIGH( nrf_config );
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff ffc4 	bl	80031ca <mbal_NRF24L01_CSN_HIGH>
	} while( 0 );
}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <mbal_NRF24L01_WriteRegister>:
	//TM_SPI_ReadMulti( nrf_config, data, NRF24L01_NOP_MASK, count );
	HAL_SPI_TransmitReceive( nrf_config->SPI, txData, rxData, count, 100 );
	mbal_NRF24L01_CSN_HIGH( nrf_config );
}

void mbal_NRF24L01_WriteRegister( NRF24L01_config_TypeDef *nrf_config, uint8_t reg, uint8_t value ) {
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	460b      	mov	r3, r1
 8003254:	70fb      	strb	r3, [r7, #3]
 8003256:	4613      	mov	r3, r2
 8003258:	70bb      	strb	r3, [r7, #2]
	unsigned char cData;

	mbal_NRF24L01_CSN_LOW( nrf_config );
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff ffa5 	bl	80031aa <mbal_NRF24L01_CSN_LOW>
	//TM_SPI_Send(NRF24L01_SPI, NRF24L01_WRITE_REGISTER_MASK(reg));
	cData = NRF24L01_WRITE_REGISTER_MASK( reg );
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f043 0320 	orr.w	r3, r3, #32
 800326c:	b2db      	uxtb	r3, r3
 800326e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit( nrf_config->SPI, &cData, 1, 100 );
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6918      	ldr	r0, [r3, #16]
 8003274:	f107 010f 	add.w	r1, r7, #15
 8003278:	2364      	movs	r3, #100	; 0x64
 800327a:	2201      	movs	r2, #1
 800327c:	f002 faf8 	bl	8005870 <HAL_SPI_Transmit>
	//TM_SPI_Send(NRF24L01_SPI, value);
	HAL_SPI_Transmit( nrf_config->SPI, &value, 1, 100 );
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6918      	ldr	r0, [r3, #16]
 8003284:	1cb9      	adds	r1, r7, #2
 8003286:	2364      	movs	r3, #100	; 0x64
 8003288:	2201      	movs	r2, #1
 800328a:	f002 faf1 	bl	8005870 <HAL_SPI_Transmit>
	mbal_NRF24L01_CSN_HIGH( nrf_config );
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ff9b 	bl	80031ca <mbal_NRF24L01_CSN_HIGH>
}
 8003294:	bf00      	nop
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <mbal_NRF24L01_WriteRegisterMulti>:

void mbal_NRF24L01_WriteRegisterMulti( NRF24L01_config_TypeDef *nrf_config, uint8_t reg, uint8_t *data, uint8_t count ) {
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	461a      	mov	r2, r3
 80032a8:	460b      	mov	r3, r1
 80032aa:	72fb      	strb	r3, [r7, #11]
 80032ac:	4613      	mov	r3, r2
 80032ae:	72bb      	strb	r3, [r7, #10]
	unsigned char cData;

	mbal_NRF24L01_CSN_LOW( nrf_config );
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f7ff ff7a 	bl	80031aa <mbal_NRF24L01_CSN_LOW>
	//TM_SPI_Send(NRF24L01_SPI, NRF24L01_WRITE_REGISTER_MASK( reg ));
	cData = NRF24L01_WRITE_REGISTER_MASK( reg );
 80032b6:	7afb      	ldrb	r3, [r7, #11]
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	f043 0320 	orr.w	r3, r3, #32
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit( nrf_config->SPI, &cData, 1, 100 );
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6918      	ldr	r0, [r3, #16]
 80032ca:	f107 0117 	add.w	r1, r7, #23
 80032ce:	2364      	movs	r3, #100	; 0x64
 80032d0:	2201      	movs	r2, #1
 80032d2:	f002 facd 	bl	8005870 <HAL_SPI_Transmit>
	//TM_SPI_WriteMulti(NRF24L01_SPI, data, count);
	HAL_SPI_Transmit( nrf_config->SPI, data, count, 100 );
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6918      	ldr	r0, [r3, #16]
 80032da:	7abb      	ldrb	r3, [r7, #10]
 80032dc:	b29a      	uxth	r2, r3
 80032de:	2364      	movs	r3, #100	; 0x64
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	f002 fac5 	bl	8005870 <HAL_SPI_Transmit>
	mbal_NRF24L01_CSN_HIGH( nrf_config );
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f7ff ff6f 	bl	80031ca <mbal_NRF24L01_CSN_HIGH>
}
 80032ec:	bf00      	nop
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <mbal_NRF24L01_PowerUpRx>:
void mbal_NRF24L01_PowerUpTx( NRF24L01_config_TypeDef *nrf_config ) {
	mbal_NRF24L01_Clear_Interrupts( nrf_config );
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_CONFIG, NRF24L01_CONFIG | (0 << NRF24L01_PRIM_RX) | (1 << NRF24L01_PWR_UP));
}

void mbal_NRF24L01_PowerUpRx( NRF24L01_config_TypeDef *nrf_config ) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
	/* Disable RX/TX mode */
	mbal_NRF24L01_CE_LOW( nrf_config );
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff ff34 	bl	800316a <mbal_NRF24L01_CE_LOW>
	/* Clear RX buffer */
	mbal_NRF24L01_FLUSH_RX( nrf_config );
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff ff89 	bl	800321a <mbal_NRF24L01_FLUSH_RX>
	/* Clear interrupts */
	mbal_NRF24L01_Clear_Interrupts( nrf_config );
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f935 	bl	8003578 <mbal_NRF24L01_Clear_Interrupts>
	/* Setup RX mode */
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_CONFIG, NRF24L01_CONFIG | 1 << NRF24L01_PWR_UP | 1 << NRF24L01_PRIM_RX);
 800330e:	227b      	movs	r2, #123	; 0x7b
 8003310:	2100      	movs	r1, #0
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff ff99 	bl	800324a <mbal_NRF24L01_WriteRegister>
	/* Start listening */
	mbal_NRF24L01_CE_HIGH( nrf_config );
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ff36 	bl	800318a <mbal_NRF24L01_CE_HIGH>
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <mbal_NRF24L01_GetData>:

	/* Send data! */
	mbal_NRF24L01_CE_HIGH( nrf_config );
}

void mbal_NRF24L01_GetData( NRF24L01_config_TypeDef *nrf_config, uint8_t* data ) {
 8003326:	b580      	push	{r7, lr}
 8003328:	b086      	sub	sp, #24
 800332a:	af02      	add	r7, sp, #8
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	6039      	str	r1, [r7, #0]
	unsigned char cData;

	/* Pull down chip select */
	mbal_NRF24L01_CSN_LOW( nrf_config );
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7ff ff3a 	bl	80031aa <mbal_NRF24L01_CSN_LOW>
	/* Send read payload command*/
	//TM_SPI_Send(NRF24L01_SPI, NRF24L01_R_RX_PAYLOAD_MASK);
	cData = NRF24L01_R_RX_PAYLOAD_MASK;
 8003336:	2361      	movs	r3, #97	; 0x61
 8003338:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit( nrf_config->SPI, &cData, 1, 100 );
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6918      	ldr	r0, [r3, #16]
 800333e:	f107 010f 	add.w	r1, r7, #15
 8003342:	2364      	movs	r3, #100	; 0x64
 8003344:	2201      	movs	r2, #1
 8003346:	f002 fa93 	bl	8005870 <HAL_SPI_Transmit>
	/* Read payload */
	//TM_SPI_SendMulti(NRF24L01_SPI, data, data, TM_NRF24L01_Struct.PayloadSize);
	HAL_SPI_TransmitReceive( nrf_config->SPI, data, data, nrf_config->payload_len, 100 );
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6918      	ldr	r0, [r3, #16]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003354:	b29b      	uxth	r3, r3
 8003356:	2264      	movs	r2, #100	; 0x64
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	6839      	ldr	r1, [r7, #0]
 800335e:	f002 fbc3 	bl	8005ae8 <HAL_SPI_TransmitReceive>
	/* Pull up chip select */
	mbal_NRF24L01_CE_HIGH( nrf_config );
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff ff11 	bl	800318a <mbal_NRF24L01_CE_HIGH>

	/* Reset status register, clear RX_DR interrupt flag */
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_STATUS, (1 << NRF24L01_RX_DR));
 8003368:	2240      	movs	r2, #64	; 0x40
 800336a:	2107      	movs	r1, #7
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff ff6c 	bl	800324a <mbal_NRF24L01_WriteRegister>
}
 8003372:	bf00      	nop
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <mbal_NRF24L01_SoftwareReset>:

	/* Still sending */
	return TM_NRF24L01_Transmit_Status_Sending;
}

void mbal_NRF24L01_SoftwareReset( NRF24L01_config_TypeDef *nrf_config ) {
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
	uint8_t data[5];

	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_CONFIG, 	 NRF24L01_REG_DEFAULT_VAL_CONFIG );
 8003382:	2208      	movs	r2, #8
 8003384:	2100      	movs	r1, #0
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff ff5f 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_EN_AA,		 NRF24L01_REG_DEFAULT_VAL_EN_AA );
 800338c:	223f      	movs	r2, #63	; 0x3f
 800338e:	2101      	movs	r1, #1
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ff5a 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_EN_RXADDR,  NRF24L01_REG_DEFAULT_VAL_EN_RXADDR );
 8003396:	2203      	movs	r2, #3
 8003398:	2102      	movs	r1, #2
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff ff55 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_SETUP_AW, 	 NRF24L01_REG_DEFAULT_VAL_SETUP_AW );
 80033a0:	2203      	movs	r2, #3
 80033a2:	2103      	movs	r1, #3
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ff50 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_SETUP_RETR, NRF24L01_REG_DEFAULT_VAL_SETUP_RETR );
 80033aa:	2203      	movs	r2, #3
 80033ac:	2104      	movs	r1, #4
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff ff4b 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RF_CH, 	 NRF24L01_REG_DEFAULT_VAL_RF_CH );
 80033b4:	2202      	movs	r2, #2
 80033b6:	2105      	movs	r1, #5
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff ff46 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RF_SETUP, 	 NRF24L01_REG_DEFAULT_VAL_RF_SETUP );
 80033be:	220e      	movs	r2, #14
 80033c0:	2106      	movs	r1, #6
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ff41 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_STATUS, 	 NRF24L01_REG_DEFAULT_VAL_STATUS );
 80033c8:	220e      	movs	r2, #14
 80033ca:	2107      	movs	r1, #7
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff ff3c 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_OBSERVE_TX, NRF24L01_REG_DEFAULT_VAL_OBSERVE_TX );
 80033d2:	2200      	movs	r2, #0
 80033d4:	2108      	movs	r1, #8
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff ff37 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RPD, 		 NRF24L01_REG_DEFAULT_VAL_RPD );
 80033dc:	2200      	movs	r2, #0
 80033de:	2109      	movs	r1, #9
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff ff32 	bl	800324a <mbal_NRF24L01_WriteRegister>

	//P0
	data[0] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_0;
 80033e6:	23e7      	movs	r3, #231	; 0xe7
 80033e8:	723b      	strb	r3, [r7, #8]
	data[1] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_1;
 80033ea:	23e7      	movs	r3, #231	; 0xe7
 80033ec:	727b      	strb	r3, [r7, #9]
	data[2] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_2;
 80033ee:	23e7      	movs	r3, #231	; 0xe7
 80033f0:	72bb      	strb	r3, [r7, #10]
	data[3] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_3;
 80033f2:	23e7      	movs	r3, #231	; 0xe7
 80033f4:	72fb      	strb	r3, [r7, #11]
	data[4] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_4;
 80033f6:	23e7      	movs	r3, #231	; 0xe7
 80033f8:	733b      	strb	r3, [r7, #12]
	mbal_NRF24L01_WriteRegisterMulti( nrf_config, NRF24L01_REG_RX_ADDR_P0, data, 5 );
 80033fa:	f107 0208 	add.w	r2, r7, #8
 80033fe:	2305      	movs	r3, #5
 8003400:	210a      	movs	r1, #10
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff ff4a 	bl	800329c <mbal_NRF24L01_WriteRegisterMulti>

	//P1
	data[0] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_0;
 8003408:	23c2      	movs	r3, #194	; 0xc2
 800340a:	723b      	strb	r3, [r7, #8]
	data[1] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_1;
 800340c:	23c2      	movs	r3, #194	; 0xc2
 800340e:	727b      	strb	r3, [r7, #9]
	data[2] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_2;
 8003410:	23c2      	movs	r3, #194	; 0xc2
 8003412:	72bb      	strb	r3, [r7, #10]
	data[3] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_3;
 8003414:	23c2      	movs	r3, #194	; 0xc2
 8003416:	72fb      	strb	r3, [r7, #11]
	data[4] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_4;
 8003418:	23c2      	movs	r3, #194	; 0xc2
 800341a:	733b      	strb	r3, [r7, #12]
	mbal_NRF24L01_WriteRegisterMulti( nrf_config, NRF24L01_REG_RX_ADDR_P1, data, 5 );
 800341c:	f107 0208 	add.w	r2, r7, #8
 8003420:	2305      	movs	r3, #5
 8003422:	210b      	movs	r1, #11
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff ff39 	bl	800329c <mbal_NRF24L01_WriteRegisterMulti>

	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_ADDR_P2, NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P2 );
 800342a:	22c3      	movs	r2, #195	; 0xc3
 800342c:	210c      	movs	r1, #12
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff ff0b 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_ADDR_P3, NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P3 );
 8003434:	22c4      	movs	r2, #196	; 0xc4
 8003436:	210d      	movs	r1, #13
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff ff06 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_ADDR_P4, NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P4 );
 800343e:	22c5      	movs	r2, #197	; 0xc5
 8003440:	210e      	movs	r1, #14
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ff01 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_ADDR_P5, NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P5 );
 8003448:	22c6      	movs	r2, #198	; 0xc6
 800344a:	210f      	movs	r1, #15
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff fefc 	bl	800324a <mbal_NRF24L01_WriteRegister>

	//TX
	data[0] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_0;
 8003452:	23e7      	movs	r3, #231	; 0xe7
 8003454:	723b      	strb	r3, [r7, #8]
	data[1] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_1;
 8003456:	23e7      	movs	r3, #231	; 0xe7
 8003458:	727b      	strb	r3, [r7, #9]
	data[2] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_2;
 800345a:	23e7      	movs	r3, #231	; 0xe7
 800345c:	72bb      	strb	r3, [r7, #10]
	data[3] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_3;
 800345e:	23e7      	movs	r3, #231	; 0xe7
 8003460:	72fb      	strb	r3, [r7, #11]
	data[4] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_4;
 8003462:	23e7      	movs	r3, #231	; 0xe7
 8003464:	733b      	strb	r3, [r7, #12]
	mbal_NRF24L01_WriteRegisterMulti( nrf_config, NRF24L01_REG_TX_ADDR, data, 5 );
 8003466:	f107 0208 	add.w	r2, r7, #8
 800346a:	2305      	movs	r3, #5
 800346c:	2110      	movs	r1, #16
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff ff14 	bl	800329c <mbal_NRF24L01_WriteRegisterMulti>

	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P0, 	  NRF24L01_REG_DEFAULT_VAL_RX_PW_P0 );
 8003474:	2200      	movs	r2, #0
 8003476:	2111      	movs	r1, #17
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff fee6 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P1, 	  NRF24L01_REG_DEFAULT_VAL_RX_PW_P1 );
 800347e:	2200      	movs	r2, #0
 8003480:	2112      	movs	r1, #18
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff fee1 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P2, 	  NRF24L01_REG_DEFAULT_VAL_RX_PW_P2 );
 8003488:	2200      	movs	r2, #0
 800348a:	2113      	movs	r1, #19
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff fedc 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P3, 	  NRF24L01_REG_DEFAULT_VAL_RX_PW_P3 );
 8003492:	2200      	movs	r2, #0
 8003494:	2114      	movs	r1, #20
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff fed7 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P4, 	  NRF24L01_REG_DEFAULT_VAL_RX_PW_P4 );
 800349c:	2200      	movs	r2, #0
 800349e:	2115      	movs	r1, #21
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff fed2 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P5, 	  NRF24L01_REG_DEFAULT_VAL_RX_PW_P5 );
 80034a6:	2200      	movs	r2, #0
 80034a8:	2116      	movs	r1, #22
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff fecd 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_FIFO_STATUS, NRF24L01_REG_DEFAULT_VAL_FIFO_STATUS );
 80034b0:	2211      	movs	r2, #17
 80034b2:	2117      	movs	r1, #23
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff fec8 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_DYNPD, 	  NRF24L01_REG_DEFAULT_VAL_DYNPD );
 80034ba:	2200      	movs	r2, #0
 80034bc:	211c      	movs	r1, #28
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff fec3 	bl	800324a <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_FEATURE, 	  NRF24L01_REG_DEFAULT_VAL_FEATURE );
 80034c4:	2200      	movs	r2, #0
 80034c6:	211d      	movs	r1, #29
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff febe 	bl	800324a <mbal_NRF24L01_WriteRegister>
}
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <mbal_NRF24L01_SetChannel>:
uint8_t mbal_NRF24L01_GetRetransmissionsCount( NRF24L01_config_TypeDef *nrf_config ) {
	/* Low 4 bits */
	return mbal_NRF24L01_ReadRegister( nrf_config, NRF24L01_REG_OBSERVE_TX ) & 0x0F;
}

void mbal_NRF24L01_SetChannel( NRF24L01_config_TypeDef *nrf_config ) {
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
	if( nrf_config->radio_channel <= 125 ) {
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	7f9b      	ldrb	r3, [r3, #30]
 80034e2:	2b7d      	cmp	r3, #125	; 0x7d
 80034e4:	d806      	bhi.n	80034f4 <mbal_NRF24L01_SetChannel+0x1e>
		/* Write channel */
		mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RF_CH, nrf_config->radio_channel );
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	7f9b      	ldrb	r3, [r3, #30]
 80034ea:	461a      	mov	r2, r3
 80034ec:	2105      	movs	r1, #5
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff feab 	bl	800324a <mbal_NRF24L01_WriteRegister>
	}
}
 80034f4:	bf00      	nop
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <mbal_NRF24L01_SetRF>:

void mbal_NRF24L01_SetRF( NRF24L01_config_TypeDef *nrf_config ) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	73fb      	strb	r3, [r7, #15]

	if (nrf_config->baud_rate == TM_NRF24L01_DataRate_2M) {
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	7fdb      	ldrb	r3, [r3, #31]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <mbal_NRF24L01_SetRF+0x1e>
		tmp |= 1 << NRF24L01_RF_DR_HIGH;
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	f043 0308 	orr.w	r3, r3, #8
 8003516:	73fb      	strb	r3, [r7, #15]
 8003518:	e007      	b.n	800352a <mbal_NRF24L01_SetRF+0x2e>
	} else if (nrf_config->baud_rate == TM_NRF24L01_DataRate_250k) {
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	7fdb      	ldrb	r3, [r3, #31]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d103      	bne.n	800352a <mbal_NRF24L01_SetRF+0x2e>
		tmp |= 1 << NRF24L01_RF_DR_LOW;
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	f043 0320 	orr.w	r3, r3, #32
 8003528:	73fb      	strb	r3, [r7, #15]
	}
	/* If 1Mbps, all bits set to 0 */

	if (nrf_config->output_power == TM_NRF24L01_OutputPower_0dBm) {
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003530:	2b03      	cmp	r3, #3
 8003532:	d104      	bne.n	800353e <mbal_NRF24L01_SetRF+0x42>
		tmp |= 3 << NRF24L01_RF_PWR;
 8003534:	7bfb      	ldrb	r3, [r7, #15]
 8003536:	f043 0306 	orr.w	r3, r3, #6
 800353a:	73fb      	strb	r3, [r7, #15]
 800353c:	e012      	b.n	8003564 <mbal_NRF24L01_SetRF+0x68>
	} else if (nrf_config->output_power == TM_NRF24L01_OutputPower_M6dBm) {
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003544:	2b02      	cmp	r3, #2
 8003546:	d104      	bne.n	8003552 <mbal_NRF24L01_SetRF+0x56>
		tmp |= 2 << NRF24L01_RF_PWR;
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	f043 0304 	orr.w	r3, r3, #4
 800354e:	73fb      	strb	r3, [r7, #15]
 8003550:	e008      	b.n	8003564 <mbal_NRF24L01_SetRF+0x68>
	} else if (nrf_config->output_power == TM_NRF24L01_OutputPower_M12dBm) {
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003558:	2b01      	cmp	r3, #1
 800355a:	d103      	bne.n	8003564 <mbal_NRF24L01_SetRF+0x68>
		tmp |= 1 << NRF24L01_RF_PWR;
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	f043 0302 	orr.w	r3, r3, #2
 8003562:	73fb      	strb	r3, [r7, #15]
	}

	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RF_SETUP, tmp );
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	461a      	mov	r2, r3
 8003568:	2106      	movs	r1, #6
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff fe6d 	bl	800324a <mbal_NRF24L01_WriteRegister>
}
 8003570:	bf00      	nop
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <mbal_NRF24L01_Clear_Interrupts>:
//uint8_t TM_NRF24L01_Read_Interrupts(TM_NRF24L01_IRQ_t* IRQ) {
//	IRQ->Status = TM_NRF24L01_GetStatus();
//	return IRQ->Status;
//}

void mbal_NRF24L01_Clear_Interrupts( NRF24L01_config_TypeDef *nrf_config ) {
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_STATUS, 0x70 );
 8003580:	2270      	movs	r2, #112	; 0x70
 8003582:	2107      	movs	r1, #7
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff fe60 	bl	800324a <mbal_NRF24L01_WriteRegister>
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <HAL_MspInit+0x5c>)
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	4a14      	ldr	r2, [pc, #80]	; (80035f0 <HAL_MspInit+0x5c>)
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	6193      	str	r3, [r2, #24]
 80035a6:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_MspInit+0x5c>)
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035b2:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_MspInit+0x5c>)
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <HAL_MspInit+0x5c>)
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035bc:	61d3      	str	r3, [r2, #28]
 80035be:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <HAL_MspInit+0x5c>)
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	607b      	str	r3, [r7, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80035ca:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <HAL_MspInit+0x60>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <HAL_MspInit+0x60>)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035e6:	bf00      	nop
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40010000 	.word	0x40010000

080035f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003600:	f107 0310 	add.w	r3, r7, #16
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a16      	ldr	r2, [pc, #88]	; (800366c <HAL_I2C_MspInit+0x74>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d124      	bne.n	8003662 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003618:	4b15      	ldr	r3, [pc, #84]	; (8003670 <HAL_I2C_MspInit+0x78>)
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	4a14      	ldr	r2, [pc, #80]	; (8003670 <HAL_I2C_MspInit+0x78>)
 800361e:	f043 0308 	orr.w	r3, r3, #8
 8003622:	6193      	str	r3, [r2, #24]
 8003624:	4b12      	ldr	r3, [pc, #72]	; (8003670 <HAL_I2C_MspInit+0x78>)
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003630:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003634:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003636:	2312      	movs	r3, #18
 8003638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800363a:	2303      	movs	r3, #3
 800363c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800363e:	f107 0310 	add.w	r3, r7, #16
 8003642:	4619      	mov	r1, r3
 8003644:	480b      	ldr	r0, [pc, #44]	; (8003674 <HAL_I2C_MspInit+0x7c>)
 8003646:	f000 fabd 	bl	8003bc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800364a:	4b09      	ldr	r3, [pc, #36]	; (8003670 <HAL_I2C_MspInit+0x78>)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	4a08      	ldr	r2, [pc, #32]	; (8003670 <HAL_I2C_MspInit+0x78>)
 8003650:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003654:	61d3      	str	r3, [r2, #28]
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <HAL_I2C_MspInit+0x78>)
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003662:	bf00      	nop
 8003664:	3720      	adds	r7, #32
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40005800 	.word	0x40005800
 8003670:	40021000 	.word	0x40021000
 8003674:	40010c00 	.word	0x40010c00

08003678 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003680:	f107 0310 	add.w	r3, r7, #16
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	605a      	str	r2, [r3, #4]
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1b      	ldr	r2, [pc, #108]	; (8003700 <HAL_SPI_MspInit+0x88>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d12f      	bne.n	80036f8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003698:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <HAL_SPI_MspInit+0x8c>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	4a19      	ldr	r2, [pc, #100]	; (8003704 <HAL_SPI_MspInit+0x8c>)
 800369e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036a2:	6193      	str	r3, [r2, #24]
 80036a4:	4b17      	ldr	r3, [pc, #92]	; (8003704 <HAL_SPI_MspInit+0x8c>)
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b0:	4b14      	ldr	r3, [pc, #80]	; (8003704 <HAL_SPI_MspInit+0x8c>)
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	4a13      	ldr	r2, [pc, #76]	; (8003704 <HAL_SPI_MspInit+0x8c>)
 80036b6:	f043 0304 	orr.w	r3, r3, #4
 80036ba:	6193      	str	r3, [r2, #24]
 80036bc:	4b11      	ldr	r3, [pc, #68]	; (8003704 <HAL_SPI_MspInit+0x8c>)
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80036c8:	23a0      	movs	r3, #160	; 0xa0
 80036ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036cc:	2302      	movs	r3, #2
 80036ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036d0:	2303      	movs	r3, #3
 80036d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d4:	f107 0310 	add.w	r3, r7, #16
 80036d8:	4619      	mov	r1, r3
 80036da:	480b      	ldr	r0, [pc, #44]	; (8003708 <HAL_SPI_MspInit+0x90>)
 80036dc:	f000 fa72 	bl	8003bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80036e0:	2340      	movs	r3, #64	; 0x40
 80036e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ec:	f107 0310 	add.w	r3, r7, #16
 80036f0:	4619      	mov	r1, r3
 80036f2:	4805      	ldr	r0, [pc, #20]	; (8003708 <HAL_SPI_MspInit+0x90>)
 80036f4:	f000 fa66 	bl	8003bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80036f8:	bf00      	nop
 80036fa:	3720      	adds	r7, #32
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40013000 	.word	0x40013000
 8003704:	40021000 	.word	0x40021000
 8003708:	40010800 	.word	0x40010800

0800370c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a09      	ldr	r2, [pc, #36]	; (8003740 <HAL_TIM_PWM_MspInit+0x34>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d10b      	bne.n	8003736 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800371e:	4b09      	ldr	r3, [pc, #36]	; (8003744 <HAL_TIM_PWM_MspInit+0x38>)
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	4a08      	ldr	r2, [pc, #32]	; (8003744 <HAL_TIM_PWM_MspInit+0x38>)
 8003724:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003728:	6193      	str	r3, [r2, #24]
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_TIM_PWM_MspInit+0x38>)
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr
 8003740:	40012c00 	.word	0x40012c00
 8003744:	40021000 	.word	0x40021000

08003748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003758:	d10b      	bne.n	8003772 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800375a:	4b08      	ldr	r3, [pc, #32]	; (800377c <HAL_TIM_Base_MspInit+0x34>)
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	4a07      	ldr	r2, [pc, #28]	; (800377c <HAL_TIM_Base_MspInit+0x34>)
 8003760:	f043 0301 	orr.w	r3, r3, #1
 8003764:	61d3      	str	r3, [r2, #28]
 8003766:	4b05      	ldr	r3, [pc, #20]	; (800377c <HAL_TIM_Base_MspInit+0x34>)
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003772:	bf00      	nop
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr
 800377c:	40021000 	.word	0x40021000

08003780 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003788:	f107 0310 	add.w	r3, r7, #16
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a10      	ldr	r2, [pc, #64]	; (80037dc <HAL_TIM_MspPostInit+0x5c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d118      	bne.n	80037d2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <HAL_TIM_MspPostInit+0x60>)
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	4a0e      	ldr	r2, [pc, #56]	; (80037e0 <HAL_TIM_MspPostInit+0x60>)
 80037a6:	f043 0304 	orr.w	r3, r3, #4
 80037aa:	6193      	str	r3, [r2, #24]
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <HAL_TIM_MspPostInit+0x60>)
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80037b8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80037bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037be:	2302      	movs	r3, #2
 80037c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c2:	2302      	movs	r3, #2
 80037c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c6:	f107 0310 	add.w	r3, r7, #16
 80037ca:	4619      	mov	r1, r3
 80037cc:	4805      	ldr	r0, [pc, #20]	; (80037e4 <HAL_TIM_MspPostInit+0x64>)
 80037ce:	f000 f9f9 	bl	8003bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80037d2:	bf00      	nop
 80037d4:	3720      	adds	r7, #32
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40012c00 	.word	0x40012c00
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40010800 	.word	0x40010800

080037e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037ec:	e7fe      	b.n	80037ec <NMI_Handler+0x4>

080037ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037ee:	b480      	push	{r7}
 80037f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037f2:	e7fe      	b.n	80037f2 <HardFault_Handler+0x4>

080037f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037f8:	e7fe      	b.n	80037f8 <MemManage_Handler+0x4>

080037fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037fa:	b480      	push	{r7}
 80037fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037fe:	e7fe      	b.n	80037fe <BusFault_Handler+0x4>

08003800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003804:	e7fe      	b.n	8003804 <UsageFault_Handler+0x4>

08003806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800380a:	bf00      	nop
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr

08003812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr

0800381e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800381e:	b480      	push	{r7}
 8003820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003822:	bf00      	nop
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr

0800382a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800382e:	f000 f87b 	bl	8003928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003832:	bf00      	nop
 8003834:	bd80      	pop	{r7, pc}

08003836 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800383a:	2002      	movs	r0, #2
 800383c:	f000 fb76 	bl	8003f2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003840:	bf00      	nop
 8003842:	bd80      	pop	{r7, pc}

08003844 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003850:	480c      	ldr	r0, [pc, #48]	; (8003884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003852:	490d      	ldr	r1, [pc, #52]	; (8003888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003854:	4a0d      	ldr	r2, [pc, #52]	; (800388c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003858:	e002      	b.n	8003860 <LoopCopyDataInit>

0800385a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800385a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800385c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800385e:	3304      	adds	r3, #4

08003860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003864:	d3f9      	bcc.n	800385a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003866:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003868:	4c0a      	ldr	r4, [pc, #40]	; (8003894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800386a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800386c:	e001      	b.n	8003872 <LoopFillZerobss>

0800386e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800386e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003870:	3204      	adds	r2, #4

08003872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003874:	d3fb      	bcc.n	800386e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003876:	f7ff ffe5 	bl	8003844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800387a:	f003 f9e5 	bl	8006c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800387e:	f7fe fc47 	bl	8002110 <main>
  bx lr
 8003882:	4770      	bx	lr
  ldr r0, =_sdata
 8003884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003888:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 800388c:	080084c0 	.word	0x080084c0
  ldr r2, =_sbss
 8003890:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8003894:	20000450 	.word	0x20000450

08003898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003898:	e7fe      	b.n	8003898 <ADC1_2_IRQHandler>
	...

0800389c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038a0:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <HAL_Init+0x28>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a07      	ldr	r2, [pc, #28]	; (80038c4 <HAL_Init+0x28>)
 80038a6:	f043 0310 	orr.w	r3, r3, #16
 80038aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038ac:	2003      	movs	r0, #3
 80038ae:	f000 f947 	bl	8003b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038b2:	200f      	movs	r0, #15
 80038b4:	f000 f808 	bl	80038c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038b8:	f7ff fe6c 	bl	8003594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40022000 	.word	0x40022000

080038c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038d0:	4b12      	ldr	r3, [pc, #72]	; (800391c <HAL_InitTick+0x54>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b12      	ldr	r3, [pc, #72]	; (8003920 <HAL_InitTick+0x58>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	4619      	mov	r1, r3
 80038da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038de:	fbb3 f3f1 	udiv	r3, r3, r1
 80038e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 f95f 	bl	8003baa <HAL_SYSTICK_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e00e      	b.n	8003914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b0f      	cmp	r3, #15
 80038fa:	d80a      	bhi.n	8003912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038fc:	2200      	movs	r2, #0
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	f04f 30ff 	mov.w	r0, #4294967295
 8003904:	f000 f927 	bl	8003b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003908:	4a06      	ldr	r2, [pc, #24]	; (8003924 <HAL_InitTick+0x5c>)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e000      	b.n	8003914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20000100 	.word	0x20000100
 8003920:	20000108 	.word	0x20000108
 8003924:	20000104 	.word	0x20000104

08003928 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <HAL_IncTick+0x1c>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_IncTick+0x20>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4413      	add	r3, r2
 8003938:	4a03      	ldr	r2, [pc, #12]	; (8003948 <HAL_IncTick+0x20>)
 800393a:	6013      	str	r3, [r2, #0]
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr
 8003944:	20000108 	.word	0x20000108
 8003948:	2000044c 	.word	0x2000044c

0800394c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return uwTick;
 8003950:	4b02      	ldr	r3, [pc, #8]	; (800395c <HAL_GetTick+0x10>)
 8003952:	681b      	ldr	r3, [r3, #0]
}
 8003954:	4618      	mov	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	2000044c 	.word	0x2000044c

08003960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003968:	f7ff fff0 	bl	800394c <HAL_GetTick>
 800396c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003978:	d005      	beq.n	8003986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800397a:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <HAL_Delay+0x44>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4413      	add	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003986:	bf00      	nop
 8003988:	f7ff ffe0 	bl	800394c <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	429a      	cmp	r2, r3
 8003996:	d8f7      	bhi.n	8003988 <HAL_Delay+0x28>
  {
  }
}
 8003998:	bf00      	nop
 800399a:	bf00      	nop
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000108 	.word	0x20000108

080039a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <__NVIC_SetPriorityGrouping+0x44>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039c4:	4013      	ands	r3, r2
 80039c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039da:	4a04      	ldr	r2, [pc, #16]	; (80039ec <__NVIC_SetPriorityGrouping+0x44>)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	60d3      	str	r3, [r2, #12]
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039f4:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <__NVIC_GetPriorityGrouping+0x18>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	0a1b      	lsrs	r3, r3, #8
 80039fa:	f003 0307 	and.w	r3, r3, #7
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	e000ed00 	.word	0xe000ed00

08003a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	db0b      	blt.n	8003a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	f003 021f 	and.w	r2, r3, #31
 8003a24:	4906      	ldr	r1, [pc, #24]	; (8003a40 <__NVIC_EnableIRQ+0x34>)
 8003a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr
 8003a40:	e000e100 	.word	0xe000e100

08003a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	6039      	str	r1, [r7, #0]
 8003a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	db0a      	blt.n	8003a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	490c      	ldr	r1, [pc, #48]	; (8003a90 <__NVIC_SetPriority+0x4c>)
 8003a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a62:	0112      	lsls	r2, r2, #4
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	440b      	add	r3, r1
 8003a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a6c:	e00a      	b.n	8003a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	4908      	ldr	r1, [pc, #32]	; (8003a94 <__NVIC_SetPriority+0x50>)
 8003a74:	79fb      	ldrb	r3, [r7, #7]
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	3b04      	subs	r3, #4
 8003a7c:	0112      	lsls	r2, r2, #4
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	440b      	add	r3, r1
 8003a82:	761a      	strb	r2, [r3, #24]
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bc80      	pop	{r7}
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	e000e100 	.word	0xe000e100
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b089      	sub	sp, #36	; 0x24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f1c3 0307 	rsb	r3, r3, #7
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	bf28      	it	cs
 8003ab6:	2304      	movcs	r3, #4
 8003ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	3304      	adds	r3, #4
 8003abe:	2b06      	cmp	r3, #6
 8003ac0:	d902      	bls.n	8003ac8 <NVIC_EncodePriority+0x30>
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	3b03      	subs	r3, #3
 8003ac6:	e000      	b.n	8003aca <NVIC_EncodePriority+0x32>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003acc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43da      	mvns	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	401a      	ands	r2, r3
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aea:	43d9      	mvns	r1, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af0:	4313      	orrs	r3, r2
         );
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3724      	adds	r7, #36	; 0x24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr

08003afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b0c:	d301      	bcc.n	8003b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e00f      	b.n	8003b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b12:	4a0a      	ldr	r2, [pc, #40]	; (8003b3c <SysTick_Config+0x40>)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b1a:	210f      	movs	r1, #15
 8003b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b20:	f7ff ff90 	bl	8003a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <SysTick_Config+0x40>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b2a:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <SysTick_Config+0x40>)
 8003b2c:	2207      	movs	r2, #7
 8003b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	e000e010 	.word	0xe000e010

08003b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff ff2d 	bl	80039a8 <__NVIC_SetPriorityGrouping>
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b086      	sub	sp, #24
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
 8003b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b68:	f7ff ff42 	bl	80039f0 <__NVIC_GetPriorityGrouping>
 8003b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	6978      	ldr	r0, [r7, #20]
 8003b74:	f7ff ff90 	bl	8003a98 <NVIC_EncodePriority>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b7e:	4611      	mov	r1, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff ff5f 	bl	8003a44 <__NVIC_SetPriority>
}
 8003b86:	bf00      	nop
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	4603      	mov	r3, r0
 8003b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff ff35 	bl	8003a0c <__NVIC_EnableIRQ>
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b082      	sub	sp, #8
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff ffa2 	bl	8003afc <SysTick_Config>
 8003bb8:	4603      	mov	r3, r0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b08b      	sub	sp, #44	; 0x2c
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bd6:	e169      	b.n	8003eac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003bd8:	2201      	movs	r2, #1
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	4013      	ands	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	f040 8158 	bne.w	8003ea6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	4a9a      	ldr	r2, [pc, #616]	; (8003e64 <HAL_GPIO_Init+0x2a0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d05e      	beq.n	8003cbe <HAL_GPIO_Init+0xfa>
 8003c00:	4a98      	ldr	r2, [pc, #608]	; (8003e64 <HAL_GPIO_Init+0x2a0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d875      	bhi.n	8003cf2 <HAL_GPIO_Init+0x12e>
 8003c06:	4a98      	ldr	r2, [pc, #608]	; (8003e68 <HAL_GPIO_Init+0x2a4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d058      	beq.n	8003cbe <HAL_GPIO_Init+0xfa>
 8003c0c:	4a96      	ldr	r2, [pc, #600]	; (8003e68 <HAL_GPIO_Init+0x2a4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d86f      	bhi.n	8003cf2 <HAL_GPIO_Init+0x12e>
 8003c12:	4a96      	ldr	r2, [pc, #600]	; (8003e6c <HAL_GPIO_Init+0x2a8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d052      	beq.n	8003cbe <HAL_GPIO_Init+0xfa>
 8003c18:	4a94      	ldr	r2, [pc, #592]	; (8003e6c <HAL_GPIO_Init+0x2a8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d869      	bhi.n	8003cf2 <HAL_GPIO_Init+0x12e>
 8003c1e:	4a94      	ldr	r2, [pc, #592]	; (8003e70 <HAL_GPIO_Init+0x2ac>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d04c      	beq.n	8003cbe <HAL_GPIO_Init+0xfa>
 8003c24:	4a92      	ldr	r2, [pc, #584]	; (8003e70 <HAL_GPIO_Init+0x2ac>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d863      	bhi.n	8003cf2 <HAL_GPIO_Init+0x12e>
 8003c2a:	4a92      	ldr	r2, [pc, #584]	; (8003e74 <HAL_GPIO_Init+0x2b0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d046      	beq.n	8003cbe <HAL_GPIO_Init+0xfa>
 8003c30:	4a90      	ldr	r2, [pc, #576]	; (8003e74 <HAL_GPIO_Init+0x2b0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d85d      	bhi.n	8003cf2 <HAL_GPIO_Init+0x12e>
 8003c36:	2b12      	cmp	r3, #18
 8003c38:	d82a      	bhi.n	8003c90 <HAL_GPIO_Init+0xcc>
 8003c3a:	2b12      	cmp	r3, #18
 8003c3c:	d859      	bhi.n	8003cf2 <HAL_GPIO_Init+0x12e>
 8003c3e:	a201      	add	r2, pc, #4	; (adr r2, 8003c44 <HAL_GPIO_Init+0x80>)
 8003c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c44:	08003cbf 	.word	0x08003cbf
 8003c48:	08003c99 	.word	0x08003c99
 8003c4c:	08003cab 	.word	0x08003cab
 8003c50:	08003ced 	.word	0x08003ced
 8003c54:	08003cf3 	.word	0x08003cf3
 8003c58:	08003cf3 	.word	0x08003cf3
 8003c5c:	08003cf3 	.word	0x08003cf3
 8003c60:	08003cf3 	.word	0x08003cf3
 8003c64:	08003cf3 	.word	0x08003cf3
 8003c68:	08003cf3 	.word	0x08003cf3
 8003c6c:	08003cf3 	.word	0x08003cf3
 8003c70:	08003cf3 	.word	0x08003cf3
 8003c74:	08003cf3 	.word	0x08003cf3
 8003c78:	08003cf3 	.word	0x08003cf3
 8003c7c:	08003cf3 	.word	0x08003cf3
 8003c80:	08003cf3 	.word	0x08003cf3
 8003c84:	08003cf3 	.word	0x08003cf3
 8003c88:	08003ca1 	.word	0x08003ca1
 8003c8c:	08003cb5 	.word	0x08003cb5
 8003c90:	4a79      	ldr	r2, [pc, #484]	; (8003e78 <HAL_GPIO_Init+0x2b4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c96:	e02c      	b.n	8003cf2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	623b      	str	r3, [r7, #32]
          break;
 8003c9e:	e029      	b.n	8003cf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	623b      	str	r3, [r7, #32]
          break;
 8003ca8:	e024      	b.n	8003cf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	3308      	adds	r3, #8
 8003cb0:	623b      	str	r3, [r7, #32]
          break;
 8003cb2:	e01f      	b.n	8003cf4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	330c      	adds	r3, #12
 8003cba:	623b      	str	r3, [r7, #32]
          break;
 8003cbc:	e01a      	b.n	8003cf4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d102      	bne.n	8003ccc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003cc6:	2304      	movs	r3, #4
 8003cc8:	623b      	str	r3, [r7, #32]
          break;
 8003cca:	e013      	b.n	8003cf4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d105      	bne.n	8003ce0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cd4:	2308      	movs	r3, #8
 8003cd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69fa      	ldr	r2, [r7, #28]
 8003cdc:	611a      	str	r2, [r3, #16]
          break;
 8003cde:	e009      	b.n	8003cf4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ce0:	2308      	movs	r3, #8
 8003ce2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	615a      	str	r2, [r3, #20]
          break;
 8003cea:	e003      	b.n	8003cf4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003cec:	2300      	movs	r3, #0
 8003cee:	623b      	str	r3, [r7, #32]
          break;
 8003cf0:	e000      	b.n	8003cf4 <HAL_GPIO_Init+0x130>
          break;
 8003cf2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	2bff      	cmp	r3, #255	; 0xff
 8003cf8:	d801      	bhi.n	8003cfe <HAL_GPIO_Init+0x13a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	e001      	b.n	8003d02 <HAL_GPIO_Init+0x13e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3304      	adds	r3, #4
 8003d02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2bff      	cmp	r3, #255	; 0xff
 8003d08:	d802      	bhi.n	8003d10 <HAL_GPIO_Init+0x14c>
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	e002      	b.n	8003d16 <HAL_GPIO_Init+0x152>
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	3b08      	subs	r3, #8
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	210f      	movs	r1, #15
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	fa01 f303 	lsl.w	r3, r1, r3
 8003d24:	43db      	mvns	r3, r3
 8003d26:	401a      	ands	r2, r3
 8003d28:	6a39      	ldr	r1, [r7, #32]
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d30:	431a      	orrs	r2, r3
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 80b1 	beq.w	8003ea6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d44:	4b4d      	ldr	r3, [pc, #308]	; (8003e7c <HAL_GPIO_Init+0x2b8>)
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	4a4c      	ldr	r2, [pc, #304]	; (8003e7c <HAL_GPIO_Init+0x2b8>)
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	6193      	str	r3, [r2, #24]
 8003d50:	4b4a      	ldr	r3, [pc, #296]	; (8003e7c <HAL_GPIO_Init+0x2b8>)
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d5c:	4a48      	ldr	r2, [pc, #288]	; (8003e80 <HAL_GPIO_Init+0x2bc>)
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	3302      	adds	r3, #2
 8003d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	220f      	movs	r2, #15
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a40      	ldr	r2, [pc, #256]	; (8003e84 <HAL_GPIO_Init+0x2c0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d013      	beq.n	8003db0 <HAL_GPIO_Init+0x1ec>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a3f      	ldr	r2, [pc, #252]	; (8003e88 <HAL_GPIO_Init+0x2c4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00d      	beq.n	8003dac <HAL_GPIO_Init+0x1e8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a3e      	ldr	r2, [pc, #248]	; (8003e8c <HAL_GPIO_Init+0x2c8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d007      	beq.n	8003da8 <HAL_GPIO_Init+0x1e4>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a3d      	ldr	r2, [pc, #244]	; (8003e90 <HAL_GPIO_Init+0x2cc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d101      	bne.n	8003da4 <HAL_GPIO_Init+0x1e0>
 8003da0:	2303      	movs	r3, #3
 8003da2:	e006      	b.n	8003db2 <HAL_GPIO_Init+0x1ee>
 8003da4:	2304      	movs	r3, #4
 8003da6:	e004      	b.n	8003db2 <HAL_GPIO_Init+0x1ee>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e002      	b.n	8003db2 <HAL_GPIO_Init+0x1ee>
 8003dac:	2301      	movs	r3, #1
 8003dae:	e000      	b.n	8003db2 <HAL_GPIO_Init+0x1ee>
 8003db0:	2300      	movs	r3, #0
 8003db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db4:	f002 0203 	and.w	r2, r2, #3
 8003db8:	0092      	lsls	r2, r2, #2
 8003dba:	4093      	lsls	r3, r2
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003dc2:	492f      	ldr	r1, [pc, #188]	; (8003e80 <HAL_GPIO_Init+0x2bc>)
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	089b      	lsrs	r3, r3, #2
 8003dc8:	3302      	adds	r3, #2
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d006      	beq.n	8003dea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ddc:	4b2d      	ldr	r3, [pc, #180]	; (8003e94 <HAL_GPIO_Init+0x2d0>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	492c      	ldr	r1, [pc, #176]	; (8003e94 <HAL_GPIO_Init+0x2d0>)
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	600b      	str	r3, [r1, #0]
 8003de8:	e006      	b.n	8003df8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003dea:	4b2a      	ldr	r3, [pc, #168]	; (8003e94 <HAL_GPIO_Init+0x2d0>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	43db      	mvns	r3, r3
 8003df2:	4928      	ldr	r1, [pc, #160]	; (8003e94 <HAL_GPIO_Init+0x2d0>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d006      	beq.n	8003e12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e04:	4b23      	ldr	r3, [pc, #140]	; (8003e94 <HAL_GPIO_Init+0x2d0>)
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	4922      	ldr	r1, [pc, #136]	; (8003e94 <HAL_GPIO_Init+0x2d0>)
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	604b      	str	r3, [r1, #4]
 8003e10:	e006      	b.n	8003e20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e12:	4b20      	ldr	r3, [pc, #128]	; (8003e94 <HAL_GPIO_Init+0x2d0>)
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	491e      	ldr	r1, [pc, #120]	; (8003e94 <HAL_GPIO_Init+0x2d0>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d006      	beq.n	8003e3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e2c:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <HAL_GPIO_Init+0x2d0>)
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	4918      	ldr	r1, [pc, #96]	; (8003e94 <HAL_GPIO_Init+0x2d0>)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	608b      	str	r3, [r1, #8]
 8003e38:	e006      	b.n	8003e48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e3a:	4b16      	ldr	r3, [pc, #88]	; (8003e94 <HAL_GPIO_Init+0x2d0>)
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	4914      	ldr	r1, [pc, #80]	; (8003e94 <HAL_GPIO_Init+0x2d0>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d021      	beq.n	8003e98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e54:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <HAL_GPIO_Init+0x2d0>)
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	490e      	ldr	r1, [pc, #56]	; (8003e94 <HAL_GPIO_Init+0x2d0>)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60cb      	str	r3, [r1, #12]
 8003e60:	e021      	b.n	8003ea6 <HAL_GPIO_Init+0x2e2>
 8003e62:	bf00      	nop
 8003e64:	10320000 	.word	0x10320000
 8003e68:	10310000 	.word	0x10310000
 8003e6c:	10220000 	.word	0x10220000
 8003e70:	10210000 	.word	0x10210000
 8003e74:	10120000 	.word	0x10120000
 8003e78:	10110000 	.word	0x10110000
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40010000 	.word	0x40010000
 8003e84:	40010800 	.word	0x40010800
 8003e88:	40010c00 	.word	0x40010c00
 8003e8c:	40011000 	.word	0x40011000
 8003e90:	40011400 	.word	0x40011400
 8003e94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e98:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <HAL_GPIO_Init+0x304>)
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	4909      	ldr	r1, [pc, #36]	; (8003ec8 <HAL_GPIO_Init+0x304>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f47f ae8e 	bne.w	8003bd8 <HAL_GPIO_Init+0x14>
  }
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	372c      	adds	r7, #44	; 0x2c
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr
 8003ec8:	40010400 	.word	0x40010400

08003ecc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	887b      	ldrh	r3, [r7, #2]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]
 8003ee8:	e001      	b.n	8003eee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eea:	2300      	movs	r3, #0
 8003eec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bc80      	pop	{r7}
 8003ef8:	4770      	bx	lr

08003efa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	460b      	mov	r3, r1
 8003f04:	807b      	strh	r3, [r7, #2]
 8003f06:	4613      	mov	r3, r2
 8003f08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f0a:	787b      	ldrb	r3, [r7, #1]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f10:	887a      	ldrh	r2, [r7, #2]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f16:	e003      	b.n	8003f20 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f18:	887b      	ldrh	r3, [r7, #2]
 8003f1a:	041a      	lsls	r2, r3, #16
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	611a      	str	r2, [r3, #16]
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr
	...

08003f2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f36:	4b08      	ldr	r3, [pc, #32]	; (8003f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f38:	695a      	ldr	r2, [r3, #20]
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d006      	beq.n	8003f50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f42:	4a05      	ldr	r2, [pc, #20]	; (8003f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f44:	88fb      	ldrh	r3, [r7, #6]
 8003f46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f48:	88fb      	ldrh	r3, [r7, #6]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fd fa54 	bl	80013f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40010400 	.word	0x40010400

08003f5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e12b      	b.n	80041c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff fb38 	bl	80035f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2224      	movs	r2, #36	; 0x24
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0201 	bic.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fc0:	f001 fba0 	bl	8005704 <HAL_RCC_GetPCLK1Freq>
 8003fc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	4a81      	ldr	r2, [pc, #516]	; (80041d0 <HAL_I2C_Init+0x274>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d807      	bhi.n	8003fe0 <HAL_I2C_Init+0x84>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4a80      	ldr	r2, [pc, #512]	; (80041d4 <HAL_I2C_Init+0x278>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	bf94      	ite	ls
 8003fd8:	2301      	movls	r3, #1
 8003fda:	2300      	movhi	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	e006      	b.n	8003fee <HAL_I2C_Init+0x92>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4a7d      	ldr	r2, [pc, #500]	; (80041d8 <HAL_I2C_Init+0x27c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	bf94      	ite	ls
 8003fe8:	2301      	movls	r3, #1
 8003fea:	2300      	movhi	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e0e7      	b.n	80041c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4a78      	ldr	r2, [pc, #480]	; (80041dc <HAL_I2C_Init+0x280>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	0c9b      	lsrs	r3, r3, #18
 8004000:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	4a6a      	ldr	r2, [pc, #424]	; (80041d0 <HAL_I2C_Init+0x274>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d802      	bhi.n	8004030 <HAL_I2C_Init+0xd4>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	3301      	adds	r3, #1
 800402e:	e009      	b.n	8004044 <HAL_I2C_Init+0xe8>
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004036:	fb02 f303 	mul.w	r3, r2, r3
 800403a:	4a69      	ldr	r2, [pc, #420]	; (80041e0 <HAL_I2C_Init+0x284>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	099b      	lsrs	r3, r3, #6
 8004042:	3301      	adds	r3, #1
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	430b      	orrs	r3, r1
 800404a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004056:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	495c      	ldr	r1, [pc, #368]	; (80041d0 <HAL_I2C_Init+0x274>)
 8004060:	428b      	cmp	r3, r1
 8004062:	d819      	bhi.n	8004098 <HAL_I2C_Init+0x13c>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	1e59      	subs	r1, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004072:	1c59      	adds	r1, r3, #1
 8004074:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004078:	400b      	ands	r3, r1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_I2C_Init+0x138>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1e59      	subs	r1, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	fbb1 f3f3 	udiv	r3, r1, r3
 800408c:	3301      	adds	r3, #1
 800408e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004092:	e051      	b.n	8004138 <HAL_I2C_Init+0x1dc>
 8004094:	2304      	movs	r3, #4
 8004096:	e04f      	b.n	8004138 <HAL_I2C_Init+0x1dc>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d111      	bne.n	80040c4 <HAL_I2C_Init+0x168>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	1e58      	subs	r0, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6859      	ldr	r1, [r3, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	440b      	add	r3, r1
 80040ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80040b2:	3301      	adds	r3, #1
 80040b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bf0c      	ite	eq
 80040bc:	2301      	moveq	r3, #1
 80040be:	2300      	movne	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	e012      	b.n	80040ea <HAL_I2C_Init+0x18e>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	1e58      	subs	r0, r3, #1
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6859      	ldr	r1, [r3, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	0099      	lsls	r1, r3, #2
 80040d4:	440b      	add	r3, r1
 80040d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040da:	3301      	adds	r3, #1
 80040dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bf0c      	ite	eq
 80040e4:	2301      	moveq	r3, #1
 80040e6:	2300      	movne	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <HAL_I2C_Init+0x196>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e022      	b.n	8004138 <HAL_I2C_Init+0x1dc>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10e      	bne.n	8004118 <HAL_I2C_Init+0x1bc>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1e58      	subs	r0, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6859      	ldr	r1, [r3, #4]
 8004102:	460b      	mov	r3, r1
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	440b      	add	r3, r1
 8004108:	fbb0 f3f3 	udiv	r3, r0, r3
 800410c:	3301      	adds	r3, #1
 800410e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004116:	e00f      	b.n	8004138 <HAL_I2C_Init+0x1dc>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	1e58      	subs	r0, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6859      	ldr	r1, [r3, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	0099      	lsls	r1, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	fbb0 f3f3 	udiv	r3, r0, r3
 800412e:	3301      	adds	r3, #1
 8004130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004134:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	6809      	ldr	r1, [r1, #0]
 800413c:	4313      	orrs	r3, r2
 800413e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69da      	ldr	r2, [r3, #28]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004166:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6911      	ldr	r1, [r2, #16]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	68d2      	ldr	r2, [r2, #12]
 8004172:	4311      	orrs	r1, r2
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	430b      	orrs	r3, r1
 800417a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	000186a0 	.word	0x000186a0
 80041d4:	001e847f 	.word	0x001e847f
 80041d8:	003d08ff 	.word	0x003d08ff
 80041dc:	431bde83 	.word	0x431bde83
 80041e0:	10624dd3 	.word	0x10624dd3

080041e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	4608      	mov	r0, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	461a      	mov	r2, r3
 80041f2:	4603      	mov	r3, r0
 80041f4:	817b      	strh	r3, [r7, #10]
 80041f6:	460b      	mov	r3, r1
 80041f8:	813b      	strh	r3, [r7, #8]
 80041fa:	4613      	mov	r3, r2
 80041fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041fe:	f7ff fba5 	bl	800394c <HAL_GetTick>
 8004202:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b20      	cmp	r3, #32
 800420e:	f040 80d9 	bne.w	80043c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	2319      	movs	r3, #25
 8004218:	2201      	movs	r2, #1
 800421a:	496d      	ldr	r1, [pc, #436]	; (80043d0 <HAL_I2C_Mem_Write+0x1ec>)
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 fcc1 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004228:	2302      	movs	r3, #2
 800422a:	e0cc      	b.n	80043c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_I2C_Mem_Write+0x56>
 8004236:	2302      	movs	r3, #2
 8004238:	e0c5      	b.n	80043c6 <HAL_I2C_Mem_Write+0x1e2>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b01      	cmp	r3, #1
 800424e:	d007      	beq.n	8004260 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800426e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2221      	movs	r2, #33	; 0x21
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2240      	movs	r2, #64	; 0x40
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a3a      	ldr	r2, [r7, #32]
 800428a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004290:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4a4d      	ldr	r2, [pc, #308]	; (80043d4 <HAL_I2C_Mem_Write+0x1f0>)
 80042a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042a2:	88f8      	ldrh	r0, [r7, #6]
 80042a4:	893a      	ldrh	r2, [r7, #8]
 80042a6:	8979      	ldrh	r1, [r7, #10]
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	4603      	mov	r3, r0
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 faf8 	bl	80048a8 <I2C_RequestMemoryWrite>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d052      	beq.n	8004364 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e081      	b.n	80043c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 fd42 	bl	8004d50 <I2C_WaitOnTXEFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00d      	beq.n	80042ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d107      	bne.n	80042ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e06b      	b.n	80043c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	781a      	ldrb	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b04      	cmp	r3, #4
 800432a:	d11b      	bne.n	8004364 <HAL_I2C_Mem_Write+0x180>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004330:	2b00      	cmp	r3, #0
 8004332:	d017      	beq.n	8004364 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	781a      	ldrb	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435a:	b29b      	uxth	r3, r3
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1aa      	bne.n	80042c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 fd2e 	bl	8004dd2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00d      	beq.n	8004398 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	2b04      	cmp	r3, #4
 8004382:	d107      	bne.n	8004394 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004392:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e016      	b.n	80043c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	e000      	b.n	80043c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80043c4:	2302      	movs	r3, #2
  }
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	00100002 	.word	0x00100002
 80043d4:	ffff0000 	.word	0xffff0000

080043d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08c      	sub	sp, #48	; 0x30
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	4608      	mov	r0, r1
 80043e2:	4611      	mov	r1, r2
 80043e4:	461a      	mov	r2, r3
 80043e6:	4603      	mov	r3, r0
 80043e8:	817b      	strh	r3, [r7, #10]
 80043ea:	460b      	mov	r3, r1
 80043ec:	813b      	strh	r3, [r7, #8]
 80043ee:	4613      	mov	r3, r2
 80043f0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043f6:	f7ff faa9 	bl	800394c <HAL_GetTick>
 80043fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b20      	cmp	r3, #32
 8004406:	f040 8244 	bne.w	8004892 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	2319      	movs	r3, #25
 8004410:	2201      	movs	r2, #1
 8004412:	4982      	ldr	r1, [pc, #520]	; (800461c <HAL_I2C_Mem_Read+0x244>)
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 fbc5 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004420:	2302      	movs	r3, #2
 8004422:	e237      	b.n	8004894 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_I2C_Mem_Read+0x5a>
 800442e:	2302      	movs	r3, #2
 8004430:	e230      	b.n	8004894 <HAL_I2C_Mem_Read+0x4bc>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b01      	cmp	r3, #1
 8004446:	d007      	beq.n	8004458 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0201 	orr.w	r2, r2, #1
 8004456:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004466:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2222      	movs	r2, #34	; 0x22
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2240      	movs	r2, #64	; 0x40
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004482:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004488:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4a62      	ldr	r2, [pc, #392]	; (8004620 <HAL_I2C_Mem_Read+0x248>)
 8004498:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800449a:	88f8      	ldrh	r0, [r7, #6]
 800449c:	893a      	ldrh	r2, [r7, #8]
 800449e:	8979      	ldrh	r1, [r7, #10]
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	9301      	str	r3, [sp, #4]
 80044a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	4603      	mov	r3, r0
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 fa92 	bl	80049d4 <I2C_RequestMemoryRead>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e1ec      	b.n	8004894 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d113      	bne.n	80044ea <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	61fb      	str	r3, [r7, #28]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	e1c0      	b.n	800486c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d11e      	bne.n	8004530 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004500:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004502:	b672      	cpsid	i
}
 8004504:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004506:	2300      	movs	r3, #0
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	61bb      	str	r3, [r7, #24]
 800451a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800452a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800452c:	b662      	cpsie	i
}
 800452e:	e035      	b.n	800459c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004534:	2b02      	cmp	r3, #2
 8004536:	d11e      	bne.n	8004576 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004546:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004548:	b672      	cpsid	i
}
 800454a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004570:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004572:	b662      	cpsie	i
}
 8004574:	e012      	b.n	800459c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004584:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004586:	2300      	movs	r3, #0
 8004588:	613b      	str	r3, [r7, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800459c:	e166      	b.n	800486c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	f200 811f 	bhi.w	80047e6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d123      	bne.n	80045f8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 fc4d 	bl	8004e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e167      	b.n	8004894 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045f6:	e139      	b.n	800486c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d152      	bne.n	80046a6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004606:	2200      	movs	r2, #0
 8004608:	4906      	ldr	r1, [pc, #24]	; (8004624 <HAL_I2C_Mem_Read+0x24c>)
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 faca 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e13c      	b.n	8004894 <HAL_I2C_Mem_Read+0x4bc>
 800461a:	bf00      	nop
 800461c:	00100002 	.word	0x00100002
 8004620:	ffff0000 	.word	0xffff0000
 8004624:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004628:	b672      	cpsid	i
}
 800462a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800463a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691a      	ldr	r2, [r3, #16]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800466e:	b662      	cpsie	i
}
 8004670:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	b2d2      	uxtb	r2, r2
 800467e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046a4:	e0e2      	b.n	800486c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ac:	2200      	movs	r2, #0
 80046ae:	497b      	ldr	r1, [pc, #492]	; (800489c <HAL_I2C_Mem_Read+0x4c4>)
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fa77 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0e9      	b.n	8004894 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80046d0:	b672      	cpsid	i
}
 80046d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691a      	ldr	r2, [r3, #16]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004706:	4b66      	ldr	r3, [pc, #408]	; (80048a0 <HAL_I2C_Mem_Read+0x4c8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	08db      	lsrs	r3, r3, #3
 800470c:	4a65      	ldr	r2, [pc, #404]	; (80048a4 <HAL_I2C_Mem_Read+0x4cc>)
 800470e:	fba2 2303 	umull	r2, r3, r2, r3
 8004712:	0a1a      	lsrs	r2, r3, #8
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	00da      	lsls	r2, r3, #3
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	3b01      	subs	r3, #1
 8004724:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d118      	bne.n	800475e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f043 0220 	orr.w	r2, r3, #32
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800474e:	b662      	cpsie	i
}
 8004750:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e09a      	b.n	8004894 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b04      	cmp	r3, #4
 800476a:	d1d9      	bne.n	8004720 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	3b01      	subs	r3, #1
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80047ae:	b662      	cpsie	i
}
 80047b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	b2d2      	uxtb	r2, r2
 80047be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047da:	b29b      	uxth	r3, r3
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047e4:	e042      	b.n	800486c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fb32 	bl	8004e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e04c      	b.n	8004894 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	691a      	ldr	r2, [r3, #16]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	2b04      	cmp	r3, #4
 8004838:	d118      	bne.n	800486c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004870:	2b00      	cmp	r3, #0
 8004872:	f47f ae94 	bne.w	800459e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	e000      	b.n	8004894 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004892:	2302      	movs	r3, #2
  }
}
 8004894:	4618      	mov	r0, r3
 8004896:	3728      	adds	r7, #40	; 0x28
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	00010004 	.word	0x00010004
 80048a0:	20000100 	.word	0x20000100
 80048a4:	14f8b589 	.word	0x14f8b589

080048a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	4608      	mov	r0, r1
 80048b2:	4611      	mov	r1, r2
 80048b4:	461a      	mov	r2, r3
 80048b6:	4603      	mov	r3, r0
 80048b8:	817b      	strh	r3, [r7, #10]
 80048ba:	460b      	mov	r3, r1
 80048bc:	813b      	strh	r3, [r7, #8]
 80048be:	4613      	mov	r3, r2
 80048c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	2200      	movs	r2, #0
 80048da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 f960 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00d      	beq.n	8004906 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048f8:	d103      	bne.n	8004902 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004900:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e05f      	b.n	80049c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004906:	897b      	ldrh	r3, [r7, #10]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004914:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	6a3a      	ldr	r2, [r7, #32]
 800491a:	492d      	ldr	r1, [pc, #180]	; (80049d0 <I2C_RequestMemoryWrite+0x128>)
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 f998 	bl	8004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e04c      	b.n	80049c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004944:	6a39      	ldr	r1, [r7, #32]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fa02 	bl	8004d50 <I2C_WaitOnTXEFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00d      	beq.n	800496e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	2b04      	cmp	r3, #4
 8004958:	d107      	bne.n	800496a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004968:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e02b      	b.n	80049c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800496e:	88fb      	ldrh	r3, [r7, #6]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d105      	bne.n	8004980 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004974:	893b      	ldrh	r3, [r7, #8]
 8004976:	b2da      	uxtb	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	611a      	str	r2, [r3, #16]
 800497e:	e021      	b.n	80049c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004980:	893b      	ldrh	r3, [r7, #8]
 8004982:	0a1b      	lsrs	r3, r3, #8
 8004984:	b29b      	uxth	r3, r3
 8004986:	b2da      	uxtb	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800498e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004990:	6a39      	ldr	r1, [r7, #32]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 f9dc 	bl	8004d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00d      	beq.n	80049ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d107      	bne.n	80049b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e005      	b.n	80049c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049ba:	893b      	ldrh	r3, [r7, #8]
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	00010002 	.word	0x00010002

080049d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af02      	add	r7, sp, #8
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	4608      	mov	r0, r1
 80049de:	4611      	mov	r1, r2
 80049e0:	461a      	mov	r2, r3
 80049e2:	4603      	mov	r3, r0
 80049e4:	817b      	strh	r3, [r7, #10]
 80049e6:	460b      	mov	r3, r1
 80049e8:	813b      	strh	r3, [r7, #8]
 80049ea:	4613      	mov	r3, r2
 80049ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f8c2 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00d      	beq.n	8004a42 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a34:	d103      	bne.n	8004a3e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e0aa      	b.n	8004b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a42:	897b      	ldrh	r3, [r7, #10]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	461a      	mov	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	6a3a      	ldr	r2, [r7, #32]
 8004a56:	4952      	ldr	r1, [pc, #328]	; (8004ba0 <I2C_RequestMemoryRead+0x1cc>)
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 f8fa 	bl	8004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e097      	b.n	8004b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a68:	2300      	movs	r3, #0
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a80:	6a39      	ldr	r1, [r7, #32]
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f964 	bl	8004d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00d      	beq.n	8004aaa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d107      	bne.n	8004aa6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e076      	b.n	8004b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004aaa:	88fb      	ldrh	r3, [r7, #6]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d105      	bne.n	8004abc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ab0:	893b      	ldrh	r3, [r7, #8]
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	611a      	str	r2, [r3, #16]
 8004aba:	e021      	b.n	8004b00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004abc:	893b      	ldrh	r3, [r7, #8]
 8004abe:	0a1b      	lsrs	r3, r3, #8
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004acc:	6a39      	ldr	r1, [r7, #32]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 f93e 	bl	8004d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00d      	beq.n	8004af6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d107      	bne.n	8004af2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e050      	b.n	8004b98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004af6:	893b      	ldrh	r3, [r7, #8]
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b02:	6a39      	ldr	r1, [r7, #32]
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 f923 	bl	8004d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00d      	beq.n	8004b2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d107      	bne.n	8004b28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e035      	b.n	8004b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f82b 	bl	8004ba4 <I2C_WaitOnFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00d      	beq.n	8004b70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b62:	d103      	bne.n	8004b6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e013      	b.n	8004b98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b70:	897b      	ldrh	r3, [r7, #10]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f043 0301 	orr.w	r3, r3, #1
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	6a3a      	ldr	r2, [r7, #32]
 8004b84:	4906      	ldr	r1, [pc, #24]	; (8004ba0 <I2C_RequestMemoryRead+0x1cc>)
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f863 	bl	8004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	00010002 	.word	0x00010002

08004ba4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bb4:	e025      	b.n	8004c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d021      	beq.n	8004c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbe:	f7fe fec5 	bl	800394c <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d302      	bcc.n	8004bd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d116      	bne.n	8004c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f043 0220 	orr.w	r2, r3, #32
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e023      	b.n	8004c4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	0c1b      	lsrs	r3, r3, #16
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d10d      	bne.n	8004c28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	43da      	mvns	r2, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4013      	ands	r3, r2
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	bf0c      	ite	eq
 8004c1e:	2301      	moveq	r3, #1
 8004c20:	2300      	movne	r3, #0
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	461a      	mov	r2, r3
 8004c26:	e00c      	b.n	8004c42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	43da      	mvns	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4013      	ands	r3, r2
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bf0c      	ite	eq
 8004c3a:	2301      	moveq	r3, #1
 8004c3c:	2300      	movne	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d0b6      	beq.n	8004bb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
 8004c5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c60:	e051      	b.n	8004d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c70:	d123      	bne.n	8004cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f043 0204 	orr.w	r2, r3, #4
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e046      	b.n	8004d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc0:	d021      	beq.n	8004d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc2:	f7fe fe43 	bl	800394c <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d302      	bcc.n	8004cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d116      	bne.n	8004d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f043 0220 	orr.w	r2, r3, #32
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e020      	b.n	8004d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	0c1b      	lsrs	r3, r3, #16
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d10c      	bne.n	8004d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	43da      	mvns	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	bf14      	ite	ne
 8004d22:	2301      	movne	r3, #1
 8004d24:	2300      	moveq	r3, #0
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	e00b      	b.n	8004d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	43da      	mvns	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4013      	ands	r3, r2
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bf14      	ite	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	2300      	moveq	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d18d      	bne.n	8004c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d5c:	e02d      	b.n	8004dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 f8ce 	bl	8004f00 <I2C_IsAcknowledgeFailed>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e02d      	b.n	8004dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d021      	beq.n	8004dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d76:	f7fe fde9 	bl	800394c <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d302      	bcc.n	8004d8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d116      	bne.n	8004dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	f043 0220 	orr.w	r2, r3, #32
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e007      	b.n	8004dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc4:	2b80      	cmp	r3, #128	; 0x80
 8004dc6:	d1ca      	bne.n	8004d5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dde:	e02d      	b.n	8004e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 f88d 	bl	8004f00 <I2C_IsAcknowledgeFailed>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e02d      	b.n	8004e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df6:	d021      	beq.n	8004e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df8:	f7fe fda8 	bl	800394c <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d302      	bcc.n	8004e0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d116      	bne.n	8004e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	f043 0220 	orr.w	r2, r3, #32
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e007      	b.n	8004e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d1ca      	bne.n	8004de0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e60:	e042      	b.n	8004ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	f003 0310 	and.w	r3, r3, #16
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d119      	bne.n	8004ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0210 	mvn.w	r2, #16
 8004e78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e029      	b.n	8004ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea4:	f7fe fd52 	bl	800394c <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d302      	bcc.n	8004eba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d116      	bne.n	8004ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed4:	f043 0220 	orr.w	r2, r3, #32
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e007      	b.n	8004ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	d1b5      	bne.n	8004e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f16:	d11b      	bne.n	8004f50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	f043 0204 	orr.w	r2, r3, #4
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr

08004f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e272      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 8087 	beq.w	800508a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f7c:	4b92      	ldr	r3, [pc, #584]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 030c 	and.w	r3, r3, #12
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d00c      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f88:	4b8f      	ldr	r3, [pc, #572]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f003 030c 	and.w	r3, r3, #12
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d112      	bne.n	8004fba <HAL_RCC_OscConfig+0x5e>
 8004f94:	4b8c      	ldr	r3, [pc, #560]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa0:	d10b      	bne.n	8004fba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa2:	4b89      	ldr	r3, [pc, #548]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d06c      	beq.n	8005088 <HAL_RCC_OscConfig+0x12c>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d168      	bne.n	8005088 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e24c      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc2:	d106      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x76>
 8004fc4:	4b80      	ldr	r3, [pc, #512]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a7f      	ldr	r2, [pc, #508]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8004fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	e02e      	b.n	8005030 <HAL_RCC_OscConfig+0xd4>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10c      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x98>
 8004fda:	4b7b      	ldr	r3, [pc, #492]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a7a      	ldr	r2, [pc, #488]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8004fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	4b78      	ldr	r3, [pc, #480]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a77      	ldr	r2, [pc, #476]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8004fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	e01d      	b.n	8005030 <HAL_RCC_OscConfig+0xd4>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ffc:	d10c      	bne.n	8005018 <HAL_RCC_OscConfig+0xbc>
 8004ffe:	4b72      	ldr	r3, [pc, #456]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a71      	ldr	r2, [pc, #452]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8005004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	4b6f      	ldr	r3, [pc, #444]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a6e      	ldr	r2, [pc, #440]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8005010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	e00b      	b.n	8005030 <HAL_RCC_OscConfig+0xd4>
 8005018:	4b6b      	ldr	r3, [pc, #428]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a6a      	ldr	r2, [pc, #424]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 800501e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	4b68      	ldr	r3, [pc, #416]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a67      	ldr	r2, [pc, #412]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 800502a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800502e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d013      	beq.n	8005060 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005038:	f7fe fc88 	bl	800394c <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005040:	f7fe fc84 	bl	800394c <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b64      	cmp	r3, #100	; 0x64
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e200      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005052:	4b5d      	ldr	r3, [pc, #372]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0f0      	beq.n	8005040 <HAL_RCC_OscConfig+0xe4>
 800505e:	e014      	b.n	800508a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005060:	f7fe fc74 	bl	800394c <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005068:	f7fe fc70 	bl	800394c <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b64      	cmp	r3, #100	; 0x64
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e1ec      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800507a:	4b53      	ldr	r3, [pc, #332]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x10c>
 8005086:	e000      	b.n	800508a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d063      	beq.n	800515e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005096:	4b4c      	ldr	r3, [pc, #304]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f003 030c 	and.w	r3, r3, #12
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00b      	beq.n	80050ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050a2:	4b49      	ldr	r3, [pc, #292]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d11c      	bne.n	80050e8 <HAL_RCC_OscConfig+0x18c>
 80050ae:	4b46      	ldr	r3, [pc, #280]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d116      	bne.n	80050e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ba:	4b43      	ldr	r3, [pc, #268]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_RCC_OscConfig+0x176>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d001      	beq.n	80050d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e1c0      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d2:	4b3d      	ldr	r3, [pc, #244]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	4939      	ldr	r1, [pc, #228]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050e6:	e03a      	b.n	800515e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d020      	beq.n	8005132 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050f0:	4b36      	ldr	r3, [pc, #216]	; (80051cc <HAL_RCC_OscConfig+0x270>)
 80050f2:	2201      	movs	r2, #1
 80050f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f6:	f7fe fc29 	bl	800394c <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050fe:	f7fe fc25 	bl	800394c <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e1a1      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005110:	4b2d      	ldr	r3, [pc, #180]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0f0      	beq.n	80050fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800511c:	4b2a      	ldr	r3, [pc, #168]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	4927      	ldr	r1, [pc, #156]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 800512c:	4313      	orrs	r3, r2
 800512e:	600b      	str	r3, [r1, #0]
 8005130:	e015      	b.n	800515e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005132:	4b26      	ldr	r3, [pc, #152]	; (80051cc <HAL_RCC_OscConfig+0x270>)
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005138:	f7fe fc08 	bl	800394c <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005140:	f7fe fc04 	bl	800394c <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e180      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005152:	4b1d      	ldr	r3, [pc, #116]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1f0      	bne.n	8005140 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d03a      	beq.n	80051e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d019      	beq.n	80051a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005172:	4b17      	ldr	r3, [pc, #92]	; (80051d0 <HAL_RCC_OscConfig+0x274>)
 8005174:	2201      	movs	r2, #1
 8005176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005178:	f7fe fbe8 	bl	800394c <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005180:	f7fe fbe4 	bl	800394c <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e160      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005192:	4b0d      	ldr	r3, [pc, #52]	; (80051c8 <HAL_RCC_OscConfig+0x26c>)
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0f0      	beq.n	8005180 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800519e:	2001      	movs	r0, #1
 80051a0:	f000 fac4 	bl	800572c <RCC_Delay>
 80051a4:	e01c      	b.n	80051e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051a6:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <HAL_RCC_OscConfig+0x274>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ac:	f7fe fbce 	bl	800394c <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b2:	e00f      	b.n	80051d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051b4:	f7fe fbca 	bl	800394c <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d908      	bls.n	80051d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e146      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
 80051c6:	bf00      	nop
 80051c8:	40021000 	.word	0x40021000
 80051cc:	42420000 	.word	0x42420000
 80051d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d4:	4b92      	ldr	r3, [pc, #584]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1e9      	bne.n	80051b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 80a6 	beq.w	800533a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ee:	2300      	movs	r3, #0
 80051f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f2:	4b8b      	ldr	r3, [pc, #556]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10d      	bne.n	800521a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051fe:	4b88      	ldr	r3, [pc, #544]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	4a87      	ldr	r2, [pc, #540]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005208:	61d3      	str	r3, [r2, #28]
 800520a:	4b85      	ldr	r3, [pc, #532]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005212:	60bb      	str	r3, [r7, #8]
 8005214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005216:	2301      	movs	r3, #1
 8005218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800521a:	4b82      	ldr	r3, [pc, #520]	; (8005424 <HAL_RCC_OscConfig+0x4c8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d118      	bne.n	8005258 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005226:	4b7f      	ldr	r3, [pc, #508]	; (8005424 <HAL_RCC_OscConfig+0x4c8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a7e      	ldr	r2, [pc, #504]	; (8005424 <HAL_RCC_OscConfig+0x4c8>)
 800522c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005232:	f7fe fb8b 	bl	800394c <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800523a:	f7fe fb87 	bl	800394c <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b64      	cmp	r3, #100	; 0x64
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e103      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800524c:	4b75      	ldr	r3, [pc, #468]	; (8005424 <HAL_RCC_OscConfig+0x4c8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d106      	bne.n	800526e <HAL_RCC_OscConfig+0x312>
 8005260:	4b6f      	ldr	r3, [pc, #444]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	4a6e      	ldr	r2, [pc, #440]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	6213      	str	r3, [r2, #32]
 800526c:	e02d      	b.n	80052ca <HAL_RCC_OscConfig+0x36e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10c      	bne.n	8005290 <HAL_RCC_OscConfig+0x334>
 8005276:	4b6a      	ldr	r3, [pc, #424]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	4a69      	ldr	r2, [pc, #420]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 800527c:	f023 0301 	bic.w	r3, r3, #1
 8005280:	6213      	str	r3, [r2, #32]
 8005282:	4b67      	ldr	r3, [pc, #412]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	4a66      	ldr	r2, [pc, #408]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005288:	f023 0304 	bic.w	r3, r3, #4
 800528c:	6213      	str	r3, [r2, #32]
 800528e:	e01c      	b.n	80052ca <HAL_RCC_OscConfig+0x36e>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	2b05      	cmp	r3, #5
 8005296:	d10c      	bne.n	80052b2 <HAL_RCC_OscConfig+0x356>
 8005298:	4b61      	ldr	r3, [pc, #388]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	4a60      	ldr	r2, [pc, #384]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 800529e:	f043 0304 	orr.w	r3, r3, #4
 80052a2:	6213      	str	r3, [r2, #32]
 80052a4:	4b5e      	ldr	r3, [pc, #376]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	4a5d      	ldr	r2, [pc, #372]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80052aa:	f043 0301 	orr.w	r3, r3, #1
 80052ae:	6213      	str	r3, [r2, #32]
 80052b0:	e00b      	b.n	80052ca <HAL_RCC_OscConfig+0x36e>
 80052b2:	4b5b      	ldr	r3, [pc, #364]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	4a5a      	ldr	r2, [pc, #360]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80052b8:	f023 0301 	bic.w	r3, r3, #1
 80052bc:	6213      	str	r3, [r2, #32]
 80052be:	4b58      	ldr	r3, [pc, #352]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	4a57      	ldr	r2, [pc, #348]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80052c4:	f023 0304 	bic.w	r3, r3, #4
 80052c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d015      	beq.n	80052fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d2:	f7fe fb3b 	bl	800394c <HAL_GetTick>
 80052d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d8:	e00a      	b.n	80052f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052da:	f7fe fb37 	bl	800394c <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e0b1      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f0:	4b4b      	ldr	r3, [pc, #300]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0ee      	beq.n	80052da <HAL_RCC_OscConfig+0x37e>
 80052fc:	e014      	b.n	8005328 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052fe:	f7fe fb25 	bl	800394c <HAL_GetTick>
 8005302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005304:	e00a      	b.n	800531c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005306:	f7fe fb21 	bl	800394c <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	f241 3288 	movw	r2, #5000	; 0x1388
 8005314:	4293      	cmp	r3, r2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e09b      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800531c:	4b40      	ldr	r3, [pc, #256]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1ee      	bne.n	8005306 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005328:	7dfb      	ldrb	r3, [r7, #23]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d105      	bne.n	800533a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800532e:	4b3c      	ldr	r3, [pc, #240]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	4a3b      	ldr	r2, [pc, #236]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005338:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 8087 	beq.w	8005452 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005344:	4b36      	ldr	r3, [pc, #216]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f003 030c 	and.w	r3, r3, #12
 800534c:	2b08      	cmp	r3, #8
 800534e:	d061      	beq.n	8005414 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	2b02      	cmp	r3, #2
 8005356:	d146      	bne.n	80053e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005358:	4b33      	ldr	r3, [pc, #204]	; (8005428 <HAL_RCC_OscConfig+0x4cc>)
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800535e:	f7fe faf5 	bl	800394c <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005366:	f7fe faf1 	bl	800394c <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e06d      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005378:	4b29      	ldr	r3, [pc, #164]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1f0      	bne.n	8005366 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800538c:	d108      	bne.n	80053a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800538e:	4b24      	ldr	r3, [pc, #144]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	4921      	ldr	r1, [pc, #132]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 800539c:	4313      	orrs	r3, r2
 800539e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053a0:	4b1f      	ldr	r3, [pc, #124]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a19      	ldr	r1, [r3, #32]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	430b      	orrs	r3, r1
 80053b2:	491b      	ldr	r1, [pc, #108]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053b8:	4b1b      	ldr	r3, [pc, #108]	; (8005428 <HAL_RCC_OscConfig+0x4cc>)
 80053ba:	2201      	movs	r2, #1
 80053bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053be:	f7fe fac5 	bl	800394c <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c6:	f7fe fac1 	bl	800394c <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e03d      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053d8:	4b11      	ldr	r3, [pc, #68]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f0      	beq.n	80053c6 <HAL_RCC_OscConfig+0x46a>
 80053e4:	e035      	b.n	8005452 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e6:	4b10      	ldr	r3, [pc, #64]	; (8005428 <HAL_RCC_OscConfig+0x4cc>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ec:	f7fe faae 	bl	800394c <HAL_GetTick>
 80053f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053f2:	e008      	b.n	8005406 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053f4:	f7fe faaa 	bl	800394c <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e026      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005406:	4b06      	ldr	r3, [pc, #24]	; (8005420 <HAL_RCC_OscConfig+0x4c4>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1f0      	bne.n	80053f4 <HAL_RCC_OscConfig+0x498>
 8005412:	e01e      	b.n	8005452 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d107      	bne.n	800542c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e019      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
 8005420:	40021000 	.word	0x40021000
 8005424:	40007000 	.word	0x40007000
 8005428:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800542c:	4b0b      	ldr	r3, [pc, #44]	; (800545c <HAL_RCC_OscConfig+0x500>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	429a      	cmp	r2, r3
 800543e:	d106      	bne.n	800544e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800544a:	429a      	cmp	r2, r3
 800544c:	d001      	beq.n	8005452 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40021000 	.word	0x40021000

08005460 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e0d0      	b.n	8005616 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005474:	4b6a      	ldr	r3, [pc, #424]	; (8005620 <HAL_RCC_ClockConfig+0x1c0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d910      	bls.n	80054a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005482:	4b67      	ldr	r3, [pc, #412]	; (8005620 <HAL_RCC_ClockConfig+0x1c0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f023 0207 	bic.w	r2, r3, #7
 800548a:	4965      	ldr	r1, [pc, #404]	; (8005620 <HAL_RCC_ClockConfig+0x1c0>)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	4313      	orrs	r3, r2
 8005490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005492:	4b63      	ldr	r3, [pc, #396]	; (8005620 <HAL_RCC_ClockConfig+0x1c0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	429a      	cmp	r2, r3
 800549e:	d001      	beq.n	80054a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e0b8      	b.n	8005616 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d020      	beq.n	80054f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054bc:	4b59      	ldr	r3, [pc, #356]	; (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4a58      	ldr	r2, [pc, #352]	; (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80054c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054d4:	4b53      	ldr	r3, [pc, #332]	; (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	4a52      	ldr	r2, [pc, #328]	; (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80054da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80054de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054e0:	4b50      	ldr	r3, [pc, #320]	; (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	494d      	ldr	r1, [pc, #308]	; (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d040      	beq.n	8005580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d107      	bne.n	8005516 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005506:	4b47      	ldr	r3, [pc, #284]	; (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d115      	bne.n	800553e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e07f      	b.n	8005616 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d107      	bne.n	800552e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800551e:	4b41      	ldr	r3, [pc, #260]	; (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d109      	bne.n	800553e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e073      	b.n	8005616 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800552e:	4b3d      	ldr	r3, [pc, #244]	; (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e06b      	b.n	8005616 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800553e:	4b39      	ldr	r3, [pc, #228]	; (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f023 0203 	bic.w	r2, r3, #3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	4936      	ldr	r1, [pc, #216]	; (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 800554c:	4313      	orrs	r3, r2
 800554e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005550:	f7fe f9fc 	bl	800394c <HAL_GetTick>
 8005554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005556:	e00a      	b.n	800556e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005558:	f7fe f9f8 	bl	800394c <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	f241 3288 	movw	r2, #5000	; 0x1388
 8005566:	4293      	cmp	r3, r2
 8005568:	d901      	bls.n	800556e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e053      	b.n	8005616 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556e:	4b2d      	ldr	r3, [pc, #180]	; (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f003 020c 	and.w	r2, r3, #12
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	429a      	cmp	r2, r3
 800557e:	d1eb      	bne.n	8005558 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005580:	4b27      	ldr	r3, [pc, #156]	; (8005620 <HAL_RCC_ClockConfig+0x1c0>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d210      	bcs.n	80055b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558e:	4b24      	ldr	r3, [pc, #144]	; (8005620 <HAL_RCC_ClockConfig+0x1c0>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f023 0207 	bic.w	r2, r3, #7
 8005596:	4922      	ldr	r1, [pc, #136]	; (8005620 <HAL_RCC_ClockConfig+0x1c0>)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	4313      	orrs	r3, r2
 800559c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800559e:	4b20      	ldr	r3, [pc, #128]	; (8005620 <HAL_RCC_ClockConfig+0x1c0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d001      	beq.n	80055b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e032      	b.n	8005616 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d008      	beq.n	80055ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055bc:	4b19      	ldr	r3, [pc, #100]	; (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	4916      	ldr	r1, [pc, #88]	; (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d009      	beq.n	80055ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055da:	4b12      	ldr	r3, [pc, #72]	; (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	490e      	ldr	r1, [pc, #56]	; (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055ee:	f000 f821 	bl	8005634 <HAL_RCC_GetSysClockFreq>
 80055f2:	4602      	mov	r2, r0
 80055f4:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <HAL_RCC_ClockConfig+0x1c4>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	091b      	lsrs	r3, r3, #4
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	490a      	ldr	r1, [pc, #40]	; (8005628 <HAL_RCC_ClockConfig+0x1c8>)
 8005600:	5ccb      	ldrb	r3, [r1, r3]
 8005602:	fa22 f303 	lsr.w	r3, r2, r3
 8005606:	4a09      	ldr	r2, [pc, #36]	; (800562c <HAL_RCC_ClockConfig+0x1cc>)
 8005608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800560a:	4b09      	ldr	r3, [pc, #36]	; (8005630 <HAL_RCC_ClockConfig+0x1d0>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f7fe f95a 	bl	80038c8 <HAL_InitTick>

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40022000 	.word	0x40022000
 8005624:	40021000 	.word	0x40021000
 8005628:	080082c0 	.word	0x080082c0
 800562c:	20000100 	.word	0x20000100
 8005630:	20000104 	.word	0x20000104

08005634 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005634:	b490      	push	{r4, r7}
 8005636:	b08a      	sub	sp, #40	; 0x28
 8005638:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800563a:	4b29      	ldr	r3, [pc, #164]	; (80056e0 <HAL_RCC_GetSysClockFreq+0xac>)
 800563c:	1d3c      	adds	r4, r7, #4
 800563e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005644:	f240 2301 	movw	r3, #513	; 0x201
 8005648:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
 800564e:	2300      	movs	r3, #0
 8005650:	61bb      	str	r3, [r7, #24]
 8005652:	2300      	movs	r3, #0
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
 8005656:	2300      	movs	r3, #0
 8005658:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800565e:	4b21      	ldr	r3, [pc, #132]	; (80056e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f003 030c 	and.w	r3, r3, #12
 800566a:	2b04      	cmp	r3, #4
 800566c:	d002      	beq.n	8005674 <HAL_RCC_GetSysClockFreq+0x40>
 800566e:	2b08      	cmp	r3, #8
 8005670:	d003      	beq.n	800567a <HAL_RCC_GetSysClockFreq+0x46>
 8005672:	e02b      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005674:	4b1c      	ldr	r3, [pc, #112]	; (80056e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005676:	623b      	str	r3, [r7, #32]
      break;
 8005678:	e02b      	b.n	80056d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	0c9b      	lsrs	r3, r3, #18
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	3328      	adds	r3, #40	; 0x28
 8005684:	443b      	add	r3, r7
 8005686:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800568a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d012      	beq.n	80056bc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005696:	4b13      	ldr	r3, [pc, #76]	; (80056e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	0c5b      	lsrs	r3, r3, #17
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	3328      	adds	r3, #40	; 0x28
 80056a2:	443b      	add	r3, r7
 80056a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80056a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	4a0e      	ldr	r2, [pc, #56]	; (80056e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80056ae:	fb03 f202 	mul.w	r2, r3, r2
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ba:	e004      	b.n	80056c6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	4a0b      	ldr	r2, [pc, #44]	; (80056ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80056c0:	fb02 f303 	mul.w	r3, r2, r3
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	623b      	str	r3, [r7, #32]
      break;
 80056ca:	e002      	b.n	80056d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056cc:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80056ce:	623b      	str	r3, [r7, #32]
      break;
 80056d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056d2:	6a3b      	ldr	r3, [r7, #32]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3728      	adds	r7, #40	; 0x28
 80056d8:	46bd      	mov	sp, r7
 80056da:	bc90      	pop	{r4, r7}
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	080082b0 	.word	0x080082b0
 80056e4:	40021000 	.word	0x40021000
 80056e8:	007a1200 	.word	0x007a1200
 80056ec:	003d0900 	.word	0x003d0900

080056f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056f4:	4b02      	ldr	r3, [pc, #8]	; (8005700 <HAL_RCC_GetHCLKFreq+0x10>)
 80056f6:	681b      	ldr	r3, [r3, #0]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr
 8005700:	20000100 	.word	0x20000100

08005704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005708:	f7ff fff2 	bl	80056f0 <HAL_RCC_GetHCLKFreq>
 800570c:	4602      	mov	r2, r0
 800570e:	4b05      	ldr	r3, [pc, #20]	; (8005724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	0a1b      	lsrs	r3, r3, #8
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	4903      	ldr	r1, [pc, #12]	; (8005728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800571a:	5ccb      	ldrb	r3, [r1, r3]
 800571c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005720:	4618      	mov	r0, r3
 8005722:	bd80      	pop	{r7, pc}
 8005724:	40021000 	.word	0x40021000
 8005728:	080082d0 	.word	0x080082d0

0800572c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005734:	4b0a      	ldr	r3, [pc, #40]	; (8005760 <RCC_Delay+0x34>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a0a      	ldr	r2, [pc, #40]	; (8005764 <RCC_Delay+0x38>)
 800573a:	fba2 2303 	umull	r2, r3, r2, r3
 800573e:	0a5b      	lsrs	r3, r3, #9
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	fb02 f303 	mul.w	r3, r2, r3
 8005746:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005748:	bf00      	nop
  }
  while (Delay --);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	1e5a      	subs	r2, r3, #1
 800574e:	60fa      	str	r2, [r7, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1f9      	bne.n	8005748 <RCC_Delay+0x1c>
}
 8005754:	bf00      	nop
 8005756:	bf00      	nop
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	bc80      	pop	{r7}
 800575e:	4770      	bx	lr
 8005760:	20000100 	.word	0x20000100
 8005764:	10624dd3 	.word	0x10624dd3

08005768 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e076      	b.n	8005868 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	2b00      	cmp	r3, #0
 8005780:	d108      	bne.n	8005794 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800578a:	d009      	beq.n	80057a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	61da      	str	r2, [r3, #28]
 8005792:	e005      	b.n	80057a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fd ff5c 	bl	8003678 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800581a:	431a      	orrs	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005824:	ea42 0103 	orr.w	r1, r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	0c1a      	lsrs	r2, r3, #16
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f002 0204 	and.w	r2, r2, #4
 8005846:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	69da      	ldr	r2, [r3, #28]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005856:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	4613      	mov	r3, r2
 800587e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_SPI_Transmit+0x22>
 800588e:	2302      	movs	r3, #2
 8005890:	e126      	b.n	8005ae0 <HAL_SPI_Transmit+0x270>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800589a:	f7fe f857 	bl	800394c <HAL_GetTick>
 800589e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d002      	beq.n	80058b6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80058b0:	2302      	movs	r3, #2
 80058b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058b4:	e10b      	b.n	8005ace <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <HAL_SPI_Transmit+0x52>
 80058bc:	88fb      	ldrh	r3, [r7, #6]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d102      	bne.n	80058c8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058c6:	e102      	b.n	8005ace <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2203      	movs	r2, #3
 80058cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	88fa      	ldrh	r2, [r7, #6]
 80058e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	88fa      	ldrh	r2, [r7, #6]
 80058e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800590e:	d10f      	bne.n	8005930 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800591e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800592e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593a:	2b40      	cmp	r3, #64	; 0x40
 800593c:	d007      	beq.n	800594e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800594c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005956:	d14b      	bne.n	80059f0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <HAL_SPI_Transmit+0xf6>
 8005960:	8afb      	ldrh	r3, [r7, #22]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d13e      	bne.n	80059e4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	881a      	ldrh	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	1c9a      	adds	r2, r3, #2
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005980:	b29b      	uxth	r3, r3
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800598a:	e02b      	b.n	80059e4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b02      	cmp	r3, #2
 8005998:	d112      	bne.n	80059c0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599e:	881a      	ldrh	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	1c9a      	adds	r2, r3, #2
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80059be:	e011      	b.n	80059e4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059c0:	f7fd ffc4 	bl	800394c <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d803      	bhi.n	80059d8 <HAL_SPI_Transmit+0x168>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d6:	d102      	bne.n	80059de <HAL_SPI_Transmit+0x16e>
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d102      	bne.n	80059e4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059e2:	e074      	b.n	8005ace <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1ce      	bne.n	800598c <HAL_SPI_Transmit+0x11c>
 80059ee:	e04c      	b.n	8005a8a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <HAL_SPI_Transmit+0x18e>
 80059f8:	8afb      	ldrh	r3, [r7, #22]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d140      	bne.n	8005a80 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	330c      	adds	r3, #12
 8005a08:	7812      	ldrb	r2, [r2, #0]
 8005a0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a24:	e02c      	b.n	8005a80 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d113      	bne.n	8005a5c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	330c      	adds	r3, #12
 8005a3e:	7812      	ldrb	r2, [r2, #0]
 8005a40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a5a:	e011      	b.n	8005a80 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a5c:	f7fd ff76 	bl	800394c <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d803      	bhi.n	8005a74 <HAL_SPI_Transmit+0x204>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d102      	bne.n	8005a7a <HAL_SPI_Transmit+0x20a>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d102      	bne.n	8005a80 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a7e:	e026      	b.n	8005ace <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1cd      	bne.n	8005a26 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	6839      	ldr	r1, [r7, #0]
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 fa54 	bl	8005f3c <SPI_EndRxTxTransaction>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	613b      	str	r3, [r7, #16]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	613b      	str	r3, [r7, #16]
 8005abc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	77fb      	strb	r3, [r7, #31]
 8005aca:	e000      	b.n	8005ace <HAL_SPI_Transmit+0x25e>
  }

error:
 8005acc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ade:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3720      	adds	r7, #32
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08c      	sub	sp, #48	; 0x30
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005af6:	2301      	movs	r3, #1
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d101      	bne.n	8005b0e <HAL_SPI_TransmitReceive+0x26>
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	e18a      	b.n	8005e24 <HAL_SPI_TransmitReceive+0x33c>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b16:	f7fd ff19 	bl	800394c <HAL_GetTick>
 8005b1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005b2c:	887b      	ldrh	r3, [r7, #2]
 8005b2e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d00f      	beq.n	8005b58 <HAL_SPI_TransmitReceive+0x70>
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b3e:	d107      	bne.n	8005b50 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d103      	bne.n	8005b50 <HAL_SPI_TransmitReceive+0x68>
 8005b48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d003      	beq.n	8005b58 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005b50:	2302      	movs	r3, #2
 8005b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b56:	e15b      	b.n	8005e10 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d005      	beq.n	8005b6a <HAL_SPI_TransmitReceive+0x82>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <HAL_SPI_TransmitReceive+0x82>
 8005b64:	887b      	ldrh	r3, [r7, #2]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d103      	bne.n	8005b72 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b70:	e14e      	b.n	8005e10 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d003      	beq.n	8005b86 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2205      	movs	r2, #5
 8005b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	887a      	ldrh	r2, [r7, #2]
 8005b96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	887a      	ldrh	r2, [r7, #2]
 8005b9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	887a      	ldrh	r2, [r7, #2]
 8005ba8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	887a      	ldrh	r2, [r7, #2]
 8005bae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc6:	2b40      	cmp	r3, #64	; 0x40
 8005bc8:	d007      	beq.n	8005bda <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005be2:	d178      	bne.n	8005cd6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <HAL_SPI_TransmitReceive+0x10a>
 8005bec:	8b7b      	ldrh	r3, [r7, #26]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d166      	bne.n	8005cc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf6:	881a      	ldrh	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	1c9a      	adds	r2, r3, #2
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c16:	e053      	b.n	8005cc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d11b      	bne.n	8005c5e <HAL_SPI_TransmitReceive+0x176>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d016      	beq.n	8005c5e <HAL_SPI_TransmitReceive+0x176>
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d113      	bne.n	8005c5e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3a:	881a      	ldrh	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c46:	1c9a      	adds	r2, r3, #2
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d119      	bne.n	8005ca0 <HAL_SPI_TransmitReceive+0x1b8>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d014      	beq.n	8005ca0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	b292      	uxth	r2, r2
 8005c82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c88:	1c9a      	adds	r2, r3, #2
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ca0:	f7fd fe54 	bl	800394c <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d807      	bhi.n	8005cc0 <HAL_SPI_TransmitReceive+0x1d8>
 8005cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb6:	d003      	beq.n	8005cc0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005cbe:	e0a7      	b.n	8005e10 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1a6      	bne.n	8005c18 <HAL_SPI_TransmitReceive+0x130>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1a1      	bne.n	8005c18 <HAL_SPI_TransmitReceive+0x130>
 8005cd4:	e07c      	b.n	8005dd0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <HAL_SPI_TransmitReceive+0x1fc>
 8005cde:	8b7b      	ldrh	r3, [r7, #26]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d16b      	bne.n	8005dbc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	330c      	adds	r3, #12
 8005cee:	7812      	ldrb	r2, [r2, #0]
 8005cf0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d0a:	e057      	b.n	8005dbc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d11c      	bne.n	8005d54 <HAL_SPI_TransmitReceive+0x26c>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d017      	beq.n	8005d54 <HAL_SPI_TransmitReceive+0x26c>
 8005d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d114      	bne.n	8005d54 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	330c      	adds	r3, #12
 8005d34:	7812      	ldrb	r2, [r2, #0]
 8005d36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d119      	bne.n	8005d96 <HAL_SPI_TransmitReceive+0x2ae>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d014      	beq.n	8005d96 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d92:	2301      	movs	r3, #1
 8005d94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d96:	f7fd fdd9 	bl	800394c <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d803      	bhi.n	8005dae <HAL_SPI_TransmitReceive+0x2c6>
 8005da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dac:	d102      	bne.n	8005db4 <HAL_SPI_TransmitReceive+0x2cc>
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d103      	bne.n	8005dbc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005dba:	e029      	b.n	8005e10 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1a2      	bne.n	8005d0c <HAL_SPI_TransmitReceive+0x224>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d19d      	bne.n	8005d0c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 f8b1 	bl	8005f3c <SPI_EndRxTxTransaction>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d006      	beq.n	8005dee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2220      	movs	r2, #32
 8005dea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005dec:	e010      	b.n	8005e10 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10b      	bne.n	8005e0e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005df6:	2300      	movs	r3, #0
 8005df8:	617b      	str	r3, [r7, #20]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	617b      	str	r3, [r7, #20]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	e000      	b.n	8005e10 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005e0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3730      	adds	r7, #48	; 0x30
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	603b      	str	r3, [r7, #0]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e3c:	f7fd fd86 	bl	800394c <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e44:	1a9b      	subs	r3, r3, r2
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	4413      	add	r3, r2
 8005e4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e4c:	f7fd fd7e 	bl	800394c <HAL_GetTick>
 8005e50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e52:	4b39      	ldr	r3, [pc, #228]	; (8005f38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	015b      	lsls	r3, r3, #5
 8005e58:	0d1b      	lsrs	r3, r3, #20
 8005e5a:	69fa      	ldr	r2, [r7, #28]
 8005e5c:	fb02 f303 	mul.w	r3, r2, r3
 8005e60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e62:	e054      	b.n	8005f0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6a:	d050      	beq.n	8005f0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e6c:	f7fd fd6e 	bl	800394c <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	69fa      	ldr	r2, [r7, #28]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d902      	bls.n	8005e82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d13d      	bne.n	8005efe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e9a:	d111      	bne.n	8005ec0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea4:	d004      	beq.n	8005eb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eae:	d107      	bne.n	8005ec0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ebe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec8:	d10f      	bne.n	8005eea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ee8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e017      	b.n	8005f2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	4013      	ands	r3, r2
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	bf0c      	ite	eq
 8005f1e:	2301      	moveq	r3, #1
 8005f20:	2300      	movne	r3, #0
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	79fb      	ldrb	r3, [r7, #7]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d19b      	bne.n	8005e64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3720      	adds	r7, #32
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20000100 	.word	0x20000100

08005f3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af02      	add	r7, sp, #8
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	2180      	movs	r1, #128	; 0x80
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7ff ff6a 	bl	8005e2c <SPI_WaitFlagStateUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d007      	beq.n	8005f6e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f62:	f043 0220 	orr.w	r2, r3, #32
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e000      	b.n	8005f70 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e041      	b.n	800600e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fd fbd2 	bl	8003748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	f000 faec 	bl	8006594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
	...

08006018 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b01      	cmp	r3, #1
 800602a:	d001      	beq.n	8006030 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e032      	b.n	8006096 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a18      	ldr	r2, [pc, #96]	; (80060a0 <HAL_TIM_Base_Start+0x88>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00e      	beq.n	8006060 <HAL_TIM_Base_Start+0x48>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604a:	d009      	beq.n	8006060 <HAL_TIM_Base_Start+0x48>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a14      	ldr	r2, [pc, #80]	; (80060a4 <HAL_TIM_Base_Start+0x8c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d004      	beq.n	8006060 <HAL_TIM_Base_Start+0x48>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a13      	ldr	r2, [pc, #76]	; (80060a8 <HAL_TIM_Base_Start+0x90>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d111      	bne.n	8006084 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b06      	cmp	r3, #6
 8006070:	d010      	beq.n	8006094 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 0201 	orr.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006082:	e007      	b.n	8006094 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	bc80      	pop	{r7}
 800609e:	4770      	bx	lr
 80060a0:	40012c00 	.word	0x40012c00
 80060a4:	40000400 	.word	0x40000400
 80060a8:	40000800 	.word	0x40000800

080060ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e041      	b.n	8006142 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d106      	bne.n	80060d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7fd fb1a 	bl	800370c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3304      	adds	r3, #4
 80060e8:	4619      	mov	r1, r3
 80060ea:	4610      	mov	r0, r2
 80060ec:	f000 fa52 	bl	8006594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
	...

0800614c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d109      	bne.n	8006170 <HAL_TIM_PWM_Start+0x24>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b01      	cmp	r3, #1
 8006166:	bf14      	ite	ne
 8006168:	2301      	movne	r3, #1
 800616a:	2300      	moveq	r3, #0
 800616c:	b2db      	uxtb	r3, r3
 800616e:	e022      	b.n	80061b6 <HAL_TIM_PWM_Start+0x6a>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b04      	cmp	r3, #4
 8006174:	d109      	bne.n	800618a <HAL_TIM_PWM_Start+0x3e>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b01      	cmp	r3, #1
 8006180:	bf14      	ite	ne
 8006182:	2301      	movne	r3, #1
 8006184:	2300      	moveq	r3, #0
 8006186:	b2db      	uxtb	r3, r3
 8006188:	e015      	b.n	80061b6 <HAL_TIM_PWM_Start+0x6a>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b08      	cmp	r3, #8
 800618e:	d109      	bne.n	80061a4 <HAL_TIM_PWM_Start+0x58>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b01      	cmp	r3, #1
 800619a:	bf14      	ite	ne
 800619c:	2301      	movne	r3, #1
 800619e:	2300      	moveq	r3, #0
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	e008      	b.n	80061b6 <HAL_TIM_PWM_Start+0x6a>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	bf14      	ite	ne
 80061b0:	2301      	movne	r3, #1
 80061b2:	2300      	moveq	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e05e      	b.n	800627c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d104      	bne.n	80061ce <HAL_TIM_PWM_Start+0x82>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061cc:	e013      	b.n	80061f6 <HAL_TIM_PWM_Start+0xaa>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d104      	bne.n	80061de <HAL_TIM_PWM_Start+0x92>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061dc:	e00b      	b.n	80061f6 <HAL_TIM_PWM_Start+0xaa>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d104      	bne.n	80061ee <HAL_TIM_PWM_Start+0xa2>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061ec:	e003      	b.n	80061f6 <HAL_TIM_PWM_Start+0xaa>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2202      	movs	r2, #2
 80061f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2201      	movs	r2, #1
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fc48 	bl	8006a94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a1e      	ldr	r2, [pc, #120]	; (8006284 <HAL_TIM_PWM_Start+0x138>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d107      	bne.n	800621e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800621c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a18      	ldr	r2, [pc, #96]	; (8006284 <HAL_TIM_PWM_Start+0x138>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00e      	beq.n	8006246 <HAL_TIM_PWM_Start+0xfa>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006230:	d009      	beq.n	8006246 <HAL_TIM_PWM_Start+0xfa>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a14      	ldr	r2, [pc, #80]	; (8006288 <HAL_TIM_PWM_Start+0x13c>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d004      	beq.n	8006246 <HAL_TIM_PWM_Start+0xfa>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a12      	ldr	r2, [pc, #72]	; (800628c <HAL_TIM_PWM_Start+0x140>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d111      	bne.n	800626a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2b06      	cmp	r3, #6
 8006256:	d010      	beq.n	800627a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0201 	orr.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006268:	e007      	b.n	800627a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f042 0201 	orr.w	r2, r2, #1
 8006278:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	40012c00 	.word	0x40012c00
 8006288:	40000400 	.word	0x40000400
 800628c:	40000800 	.word	0x40000800

08006290 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d101      	bne.n	80062aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80062a6:	2302      	movs	r3, #2
 80062a8:	e0ac      	b.n	8006404 <HAL_TIM_PWM_ConfigChannel+0x174>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b0c      	cmp	r3, #12
 80062b6:	f200 809f 	bhi.w	80063f8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80062ba:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	080062f5 	.word	0x080062f5
 80062c4:	080063f9 	.word	0x080063f9
 80062c8:	080063f9 	.word	0x080063f9
 80062cc:	080063f9 	.word	0x080063f9
 80062d0:	08006335 	.word	0x08006335
 80062d4:	080063f9 	.word	0x080063f9
 80062d8:	080063f9 	.word	0x080063f9
 80062dc:	080063f9 	.word	0x080063f9
 80062e0:	08006377 	.word	0x08006377
 80062e4:	080063f9 	.word	0x080063f9
 80062e8:	080063f9 	.word	0x080063f9
 80062ec:	080063f9 	.word	0x080063f9
 80062f0:	080063b7 	.word	0x080063b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68b9      	ldr	r1, [r7, #8]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 f9ac 	bl	8006658 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699a      	ldr	r2, [r3, #24]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0208 	orr.w	r2, r2, #8
 800630e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699a      	ldr	r2, [r3, #24]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0204 	bic.w	r2, r2, #4
 800631e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6999      	ldr	r1, [r3, #24]
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	691a      	ldr	r2, [r3, #16]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	619a      	str	r2, [r3, #24]
      break;
 8006332:	e062      	b.n	80063fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68b9      	ldr	r1, [r7, #8]
 800633a:	4618      	mov	r0, r3
 800633c:	f000 f9f2 	bl	8006724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	699a      	ldr	r2, [r3, #24]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800634e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699a      	ldr	r2, [r3, #24]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800635e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6999      	ldr	r1, [r3, #24]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	021a      	lsls	r2, r3, #8
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	619a      	str	r2, [r3, #24]
      break;
 8006374:	e041      	b.n	80063fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68b9      	ldr	r1, [r7, #8]
 800637c:	4618      	mov	r0, r3
 800637e:	f000 fa3b 	bl	80067f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69da      	ldr	r2, [r3, #28]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f042 0208 	orr.w	r2, r2, #8
 8006390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69da      	ldr	r2, [r3, #28]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 0204 	bic.w	r2, r2, #4
 80063a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69d9      	ldr	r1, [r3, #28]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	691a      	ldr	r2, [r3, #16]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	61da      	str	r2, [r3, #28]
      break;
 80063b4:	e021      	b.n	80063fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68b9      	ldr	r1, [r7, #8]
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 fa85 	bl	80068cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69da      	ldr	r2, [r3, #28]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69da      	ldr	r2, [r3, #28]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69d9      	ldr	r1, [r3, #28]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	021a      	lsls	r2, r3, #8
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	61da      	str	r2, [r3, #28]
      break;
 80063f6:	e000      	b.n	80063fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80063f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800641c:	2b01      	cmp	r3, #1
 800641e:	d101      	bne.n	8006424 <HAL_TIM_ConfigClockSource+0x18>
 8006420:	2302      	movs	r3, #2
 8006422:	e0b3      	b.n	800658c <HAL_TIM_ConfigClockSource+0x180>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006442:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800644a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800645c:	d03e      	beq.n	80064dc <HAL_TIM_ConfigClockSource+0xd0>
 800645e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006462:	f200 8087 	bhi.w	8006574 <HAL_TIM_ConfigClockSource+0x168>
 8006466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646a:	f000 8085 	beq.w	8006578 <HAL_TIM_ConfigClockSource+0x16c>
 800646e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006472:	d87f      	bhi.n	8006574 <HAL_TIM_ConfigClockSource+0x168>
 8006474:	2b70      	cmp	r3, #112	; 0x70
 8006476:	d01a      	beq.n	80064ae <HAL_TIM_ConfigClockSource+0xa2>
 8006478:	2b70      	cmp	r3, #112	; 0x70
 800647a:	d87b      	bhi.n	8006574 <HAL_TIM_ConfigClockSource+0x168>
 800647c:	2b60      	cmp	r3, #96	; 0x60
 800647e:	d050      	beq.n	8006522 <HAL_TIM_ConfigClockSource+0x116>
 8006480:	2b60      	cmp	r3, #96	; 0x60
 8006482:	d877      	bhi.n	8006574 <HAL_TIM_ConfigClockSource+0x168>
 8006484:	2b50      	cmp	r3, #80	; 0x50
 8006486:	d03c      	beq.n	8006502 <HAL_TIM_ConfigClockSource+0xf6>
 8006488:	2b50      	cmp	r3, #80	; 0x50
 800648a:	d873      	bhi.n	8006574 <HAL_TIM_ConfigClockSource+0x168>
 800648c:	2b40      	cmp	r3, #64	; 0x40
 800648e:	d058      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x136>
 8006490:	2b40      	cmp	r3, #64	; 0x40
 8006492:	d86f      	bhi.n	8006574 <HAL_TIM_ConfigClockSource+0x168>
 8006494:	2b30      	cmp	r3, #48	; 0x30
 8006496:	d064      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0x156>
 8006498:	2b30      	cmp	r3, #48	; 0x30
 800649a:	d86b      	bhi.n	8006574 <HAL_TIM_ConfigClockSource+0x168>
 800649c:	2b20      	cmp	r3, #32
 800649e:	d060      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0x156>
 80064a0:	2b20      	cmp	r3, #32
 80064a2:	d867      	bhi.n	8006574 <HAL_TIM_ConfigClockSource+0x168>
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d05c      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0x156>
 80064a8:	2b10      	cmp	r3, #16
 80064aa:	d05a      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80064ac:	e062      	b.n	8006574 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	6899      	ldr	r1, [r3, #8]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f000 faca 	bl	8006a56 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	609a      	str	r2, [r3, #8]
      break;
 80064da:	e04e      	b.n	800657a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	6899      	ldr	r1, [r3, #8]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f000 fab3 	bl	8006a56 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064fe:	609a      	str	r2, [r3, #8]
      break;
 8006500:	e03b      	b.n	800657a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	6859      	ldr	r1, [r3, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	461a      	mov	r2, r3
 8006510:	f000 fa2a 	bl	8006968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2150      	movs	r1, #80	; 0x50
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fa81 	bl	8006a22 <TIM_ITRx_SetConfig>
      break;
 8006520:	e02b      	b.n	800657a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6818      	ldr	r0, [r3, #0]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	6859      	ldr	r1, [r3, #4]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	461a      	mov	r2, r3
 8006530:	f000 fa48 	bl	80069c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2160      	movs	r1, #96	; 0x60
 800653a:	4618      	mov	r0, r3
 800653c:	f000 fa71 	bl	8006a22 <TIM_ITRx_SetConfig>
      break;
 8006540:	e01b      	b.n	800657a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6818      	ldr	r0, [r3, #0]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	6859      	ldr	r1, [r3, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	461a      	mov	r2, r3
 8006550:	f000 fa0a 	bl	8006968 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2140      	movs	r1, #64	; 0x40
 800655a:	4618      	mov	r0, r3
 800655c:	f000 fa61 	bl	8006a22 <TIM_ITRx_SetConfig>
      break;
 8006560:	e00b      	b.n	800657a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4619      	mov	r1, r3
 800656c:	4610      	mov	r0, r2
 800656e:	f000 fa58 	bl	8006a22 <TIM_ITRx_SetConfig>
        break;
 8006572:	e002      	b.n	800657a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006574:	bf00      	nop
 8006576:	e000      	b.n	800657a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006578:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a29      	ldr	r2, [pc, #164]	; (800664c <TIM_Base_SetConfig+0xb8>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00b      	beq.n	80065c4 <TIM_Base_SetConfig+0x30>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b2:	d007      	beq.n	80065c4 <TIM_Base_SetConfig+0x30>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a26      	ldr	r2, [pc, #152]	; (8006650 <TIM_Base_SetConfig+0xbc>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d003      	beq.n	80065c4 <TIM_Base_SetConfig+0x30>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a25      	ldr	r2, [pc, #148]	; (8006654 <TIM_Base_SetConfig+0xc0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d108      	bne.n	80065d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a1c      	ldr	r2, [pc, #112]	; (800664c <TIM_Base_SetConfig+0xb8>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d00b      	beq.n	80065f6 <TIM_Base_SetConfig+0x62>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e4:	d007      	beq.n	80065f6 <TIM_Base_SetConfig+0x62>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a19      	ldr	r2, [pc, #100]	; (8006650 <TIM_Base_SetConfig+0xbc>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d003      	beq.n	80065f6 <TIM_Base_SetConfig+0x62>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a18      	ldr	r2, [pc, #96]	; (8006654 <TIM_Base_SetConfig+0xc0>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d108      	bne.n	8006608 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a07      	ldr	r2, [pc, #28]	; (800664c <TIM_Base_SetConfig+0xb8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d103      	bne.n	800663c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	691a      	ldr	r2, [r3, #16]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	615a      	str	r2, [r3, #20]
}
 8006642:	bf00      	nop
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr
 800664c:	40012c00 	.word	0x40012c00
 8006650:	40000400 	.word	0x40000400
 8006654:	40000800 	.word	0x40000800

08006658 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	f023 0201 	bic.w	r2, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 0303 	bic.w	r3, r3, #3
 800668e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	4313      	orrs	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f023 0302 	bic.w	r3, r3, #2
 80066a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a1c      	ldr	r2, [pc, #112]	; (8006720 <TIM_OC1_SetConfig+0xc8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d10c      	bne.n	80066ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f023 0308 	bic.w	r3, r3, #8
 80066ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f023 0304 	bic.w	r3, r3, #4
 80066cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a13      	ldr	r2, [pc, #76]	; (8006720 <TIM_OC1_SetConfig+0xc8>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d111      	bne.n	80066fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	621a      	str	r2, [r3, #32]
}
 8006714:	bf00      	nop
 8006716:	371c      	adds	r7, #28
 8006718:	46bd      	mov	sp, r7
 800671a:	bc80      	pop	{r7}
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	40012c00 	.word	0x40012c00

08006724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	f023 0210 	bic.w	r2, r3, #16
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800675a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	021b      	lsls	r3, r3, #8
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f023 0320 	bic.w	r3, r3, #32
 800676e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	4313      	orrs	r3, r2
 800677a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a1d      	ldr	r2, [pc, #116]	; (80067f4 <TIM_OC2_SetConfig+0xd0>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d10d      	bne.n	80067a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800678a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	4313      	orrs	r3, r2
 8006796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800679e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a14      	ldr	r2, [pc, #80]	; (80067f4 <TIM_OC2_SetConfig+0xd0>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d113      	bne.n	80067d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	621a      	str	r2, [r3, #32]
}
 80067ea:	bf00      	nop
 80067ec:	371c      	adds	r7, #28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bc80      	pop	{r7}
 80067f2:	4770      	bx	lr
 80067f4:	40012c00 	.word	0x40012c00

080067f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 0303 	bic.w	r3, r3, #3
 800682e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	4313      	orrs	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	021b      	lsls	r3, r3, #8
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	4313      	orrs	r3, r2
 800684c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a1d      	ldr	r2, [pc, #116]	; (80068c8 <TIM_OC3_SetConfig+0xd0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d10d      	bne.n	8006872 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800685c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	021b      	lsls	r3, r3, #8
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	4313      	orrs	r3, r2
 8006868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a14      	ldr	r2, [pc, #80]	; (80068c8 <TIM_OC3_SetConfig+0xd0>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d113      	bne.n	80068a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	4313      	orrs	r3, r2
 8006894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4313      	orrs	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	621a      	str	r2, [r3, #32]
}
 80068bc:	bf00      	nop
 80068be:	371c      	adds	r7, #28
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bc80      	pop	{r7}
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	40012c00 	.word	0x40012c00

080068cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	021b      	lsls	r3, r3, #8
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4313      	orrs	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	031b      	lsls	r3, r3, #12
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	4313      	orrs	r3, r2
 8006922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a0f      	ldr	r2, [pc, #60]	; (8006964 <TIM_OC4_SetConfig+0x98>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d109      	bne.n	8006940 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006932:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	019b      	lsls	r3, r3, #6
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	621a      	str	r2, [r3, #32]
}
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	bc80      	pop	{r7}
 8006962:	4770      	bx	lr
 8006964:	40012c00 	.word	0x40012c00

08006968 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	f023 0201 	bic.w	r2, r3, #1
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	4313      	orrs	r3, r2
 800699c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f023 030a 	bic.w	r3, r3, #10
 80069a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	621a      	str	r2, [r3, #32]
}
 80069ba:	bf00      	nop
 80069bc:	371c      	adds	r7, #28
 80069be:	46bd      	mov	sp, r7
 80069c0:	bc80      	pop	{r7}
 80069c2:	4770      	bx	lr

080069c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	f023 0210 	bic.w	r2, r3, #16
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	031b      	lsls	r3, r3, #12
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	011b      	lsls	r3, r3, #4
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	621a      	str	r2, [r3, #32]
}
 8006a18:	bf00      	nop
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bc80      	pop	{r7}
 8006a20:	4770      	bx	lr

08006a22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b085      	sub	sp, #20
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	f043 0307 	orr.w	r3, r3, #7
 8006a44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	609a      	str	r2, [r3, #8]
}
 8006a4c:	bf00      	nop
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	4770      	bx	lr

08006a56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b087      	sub	sp, #28
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	60f8      	str	r0, [r7, #12]
 8006a5e:	60b9      	str	r1, [r7, #8]
 8006a60:	607a      	str	r2, [r7, #4]
 8006a62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	021a      	lsls	r2, r3, #8
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	609a      	str	r2, [r3, #8]
}
 8006a8a:	bf00      	nop
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bc80      	pop	{r7}
 8006a92:	4770      	bx	lr

08006a94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f003 031f 	and.w	r3, r3, #31
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6a1a      	ldr	r2, [r3, #32]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	401a      	ands	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6a1a      	ldr	r2, [r3, #32]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f003 031f 	and.w	r3, r3, #31
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8006acc:	431a      	orrs	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	621a      	str	r2, [r3, #32]
}
 8006ad2:	bf00      	nop
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bc80      	pop	{r7}
 8006ada:	4770      	bx	lr

08006adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d101      	bne.n	8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006af0:	2302      	movs	r3, #2
 8006af2:	e046      	b.n	8006b82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a16      	ldr	r2, [pc, #88]	; (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d00e      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b40:	d009      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a12      	ldr	r2, [pc, #72]	; (8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d004      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a10      	ldr	r2, [pc, #64]	; (8006b94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d10c      	bne.n	8006b70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr
 8006b8c:	40012c00 	.word	0x40012c00
 8006b90:	40000400 	.word	0x40000400
 8006b94:	40000800 	.word	0x40000800

08006b98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d101      	bne.n	8006bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	e03d      	b.n	8006c30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr
	...

08006c3c <__errno>:
 8006c3c:	4b01      	ldr	r3, [pc, #4]	; (8006c44 <__errno+0x8>)
 8006c3e:	6818      	ldr	r0, [r3, #0]
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	2000010c 	.word	0x2000010c

08006c48 <__libc_init_array>:
 8006c48:	b570      	push	{r4, r5, r6, lr}
 8006c4a:	2600      	movs	r6, #0
 8006c4c:	4d0c      	ldr	r5, [pc, #48]	; (8006c80 <__libc_init_array+0x38>)
 8006c4e:	4c0d      	ldr	r4, [pc, #52]	; (8006c84 <__libc_init_array+0x3c>)
 8006c50:	1b64      	subs	r4, r4, r5
 8006c52:	10a4      	asrs	r4, r4, #2
 8006c54:	42a6      	cmp	r6, r4
 8006c56:	d109      	bne.n	8006c6c <__libc_init_array+0x24>
 8006c58:	f001 fb1c 	bl	8008294 <_init>
 8006c5c:	2600      	movs	r6, #0
 8006c5e:	4d0a      	ldr	r5, [pc, #40]	; (8006c88 <__libc_init_array+0x40>)
 8006c60:	4c0a      	ldr	r4, [pc, #40]	; (8006c8c <__libc_init_array+0x44>)
 8006c62:	1b64      	subs	r4, r4, r5
 8006c64:	10a4      	asrs	r4, r4, #2
 8006c66:	42a6      	cmp	r6, r4
 8006c68:	d105      	bne.n	8006c76 <__libc_init_array+0x2e>
 8006c6a:	bd70      	pop	{r4, r5, r6, pc}
 8006c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c70:	4798      	blx	r3
 8006c72:	3601      	adds	r6, #1
 8006c74:	e7ee      	b.n	8006c54 <__libc_init_array+0xc>
 8006c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c7a:	4798      	blx	r3
 8006c7c:	3601      	adds	r6, #1
 8006c7e:	e7f2      	b.n	8006c66 <__libc_init_array+0x1e>
 8006c80:	080084b8 	.word	0x080084b8
 8006c84:	080084b8 	.word	0x080084b8
 8006c88:	080084b8 	.word	0x080084b8
 8006c8c:	080084bc 	.word	0x080084bc

08006c90 <memset>:
 8006c90:	4603      	mov	r3, r0
 8006c92:	4402      	add	r2, r0
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d100      	bne.n	8006c9a <memset+0xa>
 8006c98:	4770      	bx	lr
 8006c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c9e:	e7f9      	b.n	8006c94 <memset+0x4>

08006ca0 <sin>:
 8006ca0:	b530      	push	{r4, r5, lr}
 8006ca2:	4a20      	ldr	r2, [pc, #128]	; (8006d24 <sin+0x84>)
 8006ca4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	b087      	sub	sp, #28
 8006cac:	dc06      	bgt.n	8006cbc <sin+0x1c>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f001 f92b 	bl	8007f10 <__kernel_sin>
 8006cba:	e006      	b.n	8006cca <sin+0x2a>
 8006cbc:	4a1a      	ldr	r2, [pc, #104]	; (8006d28 <sin+0x88>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	dd05      	ble.n	8006cce <sin+0x2e>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	f7f9 fa47 	bl	8000158 <__aeabi_dsub>
 8006cca:	b007      	add	sp, #28
 8006ccc:	bd30      	pop	{r4, r5, pc}
 8006cce:	aa02      	add	r2, sp, #8
 8006cd0:	f000 fa76 	bl	80071c0 <__ieee754_rem_pio2>
 8006cd4:	f000 0003 	and.w	r0, r0, #3
 8006cd8:	2801      	cmp	r0, #1
 8006cda:	d009      	beq.n	8006cf0 <sin+0x50>
 8006cdc:	2802      	cmp	r0, #2
 8006cde:	d00e      	beq.n	8006cfe <sin+0x5e>
 8006ce0:	b9c0      	cbnz	r0, 8006d14 <sin+0x74>
 8006ce2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cee:	e7e2      	b.n	8006cb6 <sin+0x16>
 8006cf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cf8:	f000 fd0a 	bl	8007710 <__kernel_cos>
 8006cfc:	e7e5      	b.n	8006cca <sin+0x2a>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d0a:	f001 f901 	bl	8007f10 <__kernel_sin>
 8006d0e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006d12:	e7da      	b.n	8006cca <sin+0x2a>
 8006d14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d1c:	f000 fcf8 	bl	8007710 <__kernel_cos>
 8006d20:	e7f5      	b.n	8006d0e <sin+0x6e>
 8006d22:	bf00      	nop
 8006d24:	3fe921fb 	.word	0x3fe921fb
 8006d28:	7fefffff 	.word	0x7fefffff

08006d2c <asin>:
 8006d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2e:	4604      	mov	r4, r0
 8006d30:	460d      	mov	r5, r1
 8006d32:	f000 f849 	bl	8006dc8 <__ieee754_asin>
 8006d36:	4622      	mov	r2, r4
 8006d38:	4606      	mov	r6, r0
 8006d3a:	460f      	mov	r7, r1
 8006d3c:	462b      	mov	r3, r5
 8006d3e:	4620      	mov	r0, r4
 8006d40:	4629      	mov	r1, r5
 8006d42:	f7f9 fe5b 	bl	80009fc <__aeabi_dcmpun>
 8006d46:	b988      	cbnz	r0, 8006d6c <asin+0x40>
 8006d48:	4620      	mov	r0, r4
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	f001 f996 	bl	800807c <fabs>
 8006d50:	2200      	movs	r2, #0
 8006d52:	4b08      	ldr	r3, [pc, #32]	; (8006d74 <asin+0x48>)
 8006d54:	f7f9 fe48 	bl	80009e8 <__aeabi_dcmpgt>
 8006d58:	b140      	cbz	r0, 8006d6c <asin+0x40>
 8006d5a:	f7ff ff6f 	bl	8006c3c <__errno>
 8006d5e:	2321      	movs	r3, #33	; 0x21
 8006d60:	6003      	str	r3, [r0, #0]
 8006d62:	4805      	ldr	r0, [pc, #20]	; (8006d78 <asin+0x4c>)
 8006d64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d68:	f001 ba0e 	b.w	8008188 <nan>
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	4639      	mov	r1, r7
 8006d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d72:	bf00      	nop
 8006d74:	3ff00000 	.word	0x3ff00000
 8006d78:	080082d8 	.word	0x080082d8

08006d7c <sqrt>:
 8006d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7e:	4606      	mov	r6, r0
 8006d80:	460f      	mov	r7, r1
 8006d82:	f000 fc15 	bl	80075b0 <__ieee754_sqrt>
 8006d86:	4632      	mov	r2, r6
 8006d88:	4604      	mov	r4, r0
 8006d8a:	460d      	mov	r5, r1
 8006d8c:	463b      	mov	r3, r7
 8006d8e:	4630      	mov	r0, r6
 8006d90:	4639      	mov	r1, r7
 8006d92:	f7f9 fe33 	bl	80009fc <__aeabi_dcmpun>
 8006d96:	b990      	cbnz	r0, 8006dbe <sqrt+0x42>
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	4639      	mov	r1, r7
 8006da0:	f7f9 fe04 	bl	80009ac <__aeabi_dcmplt>
 8006da4:	b158      	cbz	r0, 8006dbe <sqrt+0x42>
 8006da6:	f7ff ff49 	bl	8006c3c <__errno>
 8006daa:	2321      	movs	r3, #33	; 0x21
 8006dac:	2200      	movs	r2, #0
 8006dae:	6003      	str	r3, [r0, #0]
 8006db0:	2300      	movs	r3, #0
 8006db2:	4610      	mov	r0, r2
 8006db4:	4619      	mov	r1, r3
 8006db6:	f7f9 fcb1 	bl	800071c <__aeabi_ddiv>
 8006dba:	4604      	mov	r4, r0
 8006dbc:	460d      	mov	r5, r1
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dc4:	0000      	movs	r0, r0
	...

08006dc8 <__ieee754_asin>:
 8006dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dcc:	4bc4      	ldr	r3, [pc, #784]	; (80070e0 <__ieee754_asin+0x318>)
 8006dce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	429e      	cmp	r6, r3
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	4604      	mov	r4, r0
 8006dda:	460d      	mov	r5, r1
 8006ddc:	9105      	str	r1, [sp, #20]
 8006dde:	dd29      	ble.n	8006e34 <__ieee754_asin+0x6c>
 8006de0:	4603      	mov	r3, r0
 8006de2:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 8006de6:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006dea:	4333      	orrs	r3, r6
 8006dec:	d114      	bne.n	8006e18 <__ieee754_asin+0x50>
 8006dee:	a3a2      	add	r3, pc, #648	; (adr r3, 8007078 <__ieee754_asin+0x2b0>)
 8006df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df4:	f7f9 fb68 	bl	80004c8 <__aeabi_dmul>
 8006df8:	a3a1      	add	r3, pc, #644	; (adr r3, 8007080 <__ieee754_asin+0x2b8>)
 8006dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfe:	4606      	mov	r6, r0
 8006e00:	460f      	mov	r7, r1
 8006e02:	4620      	mov	r0, r4
 8006e04:	4629      	mov	r1, r5
 8006e06:	f7f9 fb5f 	bl	80004c8 <__aeabi_dmul>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4630      	mov	r0, r6
 8006e10:	4639      	mov	r1, r7
 8006e12:	f7f9 f9a3 	bl	800015c <__adddf3>
 8006e16:	e006      	b.n	8006e26 <__ieee754_asin+0x5e>
 8006e18:	460b      	mov	r3, r1
 8006e1a:	f7f9 f99d 	bl	8000158 <__aeabi_dsub>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	f7f9 fc7b 	bl	800071c <__aeabi_ddiv>
 8006e26:	4604      	mov	r4, r0
 8006e28:	460d      	mov	r5, r1
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	b007      	add	sp, #28
 8006e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e34:	4bab      	ldr	r3, [pc, #684]	; (80070e4 <__ieee754_asin+0x31c>)
 8006e36:	429e      	cmp	r6, r3
 8006e38:	dc0e      	bgt.n	8006e58 <__ieee754_asin+0x90>
 8006e3a:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006e3e:	f280 80ab 	bge.w	8006f98 <__ieee754_asin+0x1d0>
 8006e42:	a391      	add	r3, pc, #580	; (adr r3, 8007088 <__ieee754_asin+0x2c0>)
 8006e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e48:	f7f9 f988 	bl	800015c <__adddf3>
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	4ba6      	ldr	r3, [pc, #664]	; (80070e8 <__ieee754_asin+0x320>)
 8006e50:	f7f9 fdca 	bl	80009e8 <__aeabi_dcmpgt>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d1e8      	bne.n	8006e2a <__ieee754_asin+0x62>
 8006e58:	4620      	mov	r0, r4
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	f001 f90e 	bl	800807c <fabs>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	2000      	movs	r0, #0
 8006e66:	49a0      	ldr	r1, [pc, #640]	; (80070e8 <__ieee754_asin+0x320>)
 8006e68:	f7f9 f976 	bl	8000158 <__aeabi_dsub>
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	4b9f      	ldr	r3, [pc, #636]	; (80070ec <__ieee754_asin+0x324>)
 8006e70:	f7f9 fb2a 	bl	80004c8 <__aeabi_dmul>
 8006e74:	a386      	add	r3, pc, #536	; (adr r3, 8007090 <__ieee754_asin+0x2c8>)
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	460d      	mov	r5, r1
 8006e7e:	f7f9 fb23 	bl	80004c8 <__aeabi_dmul>
 8006e82:	a385      	add	r3, pc, #532	; (adr r3, 8007098 <__ieee754_asin+0x2d0>)
 8006e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e88:	f7f9 f968 	bl	800015c <__adddf3>
 8006e8c:	4622      	mov	r2, r4
 8006e8e:	462b      	mov	r3, r5
 8006e90:	f7f9 fb1a 	bl	80004c8 <__aeabi_dmul>
 8006e94:	a382      	add	r3, pc, #520	; (adr r3, 80070a0 <__ieee754_asin+0x2d8>)
 8006e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9a:	f7f9 f95d 	bl	8000158 <__aeabi_dsub>
 8006e9e:	4622      	mov	r2, r4
 8006ea0:	462b      	mov	r3, r5
 8006ea2:	f7f9 fb11 	bl	80004c8 <__aeabi_dmul>
 8006ea6:	a380      	add	r3, pc, #512	; (adr r3, 80070a8 <__ieee754_asin+0x2e0>)
 8006ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eac:	f7f9 f956 	bl	800015c <__adddf3>
 8006eb0:	4622      	mov	r2, r4
 8006eb2:	462b      	mov	r3, r5
 8006eb4:	f7f9 fb08 	bl	80004c8 <__aeabi_dmul>
 8006eb8:	a37d      	add	r3, pc, #500	; (adr r3, 80070b0 <__ieee754_asin+0x2e8>)
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	f7f9 f94b 	bl	8000158 <__aeabi_dsub>
 8006ec2:	4622      	mov	r2, r4
 8006ec4:	462b      	mov	r3, r5
 8006ec6:	f7f9 faff 	bl	80004c8 <__aeabi_dmul>
 8006eca:	a37b      	add	r3, pc, #492	; (adr r3, 80070b8 <__ieee754_asin+0x2f0>)
 8006ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed0:	f7f9 f944 	bl	800015c <__adddf3>
 8006ed4:	4622      	mov	r2, r4
 8006ed6:	462b      	mov	r3, r5
 8006ed8:	f7f9 faf6 	bl	80004c8 <__aeabi_dmul>
 8006edc:	a378      	add	r3, pc, #480	; (adr r3, 80070c0 <__ieee754_asin+0x2f8>)
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	e9cd 0100 	strd	r0, r1, [sp]
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	4629      	mov	r1, r5
 8006eea:	f7f9 faed 	bl	80004c8 <__aeabi_dmul>
 8006eee:	a376      	add	r3, pc, #472	; (adr r3, 80070c8 <__ieee754_asin+0x300>)
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	f7f9 f930 	bl	8000158 <__aeabi_dsub>
 8006ef8:	4622      	mov	r2, r4
 8006efa:	462b      	mov	r3, r5
 8006efc:	f7f9 fae4 	bl	80004c8 <__aeabi_dmul>
 8006f00:	a373      	add	r3, pc, #460	; (adr r3, 80070d0 <__ieee754_asin+0x308>)
 8006f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f06:	f7f9 f929 	bl	800015c <__adddf3>
 8006f0a:	4622      	mov	r2, r4
 8006f0c:	462b      	mov	r3, r5
 8006f0e:	f7f9 fadb 	bl	80004c8 <__aeabi_dmul>
 8006f12:	a371      	add	r3, pc, #452	; (adr r3, 80070d8 <__ieee754_asin+0x310>)
 8006f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f18:	f7f9 f91e 	bl	8000158 <__aeabi_dsub>
 8006f1c:	4622      	mov	r2, r4
 8006f1e:	462b      	mov	r3, r5
 8006f20:	f7f9 fad2 	bl	80004c8 <__aeabi_dmul>
 8006f24:	4b70      	ldr	r3, [pc, #448]	; (80070e8 <__ieee754_asin+0x320>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	f7f9 f918 	bl	800015c <__adddf3>
 8006f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f30:	4620      	mov	r0, r4
 8006f32:	4629      	mov	r1, r5
 8006f34:	f000 fb3c 	bl	80075b0 <__ieee754_sqrt>
 8006f38:	4b6d      	ldr	r3, [pc, #436]	; (80070f0 <__ieee754_asin+0x328>)
 8006f3a:	4682      	mov	sl, r0
 8006f3c:	429e      	cmp	r6, r3
 8006f3e:	468b      	mov	fp, r1
 8006f40:	f340 80d8 	ble.w	80070f4 <__ieee754_asin+0x32c>
 8006f44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f4c:	f7f9 fbe6 	bl	800071c <__aeabi_ddiv>
 8006f50:	4652      	mov	r2, sl
 8006f52:	465b      	mov	r3, fp
 8006f54:	f7f9 fab8 	bl	80004c8 <__aeabi_dmul>
 8006f58:	4652      	mov	r2, sl
 8006f5a:	465b      	mov	r3, fp
 8006f5c:	f7f9 f8fe 	bl	800015c <__adddf3>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	f7f9 f8fa 	bl	800015c <__adddf3>
 8006f68:	a345      	add	r3, pc, #276	; (adr r3, 8007080 <__ieee754_asin+0x2b8>)
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	f7f9 f8f3 	bl	8000158 <__aeabi_dsub>
 8006f72:	4602      	mov	r2, r0
 8006f74:	460b      	mov	r3, r1
 8006f76:	a140      	add	r1, pc, #256	; (adr r1, 8007078 <__ieee754_asin+0x2b0>)
 8006f78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f7c:	f7f9 f8ec 	bl	8000158 <__aeabi_dsub>
 8006f80:	9b05      	ldr	r3, [sp, #20]
 8006f82:	4604      	mov	r4, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	bfdc      	itt	le
 8006f88:	4602      	movle	r2, r0
 8006f8a:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8006f8e:	460d      	mov	r5, r1
 8006f90:	bfdc      	itt	le
 8006f92:	4614      	movle	r4, r2
 8006f94:	461d      	movle	r5, r3
 8006f96:	e748      	b.n	8006e2a <__ieee754_asin+0x62>
 8006f98:	460b      	mov	r3, r1
 8006f9a:	f7f9 fa95 	bl	80004c8 <__aeabi_dmul>
 8006f9e:	a33c      	add	r3, pc, #240	; (adr r3, 8007090 <__ieee754_asin+0x2c8>)
 8006fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa4:	4606      	mov	r6, r0
 8006fa6:	460f      	mov	r7, r1
 8006fa8:	f7f9 fa8e 	bl	80004c8 <__aeabi_dmul>
 8006fac:	a33a      	add	r3, pc, #232	; (adr r3, 8007098 <__ieee754_asin+0x2d0>)
 8006fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb2:	f7f9 f8d3 	bl	800015c <__adddf3>
 8006fb6:	4632      	mov	r2, r6
 8006fb8:	463b      	mov	r3, r7
 8006fba:	f7f9 fa85 	bl	80004c8 <__aeabi_dmul>
 8006fbe:	a338      	add	r3, pc, #224	; (adr r3, 80070a0 <__ieee754_asin+0x2d8>)
 8006fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc4:	f7f9 f8c8 	bl	8000158 <__aeabi_dsub>
 8006fc8:	4632      	mov	r2, r6
 8006fca:	463b      	mov	r3, r7
 8006fcc:	f7f9 fa7c 	bl	80004c8 <__aeabi_dmul>
 8006fd0:	a335      	add	r3, pc, #212	; (adr r3, 80070a8 <__ieee754_asin+0x2e0>)
 8006fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd6:	f7f9 f8c1 	bl	800015c <__adddf3>
 8006fda:	4632      	mov	r2, r6
 8006fdc:	463b      	mov	r3, r7
 8006fde:	f7f9 fa73 	bl	80004c8 <__aeabi_dmul>
 8006fe2:	a333      	add	r3, pc, #204	; (adr r3, 80070b0 <__ieee754_asin+0x2e8>)
 8006fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe8:	f7f9 f8b6 	bl	8000158 <__aeabi_dsub>
 8006fec:	4632      	mov	r2, r6
 8006fee:	463b      	mov	r3, r7
 8006ff0:	f7f9 fa6a 	bl	80004c8 <__aeabi_dmul>
 8006ff4:	a330      	add	r3, pc, #192	; (adr r3, 80070b8 <__ieee754_asin+0x2f0>)
 8006ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffa:	f7f9 f8af 	bl	800015c <__adddf3>
 8006ffe:	4632      	mov	r2, r6
 8007000:	463b      	mov	r3, r7
 8007002:	f7f9 fa61 	bl	80004c8 <__aeabi_dmul>
 8007006:	a32e      	add	r3, pc, #184	; (adr r3, 80070c0 <__ieee754_asin+0x2f8>)
 8007008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700c:	4680      	mov	r8, r0
 800700e:	4689      	mov	r9, r1
 8007010:	4630      	mov	r0, r6
 8007012:	4639      	mov	r1, r7
 8007014:	f7f9 fa58 	bl	80004c8 <__aeabi_dmul>
 8007018:	a32b      	add	r3, pc, #172	; (adr r3, 80070c8 <__ieee754_asin+0x300>)
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f7f9 f89b 	bl	8000158 <__aeabi_dsub>
 8007022:	4632      	mov	r2, r6
 8007024:	463b      	mov	r3, r7
 8007026:	f7f9 fa4f 	bl	80004c8 <__aeabi_dmul>
 800702a:	a329      	add	r3, pc, #164	; (adr r3, 80070d0 <__ieee754_asin+0x308>)
 800702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007030:	f7f9 f894 	bl	800015c <__adddf3>
 8007034:	4632      	mov	r2, r6
 8007036:	463b      	mov	r3, r7
 8007038:	f7f9 fa46 	bl	80004c8 <__aeabi_dmul>
 800703c:	a326      	add	r3, pc, #152	; (adr r3, 80070d8 <__ieee754_asin+0x310>)
 800703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007042:	f7f9 f889 	bl	8000158 <__aeabi_dsub>
 8007046:	4632      	mov	r2, r6
 8007048:	463b      	mov	r3, r7
 800704a:	f7f9 fa3d 	bl	80004c8 <__aeabi_dmul>
 800704e:	2200      	movs	r2, #0
 8007050:	4b25      	ldr	r3, [pc, #148]	; (80070e8 <__ieee754_asin+0x320>)
 8007052:	f7f9 f883 	bl	800015c <__adddf3>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	4640      	mov	r0, r8
 800705c:	4649      	mov	r1, r9
 800705e:	f7f9 fb5d 	bl	800071c <__aeabi_ddiv>
 8007062:	4622      	mov	r2, r4
 8007064:	462b      	mov	r3, r5
 8007066:	f7f9 fa2f 	bl	80004c8 <__aeabi_dmul>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	4620      	mov	r0, r4
 8007070:	4629      	mov	r1, r5
 8007072:	e6ce      	b.n	8006e12 <__ieee754_asin+0x4a>
 8007074:	f3af 8000 	nop.w
 8007078:	54442d18 	.word	0x54442d18
 800707c:	3ff921fb 	.word	0x3ff921fb
 8007080:	33145c07 	.word	0x33145c07
 8007084:	3c91a626 	.word	0x3c91a626
 8007088:	8800759c 	.word	0x8800759c
 800708c:	7e37e43c 	.word	0x7e37e43c
 8007090:	0dfdf709 	.word	0x0dfdf709
 8007094:	3f023de1 	.word	0x3f023de1
 8007098:	7501b288 	.word	0x7501b288
 800709c:	3f49efe0 	.word	0x3f49efe0
 80070a0:	b5688f3b 	.word	0xb5688f3b
 80070a4:	3fa48228 	.word	0x3fa48228
 80070a8:	0e884455 	.word	0x0e884455
 80070ac:	3fc9c155 	.word	0x3fc9c155
 80070b0:	03eb6f7d 	.word	0x03eb6f7d
 80070b4:	3fd4d612 	.word	0x3fd4d612
 80070b8:	55555555 	.word	0x55555555
 80070bc:	3fc55555 	.word	0x3fc55555
 80070c0:	b12e9282 	.word	0xb12e9282
 80070c4:	3fb3b8c5 	.word	0x3fb3b8c5
 80070c8:	1b8d0159 	.word	0x1b8d0159
 80070cc:	3fe6066c 	.word	0x3fe6066c
 80070d0:	9c598ac8 	.word	0x9c598ac8
 80070d4:	40002ae5 	.word	0x40002ae5
 80070d8:	1c8a2d4b 	.word	0x1c8a2d4b
 80070dc:	40033a27 	.word	0x40033a27
 80070e0:	3fefffff 	.word	0x3fefffff
 80070e4:	3fdfffff 	.word	0x3fdfffff
 80070e8:	3ff00000 	.word	0x3ff00000
 80070ec:	3fe00000 	.word	0x3fe00000
 80070f0:	3fef3332 	.word	0x3fef3332
 80070f4:	4602      	mov	r2, r0
 80070f6:	460b      	mov	r3, r1
 80070f8:	f7f9 f830 	bl	800015c <__adddf3>
 80070fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007100:	4606      	mov	r6, r0
 8007102:	460f      	mov	r7, r1
 8007104:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007108:	f7f9 fb08 	bl	800071c <__aeabi_ddiv>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	4630      	mov	r0, r6
 8007112:	4639      	mov	r1, r7
 8007114:	f7f9 f9d8 	bl	80004c8 <__aeabi_dmul>
 8007118:	f04f 0800 	mov.w	r8, #0
 800711c:	4606      	mov	r6, r0
 800711e:	460f      	mov	r7, r1
 8007120:	4642      	mov	r2, r8
 8007122:	465b      	mov	r3, fp
 8007124:	4640      	mov	r0, r8
 8007126:	4659      	mov	r1, fp
 8007128:	f7f9 f9ce 	bl	80004c8 <__aeabi_dmul>
 800712c:	4602      	mov	r2, r0
 800712e:	460b      	mov	r3, r1
 8007130:	4620      	mov	r0, r4
 8007132:	4629      	mov	r1, r5
 8007134:	f7f9 f810 	bl	8000158 <__aeabi_dsub>
 8007138:	4642      	mov	r2, r8
 800713a:	4604      	mov	r4, r0
 800713c:	460d      	mov	r5, r1
 800713e:	465b      	mov	r3, fp
 8007140:	4650      	mov	r0, sl
 8007142:	4659      	mov	r1, fp
 8007144:	f7f9 f80a 	bl	800015c <__adddf3>
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	4620      	mov	r0, r4
 800714e:	4629      	mov	r1, r5
 8007150:	f7f9 fae4 	bl	800071c <__aeabi_ddiv>
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	f7f9 f800 	bl	800015c <__adddf3>
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	a113      	add	r1, pc, #76	; (adr r1, 80071b0 <__ieee754_asin+0x3e8>)
 8007162:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007166:	f7f8 fff7 	bl	8000158 <__aeabi_dsub>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	4630      	mov	r0, r6
 8007170:	4639      	mov	r1, r7
 8007172:	f7f8 fff1 	bl	8000158 <__aeabi_dsub>
 8007176:	4642      	mov	r2, r8
 8007178:	4604      	mov	r4, r0
 800717a:	460d      	mov	r5, r1
 800717c:	465b      	mov	r3, fp
 800717e:	4640      	mov	r0, r8
 8007180:	4659      	mov	r1, fp
 8007182:	f7f8 ffeb 	bl	800015c <__adddf3>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	a10b      	add	r1, pc, #44	; (adr r1, 80071b8 <__ieee754_asin+0x3f0>)
 800718c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007190:	f7f8 ffe2 	bl	8000158 <__aeabi_dsub>
 8007194:	4602      	mov	r2, r0
 8007196:	460b      	mov	r3, r1
 8007198:	4620      	mov	r0, r4
 800719a:	4629      	mov	r1, r5
 800719c:	f7f8 ffdc 	bl	8000158 <__aeabi_dsub>
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	a104      	add	r1, pc, #16	; (adr r1, 80071b8 <__ieee754_asin+0x3f0>)
 80071a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071aa:	e6e7      	b.n	8006f7c <__ieee754_asin+0x1b4>
 80071ac:	f3af 8000 	nop.w
 80071b0:	33145c07 	.word	0x33145c07
 80071b4:	3c91a626 	.word	0x3c91a626
 80071b8:	54442d18 	.word	0x54442d18
 80071bc:	3fe921fb 	.word	0x3fe921fb

080071c0 <__ieee754_rem_pio2>:
 80071c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	4614      	mov	r4, r2
 80071c6:	4ac4      	ldr	r2, [pc, #784]	; (80074d8 <__ieee754_rem_pio2+0x318>)
 80071c8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80071cc:	b08d      	sub	sp, #52	; 0x34
 80071ce:	4592      	cmp	sl, r2
 80071d0:	9104      	str	r1, [sp, #16]
 80071d2:	dc07      	bgt.n	80071e4 <__ieee754_rem_pio2+0x24>
 80071d4:	2200      	movs	r2, #0
 80071d6:	2300      	movs	r3, #0
 80071d8:	e9c4 0100 	strd	r0, r1, [r4]
 80071dc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80071e0:	2500      	movs	r5, #0
 80071e2:	e024      	b.n	800722e <__ieee754_rem_pio2+0x6e>
 80071e4:	4abd      	ldr	r2, [pc, #756]	; (80074dc <__ieee754_rem_pio2+0x31c>)
 80071e6:	4592      	cmp	sl, r2
 80071e8:	dc72      	bgt.n	80072d0 <__ieee754_rem_pio2+0x110>
 80071ea:	9b04      	ldr	r3, [sp, #16]
 80071ec:	4dbc      	ldr	r5, [pc, #752]	; (80074e0 <__ieee754_rem_pio2+0x320>)
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	a3ab      	add	r3, pc, #684	; (adr r3, 80074a0 <__ieee754_rem_pio2+0x2e0>)
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	dd36      	ble.n	8007266 <__ieee754_rem_pio2+0xa6>
 80071f8:	f7f8 ffae 	bl	8000158 <__aeabi_dsub>
 80071fc:	45aa      	cmp	sl, r5
 80071fe:	4606      	mov	r6, r0
 8007200:	460f      	mov	r7, r1
 8007202:	d018      	beq.n	8007236 <__ieee754_rem_pio2+0x76>
 8007204:	a3a8      	add	r3, pc, #672	; (adr r3, 80074a8 <__ieee754_rem_pio2+0x2e8>)
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	f7f8 ffa5 	bl	8000158 <__aeabi_dsub>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4630      	mov	r0, r6
 8007214:	e9c4 2300 	strd	r2, r3, [r4]
 8007218:	4639      	mov	r1, r7
 800721a:	f7f8 ff9d 	bl	8000158 <__aeabi_dsub>
 800721e:	a3a2      	add	r3, pc, #648	; (adr r3, 80074a8 <__ieee754_rem_pio2+0x2e8>)
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f7f8 ff98 	bl	8000158 <__aeabi_dsub>
 8007228:	2501      	movs	r5, #1
 800722a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800722e:	4628      	mov	r0, r5
 8007230:	b00d      	add	sp, #52	; 0x34
 8007232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007236:	a39e      	add	r3, pc, #632	; (adr r3, 80074b0 <__ieee754_rem_pio2+0x2f0>)
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	f7f8 ff8c 	bl	8000158 <__aeabi_dsub>
 8007240:	a39d      	add	r3, pc, #628	; (adr r3, 80074b8 <__ieee754_rem_pio2+0x2f8>)
 8007242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007246:	4606      	mov	r6, r0
 8007248:	460f      	mov	r7, r1
 800724a:	f7f8 ff85 	bl	8000158 <__aeabi_dsub>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	4630      	mov	r0, r6
 8007254:	e9c4 2300 	strd	r2, r3, [r4]
 8007258:	4639      	mov	r1, r7
 800725a:	f7f8 ff7d 	bl	8000158 <__aeabi_dsub>
 800725e:	a396      	add	r3, pc, #600	; (adr r3, 80074b8 <__ieee754_rem_pio2+0x2f8>)
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	e7de      	b.n	8007224 <__ieee754_rem_pio2+0x64>
 8007266:	f7f8 ff79 	bl	800015c <__adddf3>
 800726a:	45aa      	cmp	sl, r5
 800726c:	4606      	mov	r6, r0
 800726e:	460f      	mov	r7, r1
 8007270:	d016      	beq.n	80072a0 <__ieee754_rem_pio2+0xe0>
 8007272:	a38d      	add	r3, pc, #564	; (adr r3, 80074a8 <__ieee754_rem_pio2+0x2e8>)
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	f7f8 ff70 	bl	800015c <__adddf3>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4630      	mov	r0, r6
 8007282:	e9c4 2300 	strd	r2, r3, [r4]
 8007286:	4639      	mov	r1, r7
 8007288:	f7f8 ff66 	bl	8000158 <__aeabi_dsub>
 800728c:	a386      	add	r3, pc, #536	; (adr r3, 80074a8 <__ieee754_rem_pio2+0x2e8>)
 800728e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007292:	f7f8 ff63 	bl	800015c <__adddf3>
 8007296:	f04f 35ff 	mov.w	r5, #4294967295
 800729a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800729e:	e7c6      	b.n	800722e <__ieee754_rem_pio2+0x6e>
 80072a0:	a383      	add	r3, pc, #524	; (adr r3, 80074b0 <__ieee754_rem_pio2+0x2f0>)
 80072a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a6:	f7f8 ff59 	bl	800015c <__adddf3>
 80072aa:	a383      	add	r3, pc, #524	; (adr r3, 80074b8 <__ieee754_rem_pio2+0x2f8>)
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	4606      	mov	r6, r0
 80072b2:	460f      	mov	r7, r1
 80072b4:	f7f8 ff52 	bl	800015c <__adddf3>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	4630      	mov	r0, r6
 80072be:	e9c4 2300 	strd	r2, r3, [r4]
 80072c2:	4639      	mov	r1, r7
 80072c4:	f7f8 ff48 	bl	8000158 <__aeabi_dsub>
 80072c8:	a37b      	add	r3, pc, #492	; (adr r3, 80074b8 <__ieee754_rem_pio2+0x2f8>)
 80072ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ce:	e7e0      	b.n	8007292 <__ieee754_rem_pio2+0xd2>
 80072d0:	4a84      	ldr	r2, [pc, #528]	; (80074e4 <__ieee754_rem_pio2+0x324>)
 80072d2:	4592      	cmp	sl, r2
 80072d4:	f300 80d5 	bgt.w	8007482 <__ieee754_rem_pio2+0x2c2>
 80072d8:	f000 fed0 	bl	800807c <fabs>
 80072dc:	a378      	add	r3, pc, #480	; (adr r3, 80074c0 <__ieee754_rem_pio2+0x300>)
 80072de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e2:	4606      	mov	r6, r0
 80072e4:	460f      	mov	r7, r1
 80072e6:	f7f9 f8ef 	bl	80004c8 <__aeabi_dmul>
 80072ea:	2200      	movs	r2, #0
 80072ec:	4b7e      	ldr	r3, [pc, #504]	; (80074e8 <__ieee754_rem_pio2+0x328>)
 80072ee:	f7f8 ff35 	bl	800015c <__adddf3>
 80072f2:	f7f9 fb99 	bl	8000a28 <__aeabi_d2iz>
 80072f6:	4605      	mov	r5, r0
 80072f8:	f7f9 f87c 	bl	80003f4 <__aeabi_i2d>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007304:	a366      	add	r3, pc, #408	; (adr r3, 80074a0 <__ieee754_rem_pio2+0x2e0>)
 8007306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730a:	f7f9 f8dd 	bl	80004c8 <__aeabi_dmul>
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	4630      	mov	r0, r6
 8007314:	4639      	mov	r1, r7
 8007316:	f7f8 ff1f 	bl	8000158 <__aeabi_dsub>
 800731a:	a363      	add	r3, pc, #396	; (adr r3, 80074a8 <__ieee754_rem_pio2+0x2e8>)
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	4680      	mov	r8, r0
 8007322:	4689      	mov	r9, r1
 8007324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007328:	f7f9 f8ce 	bl	80004c8 <__aeabi_dmul>
 800732c:	2d1f      	cmp	r5, #31
 800732e:	4606      	mov	r6, r0
 8007330:	460f      	mov	r7, r1
 8007332:	dc0e      	bgt.n	8007352 <__ieee754_rem_pio2+0x192>
 8007334:	4b6d      	ldr	r3, [pc, #436]	; (80074ec <__ieee754_rem_pio2+0x32c>)
 8007336:	1e6a      	subs	r2, r5, #1
 8007338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733c:	4553      	cmp	r3, sl
 800733e:	d008      	beq.n	8007352 <__ieee754_rem_pio2+0x192>
 8007340:	4632      	mov	r2, r6
 8007342:	463b      	mov	r3, r7
 8007344:	4640      	mov	r0, r8
 8007346:	4649      	mov	r1, r9
 8007348:	f7f8 ff06 	bl	8000158 <__aeabi_dsub>
 800734c:	e9c4 0100 	strd	r0, r1, [r4]
 8007350:	e013      	b.n	800737a <__ieee754_rem_pio2+0x1ba>
 8007352:	463b      	mov	r3, r7
 8007354:	4632      	mov	r2, r6
 8007356:	4640      	mov	r0, r8
 8007358:	4649      	mov	r1, r9
 800735a:	f7f8 fefd 	bl	8000158 <__aeabi_dsub>
 800735e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8007362:	9305      	str	r3, [sp, #20]
 8007364:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007368:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800736c:	f1ba 0f10 	cmp.w	sl, #16
 8007370:	dc1f      	bgt.n	80073b2 <__ieee754_rem_pio2+0x1f2>
 8007372:	4602      	mov	r2, r0
 8007374:	460b      	mov	r3, r1
 8007376:	e9c4 2300 	strd	r2, r3, [r4]
 800737a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800737e:	4640      	mov	r0, r8
 8007380:	4653      	mov	r3, sl
 8007382:	4649      	mov	r1, r9
 8007384:	f7f8 fee8 	bl	8000158 <__aeabi_dsub>
 8007388:	4632      	mov	r2, r6
 800738a:	463b      	mov	r3, r7
 800738c:	f7f8 fee4 	bl	8000158 <__aeabi_dsub>
 8007390:	460b      	mov	r3, r1
 8007392:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007396:	9904      	ldr	r1, [sp, #16]
 8007398:	4602      	mov	r2, r0
 800739a:	2900      	cmp	r1, #0
 800739c:	f6bf af47 	bge.w	800722e <__ieee754_rem_pio2+0x6e>
 80073a0:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80073a4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80073a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80073ac:	60e3      	str	r3, [r4, #12]
 80073ae:	426d      	negs	r5, r5
 80073b0:	e73d      	b.n	800722e <__ieee754_rem_pio2+0x6e>
 80073b2:	a33f      	add	r3, pc, #252	; (adr r3, 80074b0 <__ieee754_rem_pio2+0x2f0>)
 80073b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073bc:	f7f9 f884 	bl	80004c8 <__aeabi_dmul>
 80073c0:	4606      	mov	r6, r0
 80073c2:	460f      	mov	r7, r1
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	4640      	mov	r0, r8
 80073ca:	4649      	mov	r1, r9
 80073cc:	f7f8 fec4 	bl	8000158 <__aeabi_dsub>
 80073d0:	4602      	mov	r2, r0
 80073d2:	460b      	mov	r3, r1
 80073d4:	4682      	mov	sl, r0
 80073d6:	468b      	mov	fp, r1
 80073d8:	4640      	mov	r0, r8
 80073da:	4649      	mov	r1, r9
 80073dc:	f7f8 febc 	bl	8000158 <__aeabi_dsub>
 80073e0:	4632      	mov	r2, r6
 80073e2:	463b      	mov	r3, r7
 80073e4:	f7f8 feb8 	bl	8000158 <__aeabi_dsub>
 80073e8:	a333      	add	r3, pc, #204	; (adr r3, 80074b8 <__ieee754_rem_pio2+0x2f8>)
 80073ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ee:	4606      	mov	r6, r0
 80073f0:	460f      	mov	r7, r1
 80073f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073f6:	f7f9 f867 	bl	80004c8 <__aeabi_dmul>
 80073fa:	4632      	mov	r2, r6
 80073fc:	463b      	mov	r3, r7
 80073fe:	f7f8 feab 	bl	8000158 <__aeabi_dsub>
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	4606      	mov	r6, r0
 8007408:	460f      	mov	r7, r1
 800740a:	4650      	mov	r0, sl
 800740c:	4659      	mov	r1, fp
 800740e:	f7f8 fea3 	bl	8000158 <__aeabi_dsub>
 8007412:	9a05      	ldr	r2, [sp, #20]
 8007414:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	2b31      	cmp	r3, #49	; 0x31
 800741c:	dc06      	bgt.n	800742c <__ieee754_rem_pio2+0x26c>
 800741e:	4602      	mov	r2, r0
 8007420:	460b      	mov	r3, r1
 8007422:	46d0      	mov	r8, sl
 8007424:	46d9      	mov	r9, fp
 8007426:	e9c4 2300 	strd	r2, r3, [r4]
 800742a:	e7a6      	b.n	800737a <__ieee754_rem_pio2+0x1ba>
 800742c:	a326      	add	r3, pc, #152	; (adr r3, 80074c8 <__ieee754_rem_pio2+0x308>)
 800742e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007436:	f7f9 f847 	bl	80004c8 <__aeabi_dmul>
 800743a:	4606      	mov	r6, r0
 800743c:	460f      	mov	r7, r1
 800743e:	4602      	mov	r2, r0
 8007440:	460b      	mov	r3, r1
 8007442:	4650      	mov	r0, sl
 8007444:	4659      	mov	r1, fp
 8007446:	f7f8 fe87 	bl	8000158 <__aeabi_dsub>
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	4680      	mov	r8, r0
 8007450:	4689      	mov	r9, r1
 8007452:	4650      	mov	r0, sl
 8007454:	4659      	mov	r1, fp
 8007456:	f7f8 fe7f 	bl	8000158 <__aeabi_dsub>
 800745a:	4632      	mov	r2, r6
 800745c:	463b      	mov	r3, r7
 800745e:	f7f8 fe7b 	bl	8000158 <__aeabi_dsub>
 8007462:	a31b      	add	r3, pc, #108	; (adr r3, 80074d0 <__ieee754_rem_pio2+0x310>)
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	4606      	mov	r6, r0
 800746a:	460f      	mov	r7, r1
 800746c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007470:	f7f9 f82a 	bl	80004c8 <__aeabi_dmul>
 8007474:	4632      	mov	r2, r6
 8007476:	463b      	mov	r3, r7
 8007478:	f7f8 fe6e 	bl	8000158 <__aeabi_dsub>
 800747c:	4606      	mov	r6, r0
 800747e:	460f      	mov	r7, r1
 8007480:	e75e      	b.n	8007340 <__ieee754_rem_pio2+0x180>
 8007482:	4a1b      	ldr	r2, [pc, #108]	; (80074f0 <__ieee754_rem_pio2+0x330>)
 8007484:	4592      	cmp	sl, r2
 8007486:	dd35      	ble.n	80074f4 <__ieee754_rem_pio2+0x334>
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	f7f8 fe64 	bl	8000158 <__aeabi_dsub>
 8007490:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007494:	e9c4 0100 	strd	r0, r1, [r4]
 8007498:	e6a2      	b.n	80071e0 <__ieee754_rem_pio2+0x20>
 800749a:	bf00      	nop
 800749c:	f3af 8000 	nop.w
 80074a0:	54400000 	.word	0x54400000
 80074a4:	3ff921fb 	.word	0x3ff921fb
 80074a8:	1a626331 	.word	0x1a626331
 80074ac:	3dd0b461 	.word	0x3dd0b461
 80074b0:	1a600000 	.word	0x1a600000
 80074b4:	3dd0b461 	.word	0x3dd0b461
 80074b8:	2e037073 	.word	0x2e037073
 80074bc:	3ba3198a 	.word	0x3ba3198a
 80074c0:	6dc9c883 	.word	0x6dc9c883
 80074c4:	3fe45f30 	.word	0x3fe45f30
 80074c8:	2e000000 	.word	0x2e000000
 80074cc:	3ba3198a 	.word	0x3ba3198a
 80074d0:	252049c1 	.word	0x252049c1
 80074d4:	397b839a 	.word	0x397b839a
 80074d8:	3fe921fb 	.word	0x3fe921fb
 80074dc:	4002d97b 	.word	0x4002d97b
 80074e0:	3ff921fb 	.word	0x3ff921fb
 80074e4:	413921fb 	.word	0x413921fb
 80074e8:	3fe00000 	.word	0x3fe00000
 80074ec:	080082dc 	.word	0x080082dc
 80074f0:	7fefffff 	.word	0x7fefffff
 80074f4:	ea4f 552a 	mov.w	r5, sl, asr #20
 80074f8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80074fc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8007500:	460f      	mov	r7, r1
 8007502:	4606      	mov	r6, r0
 8007504:	f7f9 fa90 	bl	8000a28 <__aeabi_d2iz>
 8007508:	f7f8 ff74 	bl	80003f4 <__aeabi_i2d>
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	4630      	mov	r0, r6
 8007512:	4639      	mov	r1, r7
 8007514:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007518:	f7f8 fe1e 	bl	8000158 <__aeabi_dsub>
 800751c:	2200      	movs	r2, #0
 800751e:	4b22      	ldr	r3, [pc, #136]	; (80075a8 <__ieee754_rem_pio2+0x3e8>)
 8007520:	f7f8 ffd2 	bl	80004c8 <__aeabi_dmul>
 8007524:	460f      	mov	r7, r1
 8007526:	4606      	mov	r6, r0
 8007528:	f7f9 fa7e 	bl	8000a28 <__aeabi_d2iz>
 800752c:	f7f8 ff62 	bl	80003f4 <__aeabi_i2d>
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	4630      	mov	r0, r6
 8007536:	4639      	mov	r1, r7
 8007538:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800753c:	f7f8 fe0c 	bl	8000158 <__aeabi_dsub>
 8007540:	2200      	movs	r2, #0
 8007542:	4b19      	ldr	r3, [pc, #100]	; (80075a8 <__ieee754_rem_pio2+0x3e8>)
 8007544:	f7f8 ffc0 	bl	80004c8 <__aeabi_dmul>
 8007548:	f04f 0803 	mov.w	r8, #3
 800754c:	2600      	movs	r6, #0
 800754e:	2700      	movs	r7, #0
 8007550:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007554:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8007558:	4632      	mov	r2, r6
 800755a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800755e:	463b      	mov	r3, r7
 8007560:	46c2      	mov	sl, r8
 8007562:	f108 38ff 	add.w	r8, r8, #4294967295
 8007566:	f7f9 fa17 	bl	8000998 <__aeabi_dcmpeq>
 800756a:	2800      	cmp	r0, #0
 800756c:	d1f4      	bne.n	8007558 <__ieee754_rem_pio2+0x398>
 800756e:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <__ieee754_rem_pio2+0x3ec>)
 8007570:	462a      	mov	r2, r5
 8007572:	9301      	str	r3, [sp, #4]
 8007574:	2302      	movs	r3, #2
 8007576:	4621      	mov	r1, r4
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	a806      	add	r0, sp, #24
 800757c:	4653      	mov	r3, sl
 800757e:	f000 f985 	bl	800788c <__kernel_rem_pio2>
 8007582:	9b04      	ldr	r3, [sp, #16]
 8007584:	4605      	mov	r5, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	f6bf ae51 	bge.w	800722e <__ieee754_rem_pio2+0x6e>
 800758c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8007590:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007594:	e9c4 2300 	strd	r2, r3, [r4]
 8007598:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800759c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075a0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80075a4:	e703      	b.n	80073ae <__ieee754_rem_pio2+0x1ee>
 80075a6:	bf00      	nop
 80075a8:	41700000 	.word	0x41700000
 80075ac:	0800835c 	.word	0x0800835c

080075b0 <__ieee754_sqrt>:
 80075b0:	f8df c158 	ldr.w	ip, [pc, #344]	; 800770c <__ieee754_sqrt+0x15c>
 80075b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b8:	ea3c 0c01 	bics.w	ip, ip, r1
 80075bc:	4606      	mov	r6, r0
 80075be:	460d      	mov	r5, r1
 80075c0:	460c      	mov	r4, r1
 80075c2:	460a      	mov	r2, r1
 80075c4:	4607      	mov	r7, r0
 80075c6:	4603      	mov	r3, r0
 80075c8:	d10f      	bne.n	80075ea <__ieee754_sqrt+0x3a>
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	f7f8 ff7b 	bl	80004c8 <__aeabi_dmul>
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
 80075d6:	4630      	mov	r0, r6
 80075d8:	4629      	mov	r1, r5
 80075da:	f7f8 fdbf 	bl	800015c <__adddf3>
 80075de:	4606      	mov	r6, r0
 80075e0:	460d      	mov	r5, r1
 80075e2:	4630      	mov	r0, r6
 80075e4:	4629      	mov	r1, r5
 80075e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ea:	2900      	cmp	r1, #0
 80075ec:	dc0e      	bgt.n	800760c <__ieee754_sqrt+0x5c>
 80075ee:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80075f2:	ea5c 0707 	orrs.w	r7, ip, r7
 80075f6:	d0f4      	beq.n	80075e2 <__ieee754_sqrt+0x32>
 80075f8:	b141      	cbz	r1, 800760c <__ieee754_sqrt+0x5c>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	f7f8 fdab 	bl	8000158 <__aeabi_dsub>
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	f7f9 f889 	bl	800071c <__aeabi_ddiv>
 800760a:	e7e8      	b.n	80075de <__ieee754_sqrt+0x2e>
 800760c:	1521      	asrs	r1, r4, #20
 800760e:	d075      	beq.n	80076fc <__ieee754_sqrt+0x14c>
 8007610:	07cc      	lsls	r4, r1, #31
 8007612:	f04f 0400 	mov.w	r4, #0
 8007616:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800761a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800761e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007622:	bf5e      	ittt	pl
 8007624:	0fd9      	lsrpl	r1, r3, #31
 8007626:	005b      	lslpl	r3, r3, #1
 8007628:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800762c:	0fd9      	lsrs	r1, r3, #31
 800762e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8007632:	2516      	movs	r5, #22
 8007634:	4620      	mov	r0, r4
 8007636:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800763a:	107f      	asrs	r7, r7, #1
 800763c:	005b      	lsls	r3, r3, #1
 800763e:	1846      	adds	r6, r0, r1
 8007640:	4296      	cmp	r6, r2
 8007642:	bfde      	ittt	le
 8007644:	1b92      	suble	r2, r2, r6
 8007646:	1870      	addle	r0, r6, r1
 8007648:	1864      	addle	r4, r4, r1
 800764a:	0052      	lsls	r2, r2, #1
 800764c:	3d01      	subs	r5, #1
 800764e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007652:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007656:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800765a:	d1f0      	bne.n	800763e <__ieee754_sqrt+0x8e>
 800765c:	4629      	mov	r1, r5
 800765e:	f04f 0e20 	mov.w	lr, #32
 8007662:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007666:	4282      	cmp	r2, r0
 8007668:	eb06 0c05 	add.w	ip, r6, r5
 800766c:	dc02      	bgt.n	8007674 <__ieee754_sqrt+0xc4>
 800766e:	d113      	bne.n	8007698 <__ieee754_sqrt+0xe8>
 8007670:	459c      	cmp	ip, r3
 8007672:	d811      	bhi.n	8007698 <__ieee754_sqrt+0xe8>
 8007674:	f1bc 0f00 	cmp.w	ip, #0
 8007678:	eb0c 0506 	add.w	r5, ip, r6
 800767c:	da43      	bge.n	8007706 <__ieee754_sqrt+0x156>
 800767e:	2d00      	cmp	r5, #0
 8007680:	db41      	blt.n	8007706 <__ieee754_sqrt+0x156>
 8007682:	f100 0801 	add.w	r8, r0, #1
 8007686:	1a12      	subs	r2, r2, r0
 8007688:	4640      	mov	r0, r8
 800768a:	459c      	cmp	ip, r3
 800768c:	bf88      	it	hi
 800768e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007692:	eba3 030c 	sub.w	r3, r3, ip
 8007696:	4431      	add	r1, r6
 8007698:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800769c:	f1be 0e01 	subs.w	lr, lr, #1
 80076a0:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80076a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80076a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80076ac:	d1db      	bne.n	8007666 <__ieee754_sqrt+0xb6>
 80076ae:	4313      	orrs	r3, r2
 80076b0:	d006      	beq.n	80076c0 <__ieee754_sqrt+0x110>
 80076b2:	1c48      	adds	r0, r1, #1
 80076b4:	bf0b      	itete	eq
 80076b6:	4671      	moveq	r1, lr
 80076b8:	3101      	addne	r1, #1
 80076ba:	3401      	addeq	r4, #1
 80076bc:	f021 0101 	bicne.w	r1, r1, #1
 80076c0:	1063      	asrs	r3, r4, #1
 80076c2:	0849      	lsrs	r1, r1, #1
 80076c4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80076c8:	07e2      	lsls	r2, r4, #31
 80076ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80076ce:	bf48      	it	mi
 80076d0:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80076d4:	460e      	mov	r6, r1
 80076d6:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80076da:	e782      	b.n	80075e2 <__ieee754_sqrt+0x32>
 80076dc:	0ada      	lsrs	r2, r3, #11
 80076de:	3815      	subs	r0, #21
 80076e0:	055b      	lsls	r3, r3, #21
 80076e2:	2a00      	cmp	r2, #0
 80076e4:	d0fa      	beq.n	80076dc <__ieee754_sqrt+0x12c>
 80076e6:	02d5      	lsls	r5, r2, #11
 80076e8:	d50a      	bpl.n	8007700 <__ieee754_sqrt+0x150>
 80076ea:	f1c1 0420 	rsb	r4, r1, #32
 80076ee:	fa23 f404 	lsr.w	r4, r3, r4
 80076f2:	1e4d      	subs	r5, r1, #1
 80076f4:	408b      	lsls	r3, r1
 80076f6:	4322      	orrs	r2, r4
 80076f8:	1b41      	subs	r1, r0, r5
 80076fa:	e789      	b.n	8007610 <__ieee754_sqrt+0x60>
 80076fc:	4608      	mov	r0, r1
 80076fe:	e7f0      	b.n	80076e2 <__ieee754_sqrt+0x132>
 8007700:	0052      	lsls	r2, r2, #1
 8007702:	3101      	adds	r1, #1
 8007704:	e7ef      	b.n	80076e6 <__ieee754_sqrt+0x136>
 8007706:	4680      	mov	r8, r0
 8007708:	e7bd      	b.n	8007686 <__ieee754_sqrt+0xd6>
 800770a:	bf00      	nop
 800770c:	7ff00000 	.word	0x7ff00000

08007710 <__kernel_cos>:
 8007710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007714:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007718:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800771c:	4680      	mov	r8, r0
 800771e:	460f      	mov	r7, r1
 8007720:	e9cd 2300 	strd	r2, r3, [sp]
 8007724:	da04      	bge.n	8007730 <__kernel_cos+0x20>
 8007726:	f7f9 f97f 	bl	8000a28 <__aeabi_d2iz>
 800772a:	2800      	cmp	r0, #0
 800772c:	f000 8086 	beq.w	800783c <__kernel_cos+0x12c>
 8007730:	4642      	mov	r2, r8
 8007732:	463b      	mov	r3, r7
 8007734:	4640      	mov	r0, r8
 8007736:	4639      	mov	r1, r7
 8007738:	f7f8 fec6 	bl	80004c8 <__aeabi_dmul>
 800773c:	2200      	movs	r2, #0
 800773e:	4b4e      	ldr	r3, [pc, #312]	; (8007878 <__kernel_cos+0x168>)
 8007740:	4604      	mov	r4, r0
 8007742:	460d      	mov	r5, r1
 8007744:	f7f8 fec0 	bl	80004c8 <__aeabi_dmul>
 8007748:	a33f      	add	r3, pc, #252	; (adr r3, 8007848 <__kernel_cos+0x138>)
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	4682      	mov	sl, r0
 8007750:	468b      	mov	fp, r1
 8007752:	4620      	mov	r0, r4
 8007754:	4629      	mov	r1, r5
 8007756:	f7f8 feb7 	bl	80004c8 <__aeabi_dmul>
 800775a:	a33d      	add	r3, pc, #244	; (adr r3, 8007850 <__kernel_cos+0x140>)
 800775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007760:	f7f8 fcfc 	bl	800015c <__adddf3>
 8007764:	4622      	mov	r2, r4
 8007766:	462b      	mov	r3, r5
 8007768:	f7f8 feae 	bl	80004c8 <__aeabi_dmul>
 800776c:	a33a      	add	r3, pc, #232	; (adr r3, 8007858 <__kernel_cos+0x148>)
 800776e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007772:	f7f8 fcf1 	bl	8000158 <__aeabi_dsub>
 8007776:	4622      	mov	r2, r4
 8007778:	462b      	mov	r3, r5
 800777a:	f7f8 fea5 	bl	80004c8 <__aeabi_dmul>
 800777e:	a338      	add	r3, pc, #224	; (adr r3, 8007860 <__kernel_cos+0x150>)
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	f7f8 fcea 	bl	800015c <__adddf3>
 8007788:	4622      	mov	r2, r4
 800778a:	462b      	mov	r3, r5
 800778c:	f7f8 fe9c 	bl	80004c8 <__aeabi_dmul>
 8007790:	a335      	add	r3, pc, #212	; (adr r3, 8007868 <__kernel_cos+0x158>)
 8007792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007796:	f7f8 fcdf 	bl	8000158 <__aeabi_dsub>
 800779a:	4622      	mov	r2, r4
 800779c:	462b      	mov	r3, r5
 800779e:	f7f8 fe93 	bl	80004c8 <__aeabi_dmul>
 80077a2:	a333      	add	r3, pc, #204	; (adr r3, 8007870 <__kernel_cos+0x160>)
 80077a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a8:	f7f8 fcd8 	bl	800015c <__adddf3>
 80077ac:	4622      	mov	r2, r4
 80077ae:	462b      	mov	r3, r5
 80077b0:	f7f8 fe8a 	bl	80004c8 <__aeabi_dmul>
 80077b4:	4622      	mov	r2, r4
 80077b6:	462b      	mov	r3, r5
 80077b8:	f7f8 fe86 	bl	80004c8 <__aeabi_dmul>
 80077bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077c0:	4604      	mov	r4, r0
 80077c2:	460d      	mov	r5, r1
 80077c4:	4640      	mov	r0, r8
 80077c6:	4639      	mov	r1, r7
 80077c8:	f7f8 fe7e 	bl	80004c8 <__aeabi_dmul>
 80077cc:	460b      	mov	r3, r1
 80077ce:	4602      	mov	r2, r0
 80077d0:	4629      	mov	r1, r5
 80077d2:	4620      	mov	r0, r4
 80077d4:	f7f8 fcc0 	bl	8000158 <__aeabi_dsub>
 80077d8:	4b28      	ldr	r3, [pc, #160]	; (800787c <__kernel_cos+0x16c>)
 80077da:	4680      	mov	r8, r0
 80077dc:	429e      	cmp	r6, r3
 80077de:	4689      	mov	r9, r1
 80077e0:	dc0e      	bgt.n	8007800 <__kernel_cos+0xf0>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	4650      	mov	r0, sl
 80077e8:	4659      	mov	r1, fp
 80077ea:	f7f8 fcb5 	bl	8000158 <__aeabi_dsub>
 80077ee:	4602      	mov	r2, r0
 80077f0:	2000      	movs	r0, #0
 80077f2:	460b      	mov	r3, r1
 80077f4:	4922      	ldr	r1, [pc, #136]	; (8007880 <__kernel_cos+0x170>)
 80077f6:	f7f8 fcaf 	bl	8000158 <__aeabi_dsub>
 80077fa:	b003      	add	sp, #12
 80077fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007800:	2400      	movs	r4, #0
 8007802:	4b20      	ldr	r3, [pc, #128]	; (8007884 <__kernel_cos+0x174>)
 8007804:	4622      	mov	r2, r4
 8007806:	429e      	cmp	r6, r3
 8007808:	bfcc      	ite	gt
 800780a:	4d1f      	ldrgt	r5, [pc, #124]	; (8007888 <__kernel_cos+0x178>)
 800780c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8007810:	462b      	mov	r3, r5
 8007812:	2000      	movs	r0, #0
 8007814:	491a      	ldr	r1, [pc, #104]	; (8007880 <__kernel_cos+0x170>)
 8007816:	f7f8 fc9f 	bl	8000158 <__aeabi_dsub>
 800781a:	4622      	mov	r2, r4
 800781c:	4606      	mov	r6, r0
 800781e:	460f      	mov	r7, r1
 8007820:	462b      	mov	r3, r5
 8007822:	4650      	mov	r0, sl
 8007824:	4659      	mov	r1, fp
 8007826:	f7f8 fc97 	bl	8000158 <__aeabi_dsub>
 800782a:	4642      	mov	r2, r8
 800782c:	464b      	mov	r3, r9
 800782e:	f7f8 fc93 	bl	8000158 <__aeabi_dsub>
 8007832:	4602      	mov	r2, r0
 8007834:	460b      	mov	r3, r1
 8007836:	4630      	mov	r0, r6
 8007838:	4639      	mov	r1, r7
 800783a:	e7dc      	b.n	80077f6 <__kernel_cos+0xe6>
 800783c:	2000      	movs	r0, #0
 800783e:	4910      	ldr	r1, [pc, #64]	; (8007880 <__kernel_cos+0x170>)
 8007840:	e7db      	b.n	80077fa <__kernel_cos+0xea>
 8007842:	bf00      	nop
 8007844:	f3af 8000 	nop.w
 8007848:	be8838d4 	.word	0xbe8838d4
 800784c:	bda8fae9 	.word	0xbda8fae9
 8007850:	bdb4b1c4 	.word	0xbdb4b1c4
 8007854:	3e21ee9e 	.word	0x3e21ee9e
 8007858:	809c52ad 	.word	0x809c52ad
 800785c:	3e927e4f 	.word	0x3e927e4f
 8007860:	19cb1590 	.word	0x19cb1590
 8007864:	3efa01a0 	.word	0x3efa01a0
 8007868:	16c15177 	.word	0x16c15177
 800786c:	3f56c16c 	.word	0x3f56c16c
 8007870:	5555554c 	.word	0x5555554c
 8007874:	3fa55555 	.word	0x3fa55555
 8007878:	3fe00000 	.word	0x3fe00000
 800787c:	3fd33332 	.word	0x3fd33332
 8007880:	3ff00000 	.word	0x3ff00000
 8007884:	3fe90000 	.word	0x3fe90000
 8007888:	3fd20000 	.word	0x3fd20000

0800788c <__kernel_rem_pio2>:
 800788c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007890:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007894:	9308      	str	r3, [sp, #32]
 8007896:	9106      	str	r1, [sp, #24]
 8007898:	4bb6      	ldr	r3, [pc, #728]	; (8007b74 <__kernel_rem_pio2+0x2e8>)
 800789a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800789c:	f112 0f14 	cmn.w	r2, #20
 80078a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078a4:	bfa8      	it	ge
 80078a6:	1ed4      	subge	r4, r2, #3
 80078a8:	9302      	str	r3, [sp, #8]
 80078aa:	9b08      	ldr	r3, [sp, #32]
 80078ac:	bfb8      	it	lt
 80078ae:	2400      	movlt	r4, #0
 80078b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80078b4:	9307      	str	r3, [sp, #28]
 80078b6:	bfa4      	itt	ge
 80078b8:	2318      	movge	r3, #24
 80078ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80078be:	f06f 0317 	mvn.w	r3, #23
 80078c2:	fb04 3303 	mla	r3, r4, r3, r3
 80078c6:	eb03 0b02 	add.w	fp, r3, r2
 80078ca:	9a07      	ldr	r2, [sp, #28]
 80078cc:	9b02      	ldr	r3, [sp, #8]
 80078ce:	1aa7      	subs	r7, r4, r2
 80078d0:	eb03 0802 	add.w	r8, r3, r2
 80078d4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80078d6:	2500      	movs	r5, #0
 80078d8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80078dc:	2200      	movs	r2, #0
 80078de:	2300      	movs	r3, #0
 80078e0:	9009      	str	r0, [sp, #36]	; 0x24
 80078e2:	ae20      	add	r6, sp, #128	; 0x80
 80078e4:	4545      	cmp	r5, r8
 80078e6:	dd14      	ble.n	8007912 <__kernel_rem_pio2+0x86>
 80078e8:	f04f 0800 	mov.w	r8, #0
 80078ec:	9a08      	ldr	r2, [sp, #32]
 80078ee:	ab20      	add	r3, sp, #128	; 0x80
 80078f0:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80078f4:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80078f8:	9b02      	ldr	r3, [sp, #8]
 80078fa:	4598      	cmp	r8, r3
 80078fc:	dc35      	bgt.n	800796a <__kernel_rem_pio2+0xde>
 80078fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007900:	2200      	movs	r2, #0
 8007902:	f1a3 0908 	sub.w	r9, r3, #8
 8007906:	2300      	movs	r3, #0
 8007908:	462f      	mov	r7, r5
 800790a:	2600      	movs	r6, #0
 800790c:	e9cd 2300 	strd	r2, r3, [sp]
 8007910:	e01f      	b.n	8007952 <__kernel_rem_pio2+0xc6>
 8007912:	42ef      	cmn	r7, r5
 8007914:	d40b      	bmi.n	800792e <__kernel_rem_pio2+0xa2>
 8007916:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800791a:	e9cd 2300 	strd	r2, r3, [sp]
 800791e:	f7f8 fd69 	bl	80003f4 <__aeabi_i2d>
 8007922:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007926:	e8e6 0102 	strd	r0, r1, [r6], #8
 800792a:	3501      	adds	r5, #1
 800792c:	e7da      	b.n	80078e4 <__kernel_rem_pio2+0x58>
 800792e:	4610      	mov	r0, r2
 8007930:	4619      	mov	r1, r3
 8007932:	e7f8      	b.n	8007926 <__kernel_rem_pio2+0x9a>
 8007934:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007938:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800793c:	f7f8 fdc4 	bl	80004c8 <__aeabi_dmul>
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007948:	f7f8 fc08 	bl	800015c <__adddf3>
 800794c:	e9cd 0100 	strd	r0, r1, [sp]
 8007950:	3601      	adds	r6, #1
 8007952:	9b07      	ldr	r3, [sp, #28]
 8007954:	3f08      	subs	r7, #8
 8007956:	429e      	cmp	r6, r3
 8007958:	ddec      	ble.n	8007934 <__kernel_rem_pio2+0xa8>
 800795a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800795e:	f108 0801 	add.w	r8, r8, #1
 8007962:	e8ea 2302 	strd	r2, r3, [sl], #8
 8007966:	3508      	adds	r5, #8
 8007968:	e7c6      	b.n	80078f8 <__kernel_rem_pio2+0x6c>
 800796a:	9b02      	ldr	r3, [sp, #8]
 800796c:	aa0c      	add	r2, sp, #48	; 0x30
 800796e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007972:	930b      	str	r3, [sp, #44]	; 0x2c
 8007974:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8007976:	9e02      	ldr	r6, [sp, #8]
 8007978:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800797c:	930a      	str	r3, [sp, #40]	; 0x28
 800797e:	ab98      	add	r3, sp, #608	; 0x260
 8007980:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007984:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8007988:	ab70      	add	r3, sp, #448	; 0x1c0
 800798a:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800798e:	46d0      	mov	r8, sl
 8007990:	46b1      	mov	r9, r6
 8007992:	af0c      	add	r7, sp, #48	; 0x30
 8007994:	9700      	str	r7, [sp, #0]
 8007996:	f1b9 0f00 	cmp.w	r9, #0
 800799a:	f1a8 0808 	sub.w	r8, r8, #8
 800799e:	dc71      	bgt.n	8007a84 <__kernel_rem_pio2+0x1f8>
 80079a0:	465a      	mov	r2, fp
 80079a2:	4620      	mov	r0, r4
 80079a4:	4629      	mov	r1, r5
 80079a6:	f000 fbf7 	bl	8008198 <scalbn>
 80079aa:	2200      	movs	r2, #0
 80079ac:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80079b0:	4604      	mov	r4, r0
 80079b2:	460d      	mov	r5, r1
 80079b4:	f7f8 fd88 	bl	80004c8 <__aeabi_dmul>
 80079b8:	f000 fb66 	bl	8008088 <floor>
 80079bc:	2200      	movs	r2, #0
 80079be:	4b6e      	ldr	r3, [pc, #440]	; (8007b78 <__kernel_rem_pio2+0x2ec>)
 80079c0:	f7f8 fd82 	bl	80004c8 <__aeabi_dmul>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4620      	mov	r0, r4
 80079ca:	4629      	mov	r1, r5
 80079cc:	f7f8 fbc4 	bl	8000158 <__aeabi_dsub>
 80079d0:	460d      	mov	r5, r1
 80079d2:	4604      	mov	r4, r0
 80079d4:	f7f9 f828 	bl	8000a28 <__aeabi_d2iz>
 80079d8:	9004      	str	r0, [sp, #16]
 80079da:	f7f8 fd0b 	bl	80003f4 <__aeabi_i2d>
 80079de:	4602      	mov	r2, r0
 80079e0:	460b      	mov	r3, r1
 80079e2:	4620      	mov	r0, r4
 80079e4:	4629      	mov	r1, r5
 80079e6:	f7f8 fbb7 	bl	8000158 <__aeabi_dsub>
 80079ea:	f1bb 0f00 	cmp.w	fp, #0
 80079ee:	4680      	mov	r8, r0
 80079f0:	4689      	mov	r9, r1
 80079f2:	dd70      	ble.n	8007ad6 <__kernel_rem_pio2+0x24a>
 80079f4:	1e72      	subs	r2, r6, #1
 80079f6:	ab0c      	add	r3, sp, #48	; 0x30
 80079f8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80079fc:	9c04      	ldr	r4, [sp, #16]
 80079fe:	f1cb 0118 	rsb	r1, fp, #24
 8007a02:	fa40 f301 	asr.w	r3, r0, r1
 8007a06:	441c      	add	r4, r3
 8007a08:	408b      	lsls	r3, r1
 8007a0a:	1ac0      	subs	r0, r0, r3
 8007a0c:	ab0c      	add	r3, sp, #48	; 0x30
 8007a0e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007a12:	f1cb 0317 	rsb	r3, fp, #23
 8007a16:	9404      	str	r4, [sp, #16]
 8007a18:	fa40 f303 	asr.w	r3, r0, r3
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	9b00      	ldr	r3, [sp, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	dd66      	ble.n	8007af2 <__kernel_rem_pio2+0x266>
 8007a24:	2200      	movs	r2, #0
 8007a26:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007a2a:	4614      	mov	r4, r2
 8007a2c:	9b04      	ldr	r3, [sp, #16]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	9304      	str	r3, [sp, #16]
 8007a32:	4296      	cmp	r6, r2
 8007a34:	f300 80ac 	bgt.w	8007b90 <__kernel_rem_pio2+0x304>
 8007a38:	f1bb 0f00 	cmp.w	fp, #0
 8007a3c:	dd07      	ble.n	8007a4e <__kernel_rem_pio2+0x1c2>
 8007a3e:	f1bb 0f01 	cmp.w	fp, #1
 8007a42:	f000 80b4 	beq.w	8007bae <__kernel_rem_pio2+0x322>
 8007a46:	f1bb 0f02 	cmp.w	fp, #2
 8007a4a:	f000 80ba 	beq.w	8007bc2 <__kernel_rem_pio2+0x336>
 8007a4e:	9b00      	ldr	r3, [sp, #0]
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d14e      	bne.n	8007af2 <__kernel_rem_pio2+0x266>
 8007a54:	4642      	mov	r2, r8
 8007a56:	464b      	mov	r3, r9
 8007a58:	2000      	movs	r0, #0
 8007a5a:	4948      	ldr	r1, [pc, #288]	; (8007b7c <__kernel_rem_pio2+0x2f0>)
 8007a5c:	f7f8 fb7c 	bl	8000158 <__aeabi_dsub>
 8007a60:	4680      	mov	r8, r0
 8007a62:	4689      	mov	r9, r1
 8007a64:	2c00      	cmp	r4, #0
 8007a66:	d044      	beq.n	8007af2 <__kernel_rem_pio2+0x266>
 8007a68:	465a      	mov	r2, fp
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	4943      	ldr	r1, [pc, #268]	; (8007b7c <__kernel_rem_pio2+0x2f0>)
 8007a6e:	f000 fb93 	bl	8008198 <scalbn>
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	4640      	mov	r0, r8
 8007a78:	4649      	mov	r1, r9
 8007a7a:	f7f8 fb6d 	bl	8000158 <__aeabi_dsub>
 8007a7e:	4680      	mov	r8, r0
 8007a80:	4689      	mov	r9, r1
 8007a82:	e036      	b.n	8007af2 <__kernel_rem_pio2+0x266>
 8007a84:	2200      	movs	r2, #0
 8007a86:	4b3e      	ldr	r3, [pc, #248]	; (8007b80 <__kernel_rem_pio2+0x2f4>)
 8007a88:	4620      	mov	r0, r4
 8007a8a:	4629      	mov	r1, r5
 8007a8c:	f7f8 fd1c 	bl	80004c8 <__aeabi_dmul>
 8007a90:	f7f8 ffca 	bl	8000a28 <__aeabi_d2iz>
 8007a94:	f7f8 fcae 	bl	80003f4 <__aeabi_i2d>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	4b38      	ldr	r3, [pc, #224]	; (8007b84 <__kernel_rem_pio2+0x2f8>)
 8007aa4:	f7f8 fd10 	bl	80004c8 <__aeabi_dmul>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	460b      	mov	r3, r1
 8007aac:	4620      	mov	r0, r4
 8007aae:	4629      	mov	r1, r5
 8007ab0:	f7f8 fb52 	bl	8000158 <__aeabi_dsub>
 8007ab4:	f7f8 ffb8 	bl	8000a28 <__aeabi_d2iz>
 8007ab8:	9b00      	ldr	r3, [sp, #0]
 8007aba:	f109 39ff 	add.w	r9, r9, #4294967295
 8007abe:	f843 0b04 	str.w	r0, [r3], #4
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ac8:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007acc:	f7f8 fb46 	bl	800015c <__adddf3>
 8007ad0:	4604      	mov	r4, r0
 8007ad2:	460d      	mov	r5, r1
 8007ad4:	e75f      	b.n	8007996 <__kernel_rem_pio2+0x10a>
 8007ad6:	d105      	bne.n	8007ae4 <__kernel_rem_pio2+0x258>
 8007ad8:	1e73      	subs	r3, r6, #1
 8007ada:	aa0c      	add	r2, sp, #48	; 0x30
 8007adc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007ae0:	15c3      	asrs	r3, r0, #23
 8007ae2:	e79b      	b.n	8007a1c <__kernel_rem_pio2+0x190>
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	4b28      	ldr	r3, [pc, #160]	; (8007b88 <__kernel_rem_pio2+0x2fc>)
 8007ae8:	f7f8 ff74 	bl	80009d4 <__aeabi_dcmpge>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d13e      	bne.n	8007b6e <__kernel_rem_pio2+0x2e2>
 8007af0:	9000      	str	r0, [sp, #0]
 8007af2:	2200      	movs	r2, #0
 8007af4:	2300      	movs	r3, #0
 8007af6:	4640      	mov	r0, r8
 8007af8:	4649      	mov	r1, r9
 8007afa:	f7f8 ff4d 	bl	8000998 <__aeabi_dcmpeq>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	f000 80b1 	beq.w	8007c66 <__kernel_rem_pio2+0x3da>
 8007b04:	1e74      	subs	r4, r6, #1
 8007b06:	4623      	mov	r3, r4
 8007b08:	2200      	movs	r2, #0
 8007b0a:	9902      	ldr	r1, [sp, #8]
 8007b0c:	428b      	cmp	r3, r1
 8007b0e:	da5f      	bge.n	8007bd0 <__kernel_rem_pio2+0x344>
 8007b10:	2a00      	cmp	r2, #0
 8007b12:	d074      	beq.n	8007bfe <__kernel_rem_pio2+0x372>
 8007b14:	ab0c      	add	r3, sp, #48	; 0x30
 8007b16:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007b1a:	f1ab 0b18 	sub.w	fp, fp, #24
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 809f 	beq.w	8007c62 <__kernel_rem_pio2+0x3d6>
 8007b24:	465a      	mov	r2, fp
 8007b26:	2000      	movs	r0, #0
 8007b28:	4914      	ldr	r1, [pc, #80]	; (8007b7c <__kernel_rem_pio2+0x2f0>)
 8007b2a:	f000 fb35 	bl	8008198 <scalbn>
 8007b2e:	46a2      	mov	sl, r4
 8007b30:	4606      	mov	r6, r0
 8007b32:	460f      	mov	r7, r1
 8007b34:	f04f 0800 	mov.w	r8, #0
 8007b38:	ab70      	add	r3, sp, #448	; 0x1c0
 8007b3a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8007b80 <__kernel_rem_pio2+0x2f4>
 8007b3e:	00e5      	lsls	r5, r4, #3
 8007b40:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8007b44:	f1ba 0f00 	cmp.w	sl, #0
 8007b48:	f280 80c3 	bge.w	8007cd2 <__kernel_rem_pio2+0x446>
 8007b4c:	4626      	mov	r6, r4
 8007b4e:	2e00      	cmp	r6, #0
 8007b50:	f2c0 80f5 	blt.w	8007d3e <__kernel_rem_pio2+0x4b2>
 8007b54:	4b0d      	ldr	r3, [pc, #52]	; (8007b8c <__kernel_rem_pio2+0x300>)
 8007b56:	f04f 0a00 	mov.w	sl, #0
 8007b5a:	9307      	str	r3, [sp, #28]
 8007b5c:	ab70      	add	r3, sp, #448	; 0x1c0
 8007b5e:	f04f 0b00 	mov.w	fp, #0
 8007b62:	f04f 0800 	mov.w	r8, #0
 8007b66:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007b6a:	1ba7      	subs	r7, r4, r6
 8007b6c:	e0db      	b.n	8007d26 <__kernel_rem_pio2+0x49a>
 8007b6e:	2302      	movs	r3, #2
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	e757      	b.n	8007a24 <__kernel_rem_pio2+0x198>
 8007b74:	080084a8 	.word	0x080084a8
 8007b78:	40200000 	.word	0x40200000
 8007b7c:	3ff00000 	.word	0x3ff00000
 8007b80:	3e700000 	.word	0x3e700000
 8007b84:	41700000 	.word	0x41700000
 8007b88:	3fe00000 	.word	0x3fe00000
 8007b8c:	08008468 	.word	0x08008468
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	b944      	cbnz	r4, 8007ba6 <__kernel_rem_pio2+0x31a>
 8007b94:	b11b      	cbz	r3, 8007b9e <__kernel_rem_pio2+0x312>
 8007b96:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007b9a:	603b      	str	r3, [r7, #0]
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	461c      	mov	r4, r3
 8007ba0:	3201      	adds	r2, #1
 8007ba2:	3704      	adds	r7, #4
 8007ba4:	e745      	b.n	8007a32 <__kernel_rem_pio2+0x1a6>
 8007ba6:	1acb      	subs	r3, r1, r3
 8007ba8:	603b      	str	r3, [r7, #0]
 8007baa:	4623      	mov	r3, r4
 8007bac:	e7f7      	b.n	8007b9e <__kernel_rem_pio2+0x312>
 8007bae:	1e72      	subs	r2, r6, #1
 8007bb0:	ab0c      	add	r3, sp, #48	; 0x30
 8007bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007bba:	a90c      	add	r1, sp, #48	; 0x30
 8007bbc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007bc0:	e745      	b.n	8007a4e <__kernel_rem_pio2+0x1c2>
 8007bc2:	1e72      	subs	r2, r6, #1
 8007bc4:	ab0c      	add	r3, sp, #48	; 0x30
 8007bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bca:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007bce:	e7f4      	b.n	8007bba <__kernel_rem_pio2+0x32e>
 8007bd0:	a90c      	add	r1, sp, #48	; 0x30
 8007bd2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	e796      	b.n	8007b0a <__kernel_rem_pio2+0x27e>
 8007bdc:	3401      	adds	r4, #1
 8007bde:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007be2:	2a00      	cmp	r2, #0
 8007be4:	d0fa      	beq.n	8007bdc <__kernel_rem_pio2+0x350>
 8007be6:	9b08      	ldr	r3, [sp, #32]
 8007be8:	f106 0801 	add.w	r8, r6, #1
 8007bec:	18f5      	adds	r5, r6, r3
 8007bee:	ab20      	add	r3, sp, #128	; 0x80
 8007bf0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007bf4:	4434      	add	r4, r6
 8007bf6:	4544      	cmp	r4, r8
 8007bf8:	da04      	bge.n	8007c04 <__kernel_rem_pio2+0x378>
 8007bfa:	4626      	mov	r6, r4
 8007bfc:	e6bf      	b.n	800797e <__kernel_rem_pio2+0xf2>
 8007bfe:	2401      	movs	r4, #1
 8007c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c02:	e7ec      	b.n	8007bde <__kernel_rem_pio2+0x352>
 8007c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c06:	f04f 0900 	mov.w	r9, #0
 8007c0a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007c0e:	f7f8 fbf1 	bl	80003f4 <__aeabi_i2d>
 8007c12:	2600      	movs	r6, #0
 8007c14:	2700      	movs	r7, #0
 8007c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c18:	e9c5 0100 	strd	r0, r1, [r5]
 8007c1c:	3b08      	subs	r3, #8
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	9504      	str	r5, [sp, #16]
 8007c22:	9b07      	ldr	r3, [sp, #28]
 8007c24:	4599      	cmp	r9, r3
 8007c26:	dd05      	ble.n	8007c34 <__kernel_rem_pio2+0x3a8>
 8007c28:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8007c2c:	f108 0801 	add.w	r8, r8, #1
 8007c30:	3508      	adds	r5, #8
 8007c32:	e7e0      	b.n	8007bf6 <__kernel_rem_pio2+0x36a>
 8007c34:	f8dd c010 	ldr.w	ip, [sp, #16]
 8007c38:	9900      	ldr	r1, [sp, #0]
 8007c3a:	f109 0901 	add.w	r9, r9, #1
 8007c3e:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8007c42:	9100      	str	r1, [sp, #0]
 8007c44:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8007c48:	f8cd c010 	str.w	ip, [sp, #16]
 8007c4c:	f7f8 fc3c 	bl	80004c8 <__aeabi_dmul>
 8007c50:	4602      	mov	r2, r0
 8007c52:	460b      	mov	r3, r1
 8007c54:	4630      	mov	r0, r6
 8007c56:	4639      	mov	r1, r7
 8007c58:	f7f8 fa80 	bl	800015c <__adddf3>
 8007c5c:	4606      	mov	r6, r0
 8007c5e:	460f      	mov	r7, r1
 8007c60:	e7df      	b.n	8007c22 <__kernel_rem_pio2+0x396>
 8007c62:	3c01      	subs	r4, #1
 8007c64:	e756      	b.n	8007b14 <__kernel_rem_pio2+0x288>
 8007c66:	f1cb 0200 	rsb	r2, fp, #0
 8007c6a:	4640      	mov	r0, r8
 8007c6c:	4649      	mov	r1, r9
 8007c6e:	f000 fa93 	bl	8008198 <scalbn>
 8007c72:	2200      	movs	r2, #0
 8007c74:	4ba4      	ldr	r3, [pc, #656]	; (8007f08 <__kernel_rem_pio2+0x67c>)
 8007c76:	4604      	mov	r4, r0
 8007c78:	460d      	mov	r5, r1
 8007c7a:	f7f8 feab 	bl	80009d4 <__aeabi_dcmpge>
 8007c7e:	b1f8      	cbz	r0, 8007cc0 <__kernel_rem_pio2+0x434>
 8007c80:	2200      	movs	r2, #0
 8007c82:	4ba2      	ldr	r3, [pc, #648]	; (8007f0c <__kernel_rem_pio2+0x680>)
 8007c84:	4620      	mov	r0, r4
 8007c86:	4629      	mov	r1, r5
 8007c88:	f7f8 fc1e 	bl	80004c8 <__aeabi_dmul>
 8007c8c:	f7f8 fecc 	bl	8000a28 <__aeabi_d2iz>
 8007c90:	4607      	mov	r7, r0
 8007c92:	f7f8 fbaf 	bl	80003f4 <__aeabi_i2d>
 8007c96:	2200      	movs	r2, #0
 8007c98:	4b9b      	ldr	r3, [pc, #620]	; (8007f08 <__kernel_rem_pio2+0x67c>)
 8007c9a:	f7f8 fc15 	bl	80004c8 <__aeabi_dmul>
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f7f8 fa57 	bl	8000158 <__aeabi_dsub>
 8007caa:	f7f8 febd 	bl	8000a28 <__aeabi_d2iz>
 8007cae:	1c74      	adds	r4, r6, #1
 8007cb0:	ab0c      	add	r3, sp, #48	; 0x30
 8007cb2:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8007cb6:	f10b 0b18 	add.w	fp, fp, #24
 8007cba:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8007cbe:	e731      	b.n	8007b24 <__kernel_rem_pio2+0x298>
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	f7f8 feb0 	bl	8000a28 <__aeabi_d2iz>
 8007cc8:	ab0c      	add	r3, sp, #48	; 0x30
 8007cca:	4634      	mov	r4, r6
 8007ccc:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8007cd0:	e728      	b.n	8007b24 <__kernel_rem_pio2+0x298>
 8007cd2:	ab0c      	add	r3, sp, #48	; 0x30
 8007cd4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007cd8:	f7f8 fb8c 	bl	80003f4 <__aeabi_i2d>
 8007cdc:	4632      	mov	r2, r6
 8007cde:	463b      	mov	r3, r7
 8007ce0:	f7f8 fbf2 	bl	80004c8 <__aeabi_dmul>
 8007ce4:	4642      	mov	r2, r8
 8007ce6:	e86b 0102 	strd	r0, r1, [fp], #-8
 8007cea:	464b      	mov	r3, r9
 8007cec:	4630      	mov	r0, r6
 8007cee:	4639      	mov	r1, r7
 8007cf0:	f7f8 fbea 	bl	80004c8 <__aeabi_dmul>
 8007cf4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cf8:	4606      	mov	r6, r0
 8007cfa:	460f      	mov	r7, r1
 8007cfc:	e722      	b.n	8007b44 <__kernel_rem_pio2+0x2b8>
 8007cfe:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8007d02:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007d06:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8007d0a:	f8cd c01c 	str.w	ip, [sp, #28]
 8007d0e:	f7f8 fbdb 	bl	80004c8 <__aeabi_dmul>
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	4650      	mov	r0, sl
 8007d18:	4659      	mov	r1, fp
 8007d1a:	f7f8 fa1f 	bl	800015c <__adddf3>
 8007d1e:	4682      	mov	sl, r0
 8007d20:	468b      	mov	fp, r1
 8007d22:	f108 0801 	add.w	r8, r8, #1
 8007d26:	9b02      	ldr	r3, [sp, #8]
 8007d28:	4598      	cmp	r8, r3
 8007d2a:	dc01      	bgt.n	8007d30 <__kernel_rem_pio2+0x4a4>
 8007d2c:	45b8      	cmp	r8, r7
 8007d2e:	dde6      	ble.n	8007cfe <__kernel_rem_pio2+0x472>
 8007d30:	ab48      	add	r3, sp, #288	; 0x120
 8007d32:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007d36:	e9c7 ab00 	strd	sl, fp, [r7]
 8007d3a:	3e01      	subs	r6, #1
 8007d3c:	e707      	b.n	8007b4e <__kernel_rem_pio2+0x2c2>
 8007d3e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	dc09      	bgt.n	8007d58 <__kernel_rem_pio2+0x4cc>
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	dc32      	bgt.n	8007dae <__kernel_rem_pio2+0x522>
 8007d48:	d05a      	beq.n	8007e00 <__kernel_rem_pio2+0x574>
 8007d4a:	9b04      	ldr	r3, [sp, #16]
 8007d4c:	f003 0007 	and.w	r0, r3, #7
 8007d50:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d58:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d1f5      	bne.n	8007d4a <__kernel_rem_pio2+0x4be>
 8007d5e:	ab48      	add	r3, sp, #288	; 0x120
 8007d60:	441d      	add	r5, r3
 8007d62:	46aa      	mov	sl, r5
 8007d64:	46a3      	mov	fp, r4
 8007d66:	f1bb 0f00 	cmp.w	fp, #0
 8007d6a:	dc76      	bgt.n	8007e5a <__kernel_rem_pio2+0x5ce>
 8007d6c:	46aa      	mov	sl, r5
 8007d6e:	46a3      	mov	fp, r4
 8007d70:	f1bb 0f01 	cmp.w	fp, #1
 8007d74:	f300 8090 	bgt.w	8007e98 <__kernel_rem_pio2+0x60c>
 8007d78:	2700      	movs	r7, #0
 8007d7a:	463e      	mov	r6, r7
 8007d7c:	2c01      	cmp	r4, #1
 8007d7e:	f300 80aa 	bgt.w	8007ed6 <__kernel_rem_pio2+0x64a>
 8007d82:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8007d86:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8007d8a:	9b00      	ldr	r3, [sp, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f040 80ac 	bne.w	8007eea <__kernel_rem_pio2+0x65e>
 8007d92:	4603      	mov	r3, r0
 8007d94:	462a      	mov	r2, r5
 8007d96:	9806      	ldr	r0, [sp, #24]
 8007d98:	e9c0 2300 	strd	r2, r3, [r0]
 8007d9c:	4622      	mov	r2, r4
 8007d9e:	460b      	mov	r3, r1
 8007da0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007da4:	463a      	mov	r2, r7
 8007da6:	4633      	mov	r3, r6
 8007da8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007dac:	e7cd      	b.n	8007d4a <__kernel_rem_pio2+0x4be>
 8007dae:	2000      	movs	r0, #0
 8007db0:	46a0      	mov	r8, r4
 8007db2:	4601      	mov	r1, r0
 8007db4:	ab48      	add	r3, sp, #288	; 0x120
 8007db6:	441d      	add	r5, r3
 8007db8:	f1b8 0f00 	cmp.w	r8, #0
 8007dbc:	da3a      	bge.n	8007e34 <__kernel_rem_pio2+0x5a8>
 8007dbe:	9b00      	ldr	r3, [sp, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d03e      	beq.n	8007e42 <__kernel_rem_pio2+0x5b6>
 8007dc4:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8007dc8:	4602      	mov	r2, r0
 8007dca:	462b      	mov	r3, r5
 8007dcc:	9d06      	ldr	r5, [sp, #24]
 8007dce:	2601      	movs	r6, #1
 8007dd0:	e9c5 2300 	strd	r2, r3, [r5]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007dda:	f7f8 f9bd 	bl	8000158 <__aeabi_dsub>
 8007dde:	4684      	mov	ip, r0
 8007de0:	460f      	mov	r7, r1
 8007de2:	ad48      	add	r5, sp, #288	; 0x120
 8007de4:	42b4      	cmp	r4, r6
 8007de6:	f105 0508 	add.w	r5, r5, #8
 8007dea:	da2c      	bge.n	8007e46 <__kernel_rem_pio2+0x5ba>
 8007dec:	9b00      	ldr	r3, [sp, #0]
 8007dee:	b10b      	cbz	r3, 8007df4 <__kernel_rem_pio2+0x568>
 8007df0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007df4:	4662      	mov	r2, ip
 8007df6:	463b      	mov	r3, r7
 8007df8:	9906      	ldr	r1, [sp, #24]
 8007dfa:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007dfe:	e7a4      	b.n	8007d4a <__kernel_rem_pio2+0x4be>
 8007e00:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8007e02:	ab48      	add	r3, sp, #288	; 0x120
 8007e04:	4637      	mov	r7, r6
 8007e06:	441d      	add	r5, r3
 8007e08:	2c00      	cmp	r4, #0
 8007e0a:	da09      	bge.n	8007e20 <__kernel_rem_pio2+0x594>
 8007e0c:	9b00      	ldr	r3, [sp, #0]
 8007e0e:	b10b      	cbz	r3, 8007e14 <__kernel_rem_pio2+0x588>
 8007e10:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007e14:	4632      	mov	r2, r6
 8007e16:	463b      	mov	r3, r7
 8007e18:	9906      	ldr	r1, [sp, #24]
 8007e1a:	e9c1 2300 	strd	r2, r3, [r1]
 8007e1e:	e794      	b.n	8007d4a <__kernel_rem_pio2+0x4be>
 8007e20:	4630      	mov	r0, r6
 8007e22:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007e26:	4639      	mov	r1, r7
 8007e28:	f7f8 f998 	bl	800015c <__adddf3>
 8007e2c:	3c01      	subs	r4, #1
 8007e2e:	4606      	mov	r6, r0
 8007e30:	460f      	mov	r7, r1
 8007e32:	e7e9      	b.n	8007e08 <__kernel_rem_pio2+0x57c>
 8007e34:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007e38:	f7f8 f990 	bl	800015c <__adddf3>
 8007e3c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e40:	e7ba      	b.n	8007db8 <__kernel_rem_pio2+0x52c>
 8007e42:	460d      	mov	r5, r1
 8007e44:	e7c0      	b.n	8007dc8 <__kernel_rem_pio2+0x53c>
 8007e46:	4660      	mov	r0, ip
 8007e48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e4c:	4639      	mov	r1, r7
 8007e4e:	f7f8 f985 	bl	800015c <__adddf3>
 8007e52:	3601      	adds	r6, #1
 8007e54:	4684      	mov	ip, r0
 8007e56:	460f      	mov	r7, r1
 8007e58:	e7c4      	b.n	8007de4 <__kernel_rem_pio2+0x558>
 8007e5a:	e9da 6700 	ldrd	r6, r7, [sl]
 8007e5e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8007e62:	4632      	mov	r2, r6
 8007e64:	463b      	mov	r3, r7
 8007e66:	4640      	mov	r0, r8
 8007e68:	4649      	mov	r1, r9
 8007e6a:	f7f8 f977 	bl	800015c <__adddf3>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e76:	4640      	mov	r0, r8
 8007e78:	4649      	mov	r1, r9
 8007e7a:	f7f8 f96d 	bl	8000158 <__aeabi_dsub>
 8007e7e:	4632      	mov	r2, r6
 8007e80:	463b      	mov	r3, r7
 8007e82:	f7f8 f96b 	bl	800015c <__adddf3>
 8007e86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e8a:	e86a 0102 	strd	r0, r1, [sl], #-8
 8007e8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e92:	e9ca 2300 	strd	r2, r3, [sl]
 8007e96:	e766      	b.n	8007d66 <__kernel_rem_pio2+0x4da>
 8007e98:	e9da 8900 	ldrd	r8, r9, [sl]
 8007e9c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8007ea0:	4642      	mov	r2, r8
 8007ea2:	464b      	mov	r3, r9
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	4639      	mov	r1, r7
 8007ea8:	f7f8 f958 	bl	800015c <__adddf3>
 8007eac:	4602      	mov	r2, r0
 8007eae:	460b      	mov	r3, r1
 8007eb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	4639      	mov	r1, r7
 8007eb8:	f7f8 f94e 	bl	8000158 <__aeabi_dsub>
 8007ebc:	4642      	mov	r2, r8
 8007ebe:	464b      	mov	r3, r9
 8007ec0:	f7f8 f94c 	bl	800015c <__adddf3>
 8007ec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ec8:	e86a 0102 	strd	r0, r1, [sl], #-8
 8007ecc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ed0:	e9ca 2300 	strd	r2, r3, [sl]
 8007ed4:	e74c      	b.n	8007d70 <__kernel_rem_pio2+0x4e4>
 8007ed6:	4638      	mov	r0, r7
 8007ed8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8007edc:	4631      	mov	r1, r6
 8007ede:	f7f8 f93d 	bl	800015c <__adddf3>
 8007ee2:	3c01      	subs	r4, #1
 8007ee4:	4607      	mov	r7, r0
 8007ee6:	460e      	mov	r6, r1
 8007ee8:	e748      	b.n	8007d7c <__kernel_rem_pio2+0x4f0>
 8007eea:	9b06      	ldr	r3, [sp, #24]
 8007eec:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007ef0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007ef4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8007ef8:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8007efc:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8007f00:	601d      	str	r5, [r3, #0]
 8007f02:	615e      	str	r6, [r3, #20]
 8007f04:	e721      	b.n	8007d4a <__kernel_rem_pio2+0x4be>
 8007f06:	bf00      	nop
 8007f08:	41700000 	.word	0x41700000
 8007f0c:	3e700000 	.word	0x3e700000

08007f10 <__kernel_sin>:
 8007f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f14:	b086      	sub	sp, #24
 8007f16:	e9cd 2300 	strd	r2, r3, [sp]
 8007f1a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007f1e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007f22:	4682      	mov	sl, r0
 8007f24:	460c      	mov	r4, r1
 8007f26:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007f28:	da03      	bge.n	8007f32 <__kernel_sin+0x22>
 8007f2a:	f7f8 fd7d 	bl	8000a28 <__aeabi_d2iz>
 8007f2e:	2800      	cmp	r0, #0
 8007f30:	d050      	beq.n	8007fd4 <__kernel_sin+0xc4>
 8007f32:	4652      	mov	r2, sl
 8007f34:	4623      	mov	r3, r4
 8007f36:	4650      	mov	r0, sl
 8007f38:	4621      	mov	r1, r4
 8007f3a:	f7f8 fac5 	bl	80004c8 <__aeabi_dmul>
 8007f3e:	4606      	mov	r6, r0
 8007f40:	460f      	mov	r7, r1
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4650      	mov	r0, sl
 8007f48:	4621      	mov	r1, r4
 8007f4a:	f7f8 fabd 	bl	80004c8 <__aeabi_dmul>
 8007f4e:	a33e      	add	r3, pc, #248	; (adr r3, 8008048 <__kernel_sin+0x138>)
 8007f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f54:	4680      	mov	r8, r0
 8007f56:	4689      	mov	r9, r1
 8007f58:	4630      	mov	r0, r6
 8007f5a:	4639      	mov	r1, r7
 8007f5c:	f7f8 fab4 	bl	80004c8 <__aeabi_dmul>
 8007f60:	a33b      	add	r3, pc, #236	; (adr r3, 8008050 <__kernel_sin+0x140>)
 8007f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f66:	f7f8 f8f7 	bl	8000158 <__aeabi_dsub>
 8007f6a:	4632      	mov	r2, r6
 8007f6c:	463b      	mov	r3, r7
 8007f6e:	f7f8 faab 	bl	80004c8 <__aeabi_dmul>
 8007f72:	a339      	add	r3, pc, #228	; (adr r3, 8008058 <__kernel_sin+0x148>)
 8007f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f78:	f7f8 f8f0 	bl	800015c <__adddf3>
 8007f7c:	4632      	mov	r2, r6
 8007f7e:	463b      	mov	r3, r7
 8007f80:	f7f8 faa2 	bl	80004c8 <__aeabi_dmul>
 8007f84:	a336      	add	r3, pc, #216	; (adr r3, 8008060 <__kernel_sin+0x150>)
 8007f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8a:	f7f8 f8e5 	bl	8000158 <__aeabi_dsub>
 8007f8e:	4632      	mov	r2, r6
 8007f90:	463b      	mov	r3, r7
 8007f92:	f7f8 fa99 	bl	80004c8 <__aeabi_dmul>
 8007f96:	a334      	add	r3, pc, #208	; (adr r3, 8008068 <__kernel_sin+0x158>)
 8007f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9c:	f7f8 f8de 	bl	800015c <__adddf3>
 8007fa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fa4:	b9dd      	cbnz	r5, 8007fde <__kernel_sin+0xce>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	460b      	mov	r3, r1
 8007faa:	4630      	mov	r0, r6
 8007fac:	4639      	mov	r1, r7
 8007fae:	f7f8 fa8b 	bl	80004c8 <__aeabi_dmul>
 8007fb2:	a32f      	add	r3, pc, #188	; (adr r3, 8008070 <__kernel_sin+0x160>)
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	f7f8 f8ce 	bl	8000158 <__aeabi_dsub>
 8007fbc:	4642      	mov	r2, r8
 8007fbe:	464b      	mov	r3, r9
 8007fc0:	f7f8 fa82 	bl	80004c8 <__aeabi_dmul>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4650      	mov	r0, sl
 8007fca:	4621      	mov	r1, r4
 8007fcc:	f7f8 f8c6 	bl	800015c <__adddf3>
 8007fd0:	4682      	mov	sl, r0
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	4650      	mov	r0, sl
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	b006      	add	sp, #24
 8007fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fde:	2200      	movs	r2, #0
 8007fe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fe4:	4b24      	ldr	r3, [pc, #144]	; (8008078 <__kernel_sin+0x168>)
 8007fe6:	f7f8 fa6f 	bl	80004c8 <__aeabi_dmul>
 8007fea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ff2:	4640      	mov	r0, r8
 8007ff4:	4649      	mov	r1, r9
 8007ff6:	f7f8 fa67 	bl	80004c8 <__aeabi_dmul>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008002:	f7f8 f8a9 	bl	8000158 <__aeabi_dsub>
 8008006:	4632      	mov	r2, r6
 8008008:	463b      	mov	r3, r7
 800800a:	f7f8 fa5d 	bl	80004c8 <__aeabi_dmul>
 800800e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008012:	f7f8 f8a1 	bl	8000158 <__aeabi_dsub>
 8008016:	a316      	add	r3, pc, #88	; (adr r3, 8008070 <__kernel_sin+0x160>)
 8008018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801c:	4606      	mov	r6, r0
 800801e:	460f      	mov	r7, r1
 8008020:	4640      	mov	r0, r8
 8008022:	4649      	mov	r1, r9
 8008024:	f7f8 fa50 	bl	80004c8 <__aeabi_dmul>
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	4630      	mov	r0, r6
 800802e:	4639      	mov	r1, r7
 8008030:	f7f8 f894 	bl	800015c <__adddf3>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	4650      	mov	r0, sl
 800803a:	4621      	mov	r1, r4
 800803c:	f7f8 f88c 	bl	8000158 <__aeabi_dsub>
 8008040:	e7c6      	b.n	8007fd0 <__kernel_sin+0xc0>
 8008042:	bf00      	nop
 8008044:	f3af 8000 	nop.w
 8008048:	5acfd57c 	.word	0x5acfd57c
 800804c:	3de5d93a 	.word	0x3de5d93a
 8008050:	8a2b9ceb 	.word	0x8a2b9ceb
 8008054:	3e5ae5e6 	.word	0x3e5ae5e6
 8008058:	57b1fe7d 	.word	0x57b1fe7d
 800805c:	3ec71de3 	.word	0x3ec71de3
 8008060:	19c161d5 	.word	0x19c161d5
 8008064:	3f2a01a0 	.word	0x3f2a01a0
 8008068:	1110f8a6 	.word	0x1110f8a6
 800806c:	3f811111 	.word	0x3f811111
 8008070:	55555549 	.word	0x55555549
 8008074:	3fc55555 	.word	0x3fc55555
 8008078:	3fe00000 	.word	0x3fe00000

0800807c <fabs>:
 800807c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008080:	4770      	bx	lr
 8008082:	0000      	movs	r0, r0
 8008084:	0000      	movs	r0, r0
	...

08008088 <floor>:
 8008088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800808c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008090:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8008094:	2e13      	cmp	r6, #19
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	4607      	mov	r7, r0
 800809c:	460c      	mov	r4, r1
 800809e:	4605      	mov	r5, r0
 80080a0:	dc33      	bgt.n	800810a <floor+0x82>
 80080a2:	2e00      	cmp	r6, #0
 80080a4:	da14      	bge.n	80080d0 <floor+0x48>
 80080a6:	a334      	add	r3, pc, #208	; (adr r3, 8008178 <floor+0xf0>)
 80080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ac:	f7f8 f856 	bl	800015c <__adddf3>
 80080b0:	2200      	movs	r2, #0
 80080b2:	2300      	movs	r3, #0
 80080b4:	f7f8 fc98 	bl	80009e8 <__aeabi_dcmpgt>
 80080b8:	b138      	cbz	r0, 80080ca <floor+0x42>
 80080ba:	2c00      	cmp	r4, #0
 80080bc:	da58      	bge.n	8008170 <floor+0xe8>
 80080be:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80080c2:	431d      	orrs	r5, r3
 80080c4:	d001      	beq.n	80080ca <floor+0x42>
 80080c6:	2500      	movs	r5, #0
 80080c8:	4c2d      	ldr	r4, [pc, #180]	; (8008180 <floor+0xf8>)
 80080ca:	4623      	mov	r3, r4
 80080cc:	462f      	mov	r7, r5
 80080ce:	e025      	b.n	800811c <floor+0x94>
 80080d0:	4a2c      	ldr	r2, [pc, #176]	; (8008184 <floor+0xfc>)
 80080d2:	fa42 f806 	asr.w	r8, r2, r6
 80080d6:	ea01 0208 	and.w	r2, r1, r8
 80080da:	4302      	orrs	r2, r0
 80080dc:	d01e      	beq.n	800811c <floor+0x94>
 80080de:	a326      	add	r3, pc, #152	; (adr r3, 8008178 <floor+0xf0>)
 80080e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e4:	f7f8 f83a 	bl	800015c <__adddf3>
 80080e8:	2200      	movs	r2, #0
 80080ea:	2300      	movs	r3, #0
 80080ec:	f7f8 fc7c 	bl	80009e8 <__aeabi_dcmpgt>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d0ea      	beq.n	80080ca <floor+0x42>
 80080f4:	2c00      	cmp	r4, #0
 80080f6:	bfbe      	ittt	lt
 80080f8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80080fc:	fa43 f606 	asrlt.w	r6, r3, r6
 8008100:	19a4      	addlt	r4, r4, r6
 8008102:	2500      	movs	r5, #0
 8008104:	ea24 0408 	bic.w	r4, r4, r8
 8008108:	e7df      	b.n	80080ca <floor+0x42>
 800810a:	2e33      	cmp	r6, #51	; 0x33
 800810c:	dd0a      	ble.n	8008124 <floor+0x9c>
 800810e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008112:	d103      	bne.n	800811c <floor+0x94>
 8008114:	f7f8 f822 	bl	800015c <__adddf3>
 8008118:	4607      	mov	r7, r0
 800811a:	460b      	mov	r3, r1
 800811c:	4638      	mov	r0, r7
 800811e:	4619      	mov	r1, r3
 8008120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008124:	f04f 32ff 	mov.w	r2, #4294967295
 8008128:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800812c:	fa22 f808 	lsr.w	r8, r2, r8
 8008130:	ea18 0f00 	tst.w	r8, r0
 8008134:	d0f2      	beq.n	800811c <floor+0x94>
 8008136:	a310      	add	r3, pc, #64	; (adr r3, 8008178 <floor+0xf0>)
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	f7f8 f80e 	bl	800015c <__adddf3>
 8008140:	2200      	movs	r2, #0
 8008142:	2300      	movs	r3, #0
 8008144:	f7f8 fc50 	bl	80009e8 <__aeabi_dcmpgt>
 8008148:	2800      	cmp	r0, #0
 800814a:	d0be      	beq.n	80080ca <floor+0x42>
 800814c:	2c00      	cmp	r4, #0
 800814e:	da02      	bge.n	8008156 <floor+0xce>
 8008150:	2e14      	cmp	r6, #20
 8008152:	d103      	bne.n	800815c <floor+0xd4>
 8008154:	3401      	adds	r4, #1
 8008156:	ea25 0508 	bic.w	r5, r5, r8
 800815a:	e7b6      	b.n	80080ca <floor+0x42>
 800815c:	2301      	movs	r3, #1
 800815e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008162:	fa03 f606 	lsl.w	r6, r3, r6
 8008166:	4435      	add	r5, r6
 8008168:	42bd      	cmp	r5, r7
 800816a:	bf38      	it	cc
 800816c:	18e4      	addcc	r4, r4, r3
 800816e:	e7f2      	b.n	8008156 <floor+0xce>
 8008170:	2500      	movs	r5, #0
 8008172:	462c      	mov	r4, r5
 8008174:	e7a9      	b.n	80080ca <floor+0x42>
 8008176:	bf00      	nop
 8008178:	8800759c 	.word	0x8800759c
 800817c:	7e37e43c 	.word	0x7e37e43c
 8008180:	bff00000 	.word	0xbff00000
 8008184:	000fffff 	.word	0x000fffff

08008188 <nan>:
 8008188:	2000      	movs	r0, #0
 800818a:	4901      	ldr	r1, [pc, #4]	; (8008190 <nan+0x8>)
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	7ff80000 	.word	0x7ff80000
 8008194:	00000000 	.word	0x00000000

08008198 <scalbn>:
 8008198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800819a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800819e:	4604      	mov	r4, r0
 80081a0:	460d      	mov	r5, r1
 80081a2:	4617      	mov	r7, r2
 80081a4:	460b      	mov	r3, r1
 80081a6:	b996      	cbnz	r6, 80081ce <scalbn+0x36>
 80081a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80081ac:	4303      	orrs	r3, r0
 80081ae:	d039      	beq.n	8008224 <scalbn+0x8c>
 80081b0:	4b33      	ldr	r3, [pc, #204]	; (8008280 <scalbn+0xe8>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	f7f8 f988 	bl	80004c8 <__aeabi_dmul>
 80081b8:	4b32      	ldr	r3, [pc, #200]	; (8008284 <scalbn+0xec>)
 80081ba:	4604      	mov	r4, r0
 80081bc:	429f      	cmp	r7, r3
 80081be:	460d      	mov	r5, r1
 80081c0:	da0f      	bge.n	80081e2 <scalbn+0x4a>
 80081c2:	a32b      	add	r3, pc, #172	; (adr r3, 8008270 <scalbn+0xd8>)
 80081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c8:	f7f8 f97e 	bl	80004c8 <__aeabi_dmul>
 80081cc:	e006      	b.n	80081dc <scalbn+0x44>
 80081ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80081d2:	4296      	cmp	r6, r2
 80081d4:	d10a      	bne.n	80081ec <scalbn+0x54>
 80081d6:	4602      	mov	r2, r0
 80081d8:	f7f7 ffc0 	bl	800015c <__adddf3>
 80081dc:	4604      	mov	r4, r0
 80081de:	460d      	mov	r5, r1
 80081e0:	e020      	b.n	8008224 <scalbn+0x8c>
 80081e2:	460b      	mov	r3, r1
 80081e4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80081e8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80081ec:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80081f0:	19b9      	adds	r1, r7, r6
 80081f2:	4291      	cmp	r1, r2
 80081f4:	dd0e      	ble.n	8008214 <scalbn+0x7c>
 80081f6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80081fa:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80081fe:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008202:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008206:	4820      	ldr	r0, [pc, #128]	; (8008288 <scalbn+0xf0>)
 8008208:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800820c:	a31a      	add	r3, pc, #104	; (adr r3, 8008278 <scalbn+0xe0>)
 800820e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008212:	e7d9      	b.n	80081c8 <scalbn+0x30>
 8008214:	2900      	cmp	r1, #0
 8008216:	dd08      	ble.n	800822a <scalbn+0x92>
 8008218:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800821c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008220:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008224:	4620      	mov	r0, r4
 8008226:	4629      	mov	r1, r5
 8008228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800822a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800822e:	da12      	bge.n	8008256 <scalbn+0xbe>
 8008230:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008234:	429f      	cmp	r7, r3
 8008236:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800823a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800823e:	dcdc      	bgt.n	80081fa <scalbn+0x62>
 8008240:	a30b      	add	r3, pc, #44	; (adr r3, 8008270 <scalbn+0xd8>)
 8008242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008246:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800824a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800824e:	480f      	ldr	r0, [pc, #60]	; (800828c <scalbn+0xf4>)
 8008250:	f041 011f 	orr.w	r1, r1, #31
 8008254:	e7b8      	b.n	80081c8 <scalbn+0x30>
 8008256:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800825a:	3136      	adds	r1, #54	; 0x36
 800825c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008260:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008264:	4620      	mov	r0, r4
 8008266:	4629      	mov	r1, r5
 8008268:	2200      	movs	r2, #0
 800826a:	4b09      	ldr	r3, [pc, #36]	; (8008290 <scalbn+0xf8>)
 800826c:	e7ac      	b.n	80081c8 <scalbn+0x30>
 800826e:	bf00      	nop
 8008270:	c2f8f359 	.word	0xc2f8f359
 8008274:	01a56e1f 	.word	0x01a56e1f
 8008278:	8800759c 	.word	0x8800759c
 800827c:	7e37e43c 	.word	0x7e37e43c
 8008280:	43500000 	.word	0x43500000
 8008284:	ffff3cb0 	.word	0xffff3cb0
 8008288:	8800759c 	.word	0x8800759c
 800828c:	c2f8f359 	.word	0xc2f8f359
 8008290:	3c900000 	.word	0x3c900000

08008294 <_init>:
 8008294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008296:	bf00      	nop
 8008298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800829a:	bc08      	pop	{r3}
 800829c:	469e      	mov	lr, r3
 800829e:	4770      	bx	lr

080082a0 <_fini>:
 80082a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a2:	bf00      	nop
 80082a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a6:	bc08      	pop	{r3}
 80082a8:	469e      	mov	lr, r3
 80082aa:	4770      	bx	lr
