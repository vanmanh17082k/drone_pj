
control_stm32f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003200  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800330c  0800330c  0001330c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003344  08003344  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003344  08003344  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003344  08003344  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003344  08003344  00013344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003348  08003348  00013348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800334c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08003358  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08003358  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008978  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b10  00000000  00000000  000289ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0002a4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c8  00000000  00000000  0002ad60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017157  00000000  00000000  0002b528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097b3  00000000  00000000  0004267f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084232  00000000  00000000  0004be32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0064  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021a8  00000000  00000000  000d00b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080032f4 	.word	0x080032f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080032f4 	.word	0x080032f4

0800014c <ADC_Select_CH0>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_Select_CH0(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
	 ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]
	 sConfig.Channel = ADC_CHANNEL_0;
 800015c:	2300      	movs	r3, #0
 800015e:	607b      	str	r3, [r7, #4]
	 sConfig.Rank = ADC_REGULAR_RANK_1;
 8000160:	2301      	movs	r3, #1
 8000162:	60bb      	str	r3, [r7, #8]
	 sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000164:	2307      	movs	r3, #7
 8000166:	60fb      	str	r3, [r7, #12]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000168:	1d3b      	adds	r3, r7, #4
 800016a:	4619      	mov	r1, r3
 800016c:	4805      	ldr	r0, [pc, #20]	; (8000184 <ADC_Select_CH0+0x38>)
 800016e:	f001 fc25 	bl	80019bc <HAL_ADC_ConfigChannel>
 8000172:	4603      	mov	r3, r0
 8000174:	2b00      	cmp	r3, #0
 8000176:	d001      	beq.n	800017c <ADC_Select_CH0+0x30>
	 {
	   Error_Handler();
 8000178:	f000 fb40 	bl	80007fc <Error_Handler>
	 }
}
 800017c:	bf00      	nop
 800017e:	3710      	adds	r7, #16
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}
 8000184:	20000028 	.word	0x20000028

08000188 <ADC_Select_CH1>:
void ADC_Select_CH1(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800018e:	1d3b      	adds	r3, r7, #4
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	605a      	str	r2, [r3, #4]
 8000196:	609a      	str	r2, [r3, #8]
	 sConfig.Channel = ADC_CHANNEL_1;
 8000198:	2301      	movs	r3, #1
 800019a:	607b      	str	r3, [r7, #4]
	 sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
	 sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80001a0:	2307      	movs	r3, #7
 80001a2:	60fb      	str	r3, [r7, #12]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <ADC_Select_CH1+0x38>)
 80001aa:	f001 fc07 	bl	80019bc <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <ADC_Select_CH1+0x30>
	 {
	   Error_Handler();
 80001b4:	f000 fb22 	bl	80007fc <Error_Handler>
	 }
}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000028 	.word	0x20000028

080001c4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	4603      	mov	r3, r0
 80001cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

//  HAL_GPIO_ReadPin
  do{
	  button_status[0] =HAL_GPIO_ReadPin(GPIOA, GPIO_Pin);
 80001ce:	88fb      	ldrh	r3, [r7, #6]
 80001d0:	4619      	mov	r1, r3
 80001d2:	4844      	ldr	r0, [pc, #272]	; (80002e4 <HAL_GPIO_EXTI_Callback+0x120>)
 80001d4:	f002 f820 	bl	8002218 <HAL_GPIO_ReadPin>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	bf14      	ite	ne
 80001de:	2301      	movne	r3, #1
 80001e0:	2300      	moveq	r3, #0
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	4b40      	ldr	r3, [pc, #256]	; (80002e8 <HAL_GPIO_EXTI_Callback+0x124>)
 80001e6:	701a      	strb	r2, [r3, #0]
	  button_status[1] =HAL_GPIO_ReadPin(GPIOA, GPIO_Pin);
 80001e8:	88fb      	ldrh	r3, [r7, #6]
 80001ea:	4619      	mov	r1, r3
 80001ec:	483d      	ldr	r0, [pc, #244]	; (80002e4 <HAL_GPIO_EXTI_Callback+0x120>)
 80001ee:	f002 f813 	bl	8002218 <HAL_GPIO_ReadPin>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	bf14      	ite	ne
 80001f8:	2301      	movne	r3, #1
 80001fa:	2300      	moveq	r3, #0
 80001fc:	b2da      	uxtb	r2, r3
 80001fe:	4b3a      	ldr	r3, [pc, #232]	; (80002e8 <HAL_GPIO_EXTI_Callback+0x124>)
 8000200:	705a      	strb	r2, [r3, #1]
  }while(button_status[0]!=button_status[1]);
 8000202:	4b39      	ldr	r3, [pc, #228]	; (80002e8 <HAL_GPIO_EXTI_Callback+0x124>)
 8000204:	781a      	ldrb	r2, [r3, #0]
 8000206:	4b38      	ldr	r3, [pc, #224]	; (80002e8 <HAL_GPIO_EXTI_Callback+0x124>)
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	429a      	cmp	r2, r3
 800020c:	d1df      	bne.n	80001ce <HAL_GPIO_EXTI_Callback+0xa>
   	//send data to nrf24
   	if(button_status[0] == false && button_status[1] == false){
 800020e:	4b36      	ldr	r3, [pc, #216]	; (80002e8 <HAL_GPIO_EXTI_Callback+0x124>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	f083 0301 	eor.w	r3, r3, #1
 8000216:	b2db      	uxtb	r3, r3
 8000218:	2b00      	cmp	r3, #0
 800021a:	d048      	beq.n	80002ae <HAL_GPIO_EXTI_Callback+0xea>
 800021c:	4b32      	ldr	r3, [pc, #200]	; (80002e8 <HAL_GPIO_EXTI_Callback+0x124>)
 800021e:	785b      	ldrb	r3, [r3, #1]
 8000220:	f083 0301 	eor.w	r3, r3, #1
 8000224:	b2db      	uxtb	r3, r3
 8000226:	2b00      	cmp	r3, #0
 8000228:	d041      	beq.n	80002ae <HAL_GPIO_EXTI_Callback+0xea>
   			if (GPIO_Pin == up_pin_Pin){
 800022a:	88fb      	ldrh	r3, [r7, #6]
 800022c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000230:	d103      	bne.n	800023a <HAL_GPIO_EXTI_Callback+0x76>
   		   		data_to_quad.tx_quad_data[0]= 1<< 0;
 8000232:	4b2e      	ldr	r3, [pc, #184]	; (80002ec <HAL_GPIO_EXTI_Callback+0x128>)
 8000234:	2201      	movs	r2, #1
 8000236:	701a      	strb	r2, [r3, #0]
 8000238:	e02c      	b.n	8000294 <HAL_GPIO_EXTI_Callback+0xd0>
   		   	}
   		   	else if(GPIO_Pin == down_pin_Pin){
 800023a:	88fb      	ldrh	r3, [r7, #6]
 800023c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000240:	d103      	bne.n	800024a <HAL_GPIO_EXTI_Callback+0x86>
   		   		data_to_quad.tx_quad_data[0]= 1<< 1;
 8000242:	4b2a      	ldr	r3, [pc, #168]	; (80002ec <HAL_GPIO_EXTI_Callback+0x128>)
 8000244:	2202      	movs	r2, #2
 8000246:	701a      	strb	r2, [r3, #0]
 8000248:	e024      	b.n	8000294 <HAL_GPIO_EXTI_Callback+0xd0>
   		   	}
   		   	else if(GPIO_Pin == setting_pin_0_Pin){
 800024a:	88fb      	ldrh	r3, [r7, #6]
 800024c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000250:	d103      	bne.n	800025a <HAL_GPIO_EXTI_Callback+0x96>
   		   		data_to_quad.tx_quad_data[0]= 1<< 2;
 8000252:	4b26      	ldr	r3, [pc, #152]	; (80002ec <HAL_GPIO_EXTI_Callback+0x128>)
 8000254:	2204      	movs	r2, #4
 8000256:	701a      	strb	r2, [r3, #0]
 8000258:	e01c      	b.n	8000294 <HAL_GPIO_EXTI_Callback+0xd0>
   			}
   			else if(GPIO_Pin == setting_pin_1_Pin){
 800025a:	88fb      	ldrh	r3, [r7, #6]
 800025c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000260:	d103      	bne.n	800026a <HAL_GPIO_EXTI_Callback+0xa6>
   				data_to_quad.tx_quad_data[0]= 1<< 3;
 8000262:	4b22      	ldr	r3, [pc, #136]	; (80002ec <HAL_GPIO_EXTI_Callback+0x128>)
 8000264:	2208      	movs	r2, #8
 8000266:	701a      	strb	r2, [r3, #0]
 8000268:	e014      	b.n	8000294 <HAL_GPIO_EXTI_Callback+0xd0>
   			}
   			else if(GPIO_Pin == setting_pin_2_Pin){
 800026a:	88fb      	ldrh	r3, [r7, #6]
 800026c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000270:	d103      	bne.n	800027a <HAL_GPIO_EXTI_Callback+0xb6>
   				data_to_quad.tx_quad_data[0]= 1<< 4;
 8000272:	4b1e      	ldr	r3, [pc, #120]	; (80002ec <HAL_GPIO_EXTI_Callback+0x128>)
 8000274:	2210      	movs	r2, #16
 8000276:	701a      	strb	r2, [r3, #0]
 8000278:	e00c      	b.n	8000294 <HAL_GPIO_EXTI_Callback+0xd0>
   			}
   			else{
   				data_to_quad.tx_quad_data[0] &= 0b11100000;
 800027a:	4b1c      	ldr	r3, [pc, #112]	; (80002ec <HAL_GPIO_EXTI_Callback+0x128>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	f023 031f 	bic.w	r3, r3, #31
 8000282:	b2da      	uxtb	r2, r3
 8000284:	4b19      	ldr	r3, [pc, #100]	; (80002ec <HAL_GPIO_EXTI_Callback+0x128>)
 8000286:	701a      	strb	r2, [r3, #0]
   				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800028e:	4818      	ldr	r0, [pc, #96]	; (80002f0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000290:	f001 ffd9 	bl	8002246 <HAL_GPIO_WritePin>
   			}
		if (data_to_quad.tx_quad_data[0] != data_to_quad.old_tx_quad_data[0]){
 8000294:	4b15      	ldr	r3, [pc, #84]	; (80002ec <HAL_GPIO_EXTI_Callback+0x128>)
 8000296:	781a      	ldrb	r2, [r3, #0]
 8000298:	4b14      	ldr	r3, [pc, #80]	; (80002ec <HAL_GPIO_EXTI_Callback+0x128>)
 800029a:	785b      	ldrb	r3, [r3, #1]
 800029c:	429a      	cmp	r2, r3
 800029e:	d013      	beq.n	80002c8 <HAL_GPIO_EXTI_Callback+0x104>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002a6:	4812      	ldr	r0, [pc, #72]	; (80002f0 <HAL_GPIO_EXTI_Callback+0x12c>)
 80002a8:	f001 ffcd 	bl	8002246 <HAL_GPIO_WritePin>
		if (data_to_quad.tx_quad_data[0] != data_to_quad.old_tx_quad_data[0]){
 80002ac:	e00c      	b.n	80002c8 <HAL_GPIO_EXTI_Callback+0x104>
		}
   	}
   	else{
   		data_to_quad.tx_quad_data[0] &= 0b11100000;
 80002ae:	4b0f      	ldr	r3, [pc, #60]	; (80002ec <HAL_GPIO_EXTI_Callback+0x128>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	f023 031f 	bic.w	r3, r3, #31
 80002b6:	b2da      	uxtb	r2, r3
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <HAL_GPIO_EXTI_Callback+0x128>)
 80002ba:	701a      	strb	r2, [r3, #0]
   		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c2:	480b      	ldr	r0, [pc, #44]	; (80002f0 <HAL_GPIO_EXTI_Callback+0x12c>)
 80002c4:	f001 ffbf 	bl	8002246 <HAL_GPIO_WritePin>
   	}
   	mbal_NRF24L01_Transmit(&nrf_tx_cfg, &data_to_quad.tx_quad_data[0]);
 80002c8:	4908      	ldr	r1, [pc, #32]	; (80002ec <HAL_GPIO_EXTI_Callback+0x128>)
 80002ca:	480a      	ldr	r0, [pc, #40]	; (80002f4 <HAL_GPIO_EXTI_Callback+0x130>)
 80002cc:	f000 fbff 	bl	8000ace <mbal_NRF24L01_Transmit>
   	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002d4:	4806      	ldr	r0, [pc, #24]	; (80002f0 <HAL_GPIO_EXTI_Callback+0x12c>)
 80002d6:	f001 ffce 	bl	8002276 <HAL_GPIO_TogglePin>
}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40010800 	.word	0x40010800
 80002e8:	200000dc 	.word	0x200000dc
 80002ec:	200000b0 	.word	0x200000b0
 80002f0:	40011000 	.word	0x40011000
 80002f4:	200000b8 	.word	0x200000b8

080002f8 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_IT(&hadc1);
 8000300:	485e      	ldr	r0, [pc, #376]	; (800047c <HAL_ADC_ConvCpltCallback+0x184>)
 8000302:	f001 fa4f 	bl	80017a4 <HAL_ADC_Stop_IT>
	ADC_Select_CH0();
 8000306:	f7ff ff21 	bl	800014c <ADC_Select_CH0>
    HAL_ADC_Start(&hadc1);
 800030a:	485c      	ldr	r0, [pc, #368]	; (800047c <HAL_ADC_ConvCpltCallback+0x184>)
 800030c:	f000 ffb4 	bl	8001278 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1000);
 8000310:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000314:	4859      	ldr	r0, [pc, #356]	; (800047c <HAL_ADC_ConvCpltCallback+0x184>)
 8000316:	f001 f889 	bl	800142c <HAL_ADC_PollForConversion>
    data_to_quad.dataread_sw[0] = HAL_ADC_GetValue(&hadc1);
 800031a:	4858      	ldr	r0, [pc, #352]	; (800047c <HAL_ADC_ConvCpltCallback+0x184>)
 800031c:	f001 fa76 	bl	800180c <HAL_ADC_GetValue>
 8000320:	4603      	mov	r3, r0
 8000322:	b29a      	uxth	r2, r3
 8000324:	4b56      	ldr	r3, [pc, #344]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 8000326:	805a      	strh	r2, [r3, #2]
	HAL_ADC_Stop(&hadc1);
 8000328:	4854      	ldr	r0, [pc, #336]	; (800047c <HAL_ADC_ConvCpltCallback+0x184>)
 800032a:	f001 f853 	bl	80013d4 <HAL_ADC_Stop>
	ADC_Select_CH1();
 800032e:	f7ff ff2b 	bl	8000188 <ADC_Select_CH1>
	HAL_ADC_Start(&hadc1);
 8000332:	4852      	ldr	r0, [pc, #328]	; (800047c <HAL_ADC_ConvCpltCallback+0x184>)
 8000334:	f000 ffa0 	bl	8001278 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000338:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800033c:	484f      	ldr	r0, [pc, #316]	; (800047c <HAL_ADC_ConvCpltCallback+0x184>)
 800033e:	f001 f875 	bl	800142c <HAL_ADC_PollForConversion>
	data_to_quad.dataread_sw[1] = HAL_ADC_GetValue(&hadc1);
 8000342:	484e      	ldr	r0, [pc, #312]	; (800047c <HAL_ADC_ConvCpltCallback+0x184>)
 8000344:	f001 fa62 	bl	800180c <HAL_ADC_GetValue>
 8000348:	4603      	mov	r3, r0
 800034a:	b29a      	uxth	r2, r3
 800034c:	4b4c      	ldr	r3, [pc, #304]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 800034e:	809a      	strh	r2, [r3, #4]
	HAL_ADC_Stop(&hadc1);
 8000350:	484a      	ldr	r0, [pc, #296]	; (800047c <HAL_ADC_ConvCpltCallback+0x184>)
 8000352:	f001 f83f 	bl	80013d4 <HAL_ADC_Stop>

	if( data_to_quad.dataread_sw[1]==0 && (data_to_quad.dataread_sw[0]>1500 && data_to_quad.dataread_sw[0]<2500)){
 8000356:	4b4a      	ldr	r3, [pc, #296]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 8000358:	889b      	ldrh	r3, [r3, #4]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d118      	bne.n	8000390 <HAL_ADC_ConvCpltCallback+0x98>
 800035e:	4b48      	ldr	r3, [pc, #288]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 8000360:	885b      	ldrh	r3, [r3, #2]
 8000362:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000366:	4293      	cmp	r3, r2
 8000368:	d912      	bls.n	8000390 <HAL_ADC_ConvCpltCallback+0x98>
 800036a:	4b45      	ldr	r3, [pc, #276]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 800036c:	885b      	ldrh	r3, [r3, #2]
 800036e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000372:	4293      	cmp	r3, r2
 8000374:	d80c      	bhi.n	8000390 <HAL_ADC_ConvCpltCallback+0x98>
		data_to_quad.tx_quad_data[0] = (data_to_quad.tx_quad_data[0] & 0x1f) |(1 << 5);
 8000376:	4b42      	ldr	r3, [pc, #264]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	b25b      	sxtb	r3, r3
 800037c:	f003 031f 	and.w	r3, r3, #31
 8000380:	b25b      	sxtb	r3, r3
 8000382:	f043 0320 	orr.w	r3, r3, #32
 8000386:	b25b      	sxtb	r3, r3
 8000388:	b2da      	uxtb	r2, r3
 800038a:	4b3d      	ldr	r3, [pc, #244]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 800038c:	701a      	strb	r2, [r3, #0]
 800038e:	e05f      	b.n	8000450 <HAL_ADC_ConvCpltCallback+0x158>
	}
	else if (data_to_quad.dataread_sw[0]>4000 && (data_to_quad.dataread_sw[1]>1500 && data_to_quad.dataread_sw[1]<2500) ){
 8000390:	4b3b      	ldr	r3, [pc, #236]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 8000392:	885b      	ldrh	r3, [r3, #2]
 8000394:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000398:	d918      	bls.n	80003cc <HAL_ADC_ConvCpltCallback+0xd4>
 800039a:	4b39      	ldr	r3, [pc, #228]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 800039c:	889b      	ldrh	r3, [r3, #4]
 800039e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d912      	bls.n	80003cc <HAL_ADC_ConvCpltCallback+0xd4>
 80003a6:	4b36      	ldr	r3, [pc, #216]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 80003a8:	889b      	ldrh	r3, [r3, #4]
 80003aa:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d80c      	bhi.n	80003cc <HAL_ADC_ConvCpltCallback+0xd4>
		data_to_quad.tx_quad_data[0] = (data_to_quad.tx_quad_data[0] & 0x1f) |(2 << 5);
 80003b2:	4b33      	ldr	r3, [pc, #204]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	b25b      	sxtb	r3, r3
 80003b8:	f003 031f 	and.w	r3, r3, #31
 80003bc:	b25b      	sxtb	r3, r3
 80003be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c2:	b25b      	sxtb	r3, r3
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	4b2e      	ldr	r3, [pc, #184]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 80003c8:	701a      	strb	r2, [r3, #0]
 80003ca:	e041      	b.n	8000450 <HAL_ADC_ConvCpltCallback+0x158>
	}
	else if(data_to_quad.dataread_sw[1]>4000 && (data_to_quad.dataread_sw[0]>1500 && data_to_quad.dataread_sw[0]<2500)){
 80003cc:	4b2c      	ldr	r3, [pc, #176]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 80003ce:	889b      	ldrh	r3, [r3, #4]
 80003d0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80003d4:	d918      	bls.n	8000408 <HAL_ADC_ConvCpltCallback+0x110>
 80003d6:	4b2a      	ldr	r3, [pc, #168]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 80003d8:	885b      	ldrh	r3, [r3, #2]
 80003da:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80003de:	4293      	cmp	r3, r2
 80003e0:	d912      	bls.n	8000408 <HAL_ADC_ConvCpltCallback+0x110>
 80003e2:	4b27      	ldr	r3, [pc, #156]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 80003e4:	885b      	ldrh	r3, [r3, #2]
 80003e6:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d80c      	bhi.n	8000408 <HAL_ADC_ConvCpltCallback+0x110>
		data_to_quad.tx_quad_data[0] = (data_to_quad.tx_quad_data[0] & 0x1f) |(3 << 5);
 80003ee:	4b24      	ldr	r3, [pc, #144]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	b25b      	sxtb	r3, r3
 80003f4:	f003 031f 	and.w	r3, r3, #31
 80003f8:	b25b      	sxtb	r3, r3
 80003fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80003fe:	b25b      	sxtb	r3, r3
 8000400:	b2da      	uxtb	r2, r3
 8000402:	4b1f      	ldr	r3, [pc, #124]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 8000404:	701a      	strb	r2, [r3, #0]
 8000406:	e023      	b.n	8000450 <HAL_ADC_ConvCpltCallback+0x158>
	}
	else if(data_to_quad.dataread_sw[0]==0 && (data_to_quad.dataread_sw[1]>1500 && data_to_quad.dataread_sw[1]<2500)){
 8000408:	4b1d      	ldr	r3, [pc, #116]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 800040a:	885b      	ldrh	r3, [r3, #2]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d118      	bne.n	8000442 <HAL_ADC_ConvCpltCallback+0x14a>
 8000410:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 8000412:	889b      	ldrh	r3, [r3, #4]
 8000414:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000418:	4293      	cmp	r3, r2
 800041a:	d912      	bls.n	8000442 <HAL_ADC_ConvCpltCallback+0x14a>
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 800041e:	889b      	ldrh	r3, [r3, #4]
 8000420:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000424:	4293      	cmp	r3, r2
 8000426:	d80c      	bhi.n	8000442 <HAL_ADC_ConvCpltCallback+0x14a>
		data_to_quad.tx_quad_data[0] = (data_to_quad.tx_quad_data[0] & 0x1f) |(4 << 5);
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	b25b      	sxtb	r3, r3
 800042e:	f003 031f 	and.w	r3, r3, #31
 8000432:	b25b      	sxtb	r3, r3
 8000434:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000438:	b25b      	sxtb	r3, r3
 800043a:	b2da      	uxtb	r2, r3
 800043c:	4b10      	ldr	r3, [pc, #64]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 800043e:	701a      	strb	r2, [r3, #0]
 8000440:	e006      	b.n	8000450 <HAL_ADC_ConvCpltCallback+0x158>
	}
	else{
		data_to_quad.tx_quad_data[0] = (data_to_quad.tx_quad_data[0] & 0x1f) |(0 << 5);
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	f003 031f 	and.w	r3, r3, #31
 800044a:	b2da      	uxtb	r2, r3
 800044c:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 800044e:	701a      	strb	r2, [r3, #0]
	}
	if (data_to_quad.tx_quad_data[0] != data_to_quad.old_tx_quad_data[0]){
 8000450:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 8000452:	781a      	ldrb	r2, [r3, #0]
 8000454:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 8000456:	785b      	ldrb	r3, [r3, #1]
 8000458:	429a      	cmp	r2, r3
 800045a:	d003      	beq.n	8000464 <HAL_ADC_ConvCpltCallback+0x16c>
		mbal_NRF24L01_Transmit(&nrf_tx_cfg, &data_to_quad.tx_quad_data[0]);
 800045c:	4908      	ldr	r1, [pc, #32]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 800045e:	4809      	ldr	r0, [pc, #36]	; (8000484 <HAL_ADC_ConvCpltCallback+0x18c>)
 8000460:	f000 fb35 	bl	8000ace <mbal_NRF24L01_Transmit>
		}
	else{
//		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_RESET);
	}
	//send data to nrf24
	data_to_quad.old_tx_quad_data[0] = data_to_quad.tx_quad_data[0];
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 8000466:	781a      	ldrb	r2, [r3, #0]
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <HAL_ADC_ConvCpltCallback+0x188>)
 800046a:	705a      	strb	r2, [r3, #1]

HAL_ADC_Start_IT(&hadc1);
 800046c:	4803      	ldr	r0, [pc, #12]	; (800047c <HAL_ADC_ConvCpltCallback+0x184>)
 800046e:	f001 f8e3 	bl	8001638 <HAL_ADC_Start_IT>
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000028 	.word	0x20000028
 8000480:	200000b0 	.word	0x200000b0
 8000484:	200000b8 	.word	0x200000b8

08000488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048c:	f000 fd96 	bl	8000fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000490:	f000 f864 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000494:	f000 f930 	bl	80006f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000498:	f000 f8ba 	bl	8000610 <MX_ADC1_Init>
  MX_SPI1_Init();
 800049c:	f000 f8f6 	bl	800068c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin( GPIOC, GPIO_PIN_13, GPIO_PIN_SET );
 80004a0:	2201      	movs	r2, #1
 80004a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a6:	4828      	ldr	r0, [pc, #160]	; (8000548 <main+0xc0>)
 80004a8:	f001 fecd 	bl	8002246 <HAL_GPIO_WritePin>
      //nrf_tx_cfg.RX_TX           = 0; //0 - TX
      nrf_tx_cfg.CE_pin          = CE_pin_Pin;
 80004ac:	4b27      	ldr	r3, [pc, #156]	; (800054c <main+0xc4>)
 80004ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004b2:	801a      	strh	r2, [r3, #0]
      nrf_tx_cfg.CE_port         = CE_pin_GPIO_Port;
 80004b4:	4b25      	ldr	r3, [pc, #148]	; (800054c <main+0xc4>)
 80004b6:	4a26      	ldr	r2, [pc, #152]	; (8000550 <main+0xc8>)
 80004b8:	605a      	str	r2, [r3, #4]
      nrf_tx_cfg.CSN_pin         = CSN_pin_Pin;
 80004ba:	4b24      	ldr	r3, [pc, #144]	; (800054c <main+0xc4>)
 80004bc:	2210      	movs	r2, #16
 80004be:	811a      	strh	r2, [r3, #8]
      nrf_tx_cfg.CSN_port        = CSN_pin_GPIO_Port;
 80004c0:	4b22      	ldr	r3, [pc, #136]	; (800054c <main+0xc4>)
 80004c2:	4a23      	ldr	r2, [pc, #140]	; (8000550 <main+0xc8>)
 80004c4:	60da      	str	r2, [r3, #12]
      nrf_tx_cfg.SPI             = &hspi1;
 80004c6:	4b21      	ldr	r3, [pc, #132]	; (800054c <main+0xc4>)
 80004c8:	4a22      	ldr	r2, [pc, #136]	; (8000554 <main+0xcc>)
 80004ca:	611a      	str	r2, [r3, #16]
      nrf_tx_cfg.radio_channel   = 15;
 80004cc:	4b1f      	ldr	r3, [pc, #124]	; (800054c <main+0xc4>)
 80004ce:	220f      	movs	r2, #15
 80004d0:	779a      	strb	r2, [r3, #30]
      nrf_tx_cfg.baud_rate       = TM_NRF24L01_DataRate_1M;
 80004d2:	4b1e      	ldr	r3, [pc, #120]	; (800054c <main+0xc4>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	77da      	strb	r2, [r3, #31]
      nrf_tx_cfg.payload_len     = 1;
 80004d8:	4b1c      	ldr	r3, [pc, #112]	; (800054c <main+0xc4>)
 80004da:	2201      	movs	r2, #1
 80004dc:	f883 2020 	strb.w	r2, [r3, #32]
      nrf_tx_cfg.crc_len         = 1;
 80004e0:	4b1a      	ldr	r3, [pc, #104]	; (800054c <main+0xc4>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      nrf_tx_cfg.output_power    = TM_NRF24L01_OutputPower_0dBm;
 80004e8:	4b18      	ldr	r3, [pc, #96]	; (800054c <main+0xc4>)
 80004ea:	2203      	movs	r2, #3
 80004ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      nrf_tx_cfg.rx_address[ 0 ] = 0xE7;
 80004f0:	4b16      	ldr	r3, [pc, #88]	; (800054c <main+0xc4>)
 80004f2:	22e7      	movs	r2, #231	; 0xe7
 80004f4:	751a      	strb	r2, [r3, #20]
      nrf_tx_cfg.rx_address[ 1 ] = 0xE7;
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <main+0xc4>)
 80004f8:	22e7      	movs	r2, #231	; 0xe7
 80004fa:	755a      	strb	r2, [r3, #21]
      nrf_tx_cfg.rx_address[ 2 ] = 0xE7;
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <main+0xc4>)
 80004fe:	22e7      	movs	r2, #231	; 0xe7
 8000500:	759a      	strb	r2, [r3, #22]
      nrf_tx_cfg.rx_address[ 3 ] = 0xE7;
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <main+0xc4>)
 8000504:	22e7      	movs	r2, #231	; 0xe7
 8000506:	75da      	strb	r2, [r3, #23]
      nrf_tx_cfg.rx_address[ 4 ] = 0xE7;
 8000508:	4b10      	ldr	r3, [pc, #64]	; (800054c <main+0xc4>)
 800050a:	22e7      	movs	r2, #231	; 0xe7
 800050c:	761a      	strb	r2, [r3, #24]
      nrf_tx_cfg.tx_address[ 0 ] = 0x7E;
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <main+0xc4>)
 8000510:	227e      	movs	r2, #126	; 0x7e
 8000512:	765a      	strb	r2, [r3, #25]
      nrf_tx_cfg.tx_address[ 1 ] = 0x7E;
 8000514:	4b0d      	ldr	r3, [pc, #52]	; (800054c <main+0xc4>)
 8000516:	227e      	movs	r2, #126	; 0x7e
 8000518:	769a      	strb	r2, [r3, #26]
      nrf_tx_cfg.tx_address[ 2 ] = 0x7E;
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <main+0xc4>)
 800051c:	227e      	movs	r2, #126	; 0x7e
 800051e:	76da      	strb	r2, [r3, #27]
      nrf_tx_cfg.tx_address[ 3 ] = 0x7E;
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <main+0xc4>)
 8000522:	227e      	movs	r2, #126	; 0x7e
 8000524:	771a      	strb	r2, [r3, #28]
      nrf_tx_cfg.tx_address[ 4 ] = 0x7E;
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <main+0xc4>)
 8000528:	227e      	movs	r2, #126	; 0x7e
 800052a:	775a      	strb	r2, [r3, #29]
      /* Data received and data for send */
      mbal_NRF24L01_Init( &nrf_tx_cfg );
 800052c:	4807      	ldr	r0, [pc, #28]	; (800054c <main+0xc4>)
 800052e:	f000 f96a 	bl	8000806 <mbal_NRF24L01_Init>
      HAL_Delay(500);
 8000532:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000536:	f000 fda3 	bl	8001080 <HAL_Delay>
      HAL_ADC_Start_IT(&hadc1);
 800053a:	4807      	ldr	r0, [pc, #28]	; (8000558 <main+0xd0>)
 800053c:	f001 f87c 	bl	8001638 <HAL_ADC_Start_IT>
      HAL_Delay(200);
 8000540:	20c8      	movs	r0, #200	; 0xc8
 8000542:	f000 fd9d 	bl	8001080 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000546:	e7fe      	b.n	8000546 <main+0xbe>
 8000548:	40011000 	.word	0x40011000
 800054c:	200000b8 	.word	0x200000b8
 8000550:	40010800 	.word	0x40010800
 8000554:	20000058 	.word	0x20000058
 8000558:	20000028 	.word	0x20000028

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000566:	2228      	movs	r2, #40	; 0x28
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f002 feba 	bl	80032e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000594:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059a:	2301      	movs	r3, #1
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80005a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 fe90 	bl	80022d8 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005be:	f000 f91d 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2302      	movs	r3, #2
 80005c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2101      	movs	r1, #1
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 f8fd 	bl	80027dc <HAL_RCC_ClockConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005e8:	f000 f908 	bl	80007fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005ec:	2302      	movs	r3, #2
 80005ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80005f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005f4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 fa73 	bl	8002ae4 <HAL_RCCEx_PeriphCLKConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000604:	f000 f8fa 	bl	80007fc <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3750      	adds	r7, #80	; 0x50
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_ADC1_Init+0x74>)
 8000622:	4a19      	ldr	r2, [pc, #100]	; (8000688 <MX_ADC1_Init+0x78>)
 8000624:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_ADC1_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_ADC1_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ADC1_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_ADC1_Init+0x74>)
 800063a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800063e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_ADC1_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC1_Init+0x74>)
 8000648:	2201      	movs	r2, #1
 800064a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_ADC1_Init+0x74>)
 800064e:	f000 fd3b 	bl	80010c8 <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000658:	f000 f8d0 	bl	80007fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000660:	2301      	movs	r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	4619      	mov	r1, r3
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_ADC1_Init+0x74>)
 800066e:	f001 f9a5 	bl	80019bc <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000678:	f000 f8c0 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000028 	.word	0x20000028
 8000688:	40012400 	.word	0x40012400

0800068c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_SPI1_Init+0x64>)
 8000692:	4a18      	ldr	r2, [pc, #96]	; (80006f4 <MX_SPI1_Init+0x68>)
 8000694:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_SPI1_Init+0x64>)
 8000698:	f44f 7282 	mov.w	r2, #260	; 0x104
 800069c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006c0:	2230      	movs	r2, #48	; 0x30
 80006c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006d8:	220a      	movs	r2, #10
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_SPI1_Init+0x64>)
 80006de:	f002 fb77 	bl	8002dd0 <HAL_SPI_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006e8:	f000 f888 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000058 	.word	0x20000058
 80006f4:	40013000 	.word	0x40013000

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070c:	4b37      	ldr	r3, [pc, #220]	; (80007ec <MX_GPIO_Init+0xf4>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a36      	ldr	r2, [pc, #216]	; (80007ec <MX_GPIO_Init+0xf4>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b34      	ldr	r3, [pc, #208]	; (80007ec <MX_GPIO_Init+0xf4>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0310 	and.w	r3, r3, #16
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000724:	4b31      	ldr	r3, [pc, #196]	; (80007ec <MX_GPIO_Init+0xf4>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a30      	ldr	r2, [pc, #192]	; (80007ec <MX_GPIO_Init+0xf4>)
 800072a:	f043 0320 	orr.w	r3, r3, #32
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b2e      	ldr	r3, [pc, #184]	; (80007ec <MX_GPIO_Init+0xf4>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0320 	and.w	r3, r3, #32
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <MX_GPIO_Init+0xf4>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a2a      	ldr	r2, [pc, #168]	; (80007ec <MX_GPIO_Init+0xf4>)
 8000742:	f043 0304 	orr.w	r3, r3, #4
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b28      	ldr	r3, [pc, #160]	; (80007ec <MX_GPIO_Init+0xf4>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0304 	and.w	r3, r3, #4
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075a:	4825      	ldr	r0, [pc, #148]	; (80007f0 <MX_GPIO_Init+0xf8>)
 800075c:	f001 fd73 	bl	8002246 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_pin_Pin|CE_pin_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000766:	4823      	ldr	r0, [pc, #140]	; (80007f4 <MX_GPIO_Init+0xfc>)
 8000768:	f001 fd6d 	bl	8002246 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800076c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2302      	movs	r3, #2
 800077c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	4619      	mov	r1, r3
 8000784:	481a      	ldr	r0, [pc, #104]	; (80007f0 <MX_GPIO_Init+0xf8>)
 8000786:	f001 fbc3 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_pin_Pin CE_pin_Pin */
  GPIO_InitStruct.Pin = CSN_pin_Pin|CE_pin_Pin;
 800078a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800078e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2302      	movs	r3, #2
 800079a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	4619      	mov	r1, r3
 80007a2:	4814      	ldr	r0, [pc, #80]	; (80007f4 <MX_GPIO_Init+0xfc>)
 80007a4:	f001 fbb4 	bl	8001f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : up_pin_Pin down_pin_Pin setting_pin_0_Pin setting_pin_1_Pin
                           setting_pin_2_Pin */
  GPIO_InitStruct.Pin = up_pin_Pin|down_pin_Pin|setting_pin_0_Pin|setting_pin_1_Pin
 80007a8:	f44f 431e 	mov.w	r3, #40448	; 0x9e00
 80007ac:	613b      	str	r3, [r7, #16]
                          |setting_pin_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_GPIO_Init+0x100>)
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 0310 	add.w	r3, r7, #16
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_GPIO_Init+0xfc>)
 80007be:	f001 fba7 	bl	8001f10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	2017      	movs	r0, #23
 80007c8:	f001 fb6b 	bl	8001ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007cc:	2017      	movs	r0, #23
 80007ce:	f001 fb84 	bl	8001eda <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	2028      	movs	r0, #40	; 0x28
 80007d8:	f001 fb63 	bl	8001ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007dc:	2028      	movs	r0, #40	; 0x28
 80007de:	f001 fb7c 	bl	8001eda <HAL_NVIC_EnableIRQ>

}
 80007e2:	bf00      	nop
 80007e4:	3720      	adds	r7, #32
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40011000 	.word	0x40011000
 80007f4:	40010800 	.word	0x40010800
 80007f8:	10310000 	.word	0x10310000

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>

08000806 <mbal_NRF24L01_Init>:
//void mbal_NRF24L01_SetChannel( NRF24L01_config_TypeDef*, uint8_t );
//void mbal_NRF24L01_SetRF( NRF24L01_config_TypeDef*, TM_NRF24L01_DataRate_t, TM_NRF24L01_OutputPower_t );
//void mbal_NRF24L01_Clear_Interrupts( NRF24L01_config_TypeDef* );


uint8_t mbal_NRF24L01_Init( NRF24L01_config_TypeDef *nrf_config ) {
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
	/* CSN high = disable SPI */
	mbal_NRF24L01_CSN_HIGH( nrf_config );
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f000 f89f 	bl	8000952 <mbal_NRF24L01_CSN_HIGH>

	/* CE low = disable TX/RX */
	mbal_NRF24L01_CE_LOW( nrf_config );
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f000 f86c 	bl	80008f2 <mbal_NRF24L01_CE_LOW>

	/* Max payload is 32bytes */
	if( nrf_config->payload_len > 32 ) {
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000820:	2b20      	cmp	r3, #32
 8000822:	d903      	bls.n	800082c <mbal_NRF24L01_Init+0x26>
		nrf_config->payload_len = 32;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2220      	movs	r2, #32
 8000828:	f883 2020 	strb.w	r2, [r3, #32]
	}

	/* Reset nRF24L01+ to power on registers values */
	mbal_NRF24L01_SoftwareReset( nrf_config );
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f000 f97f 	bl	8000b30 <mbal_NRF24L01_SoftwareReset>

	/* Channel select */
	mbal_NRF24L01_SetChannel( nrf_config );
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f000 fa2a 	bl	8000c8c <mbal_NRF24L01_SetChannel>

	/* Set pipeline to max possible 32 bytes */
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P0, nrf_config->payload_len ); // Auto-ACK pipe
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800083e:	461a      	mov	r2, r3
 8000840:	2111      	movs	r1, #17
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f000 f8c5 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P1, nrf_config->payload_len ); // Data payload pipe
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800084e:	461a      	mov	r2, r3
 8000850:	2112      	movs	r1, #18
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f000 f8bd 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P2, nrf_config->payload_len );
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800085e:	461a      	mov	r2, r3
 8000860:	2113      	movs	r1, #19
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f000 f8b5 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P3, nrf_config->payload_len );
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800086e:	461a      	mov	r2, r3
 8000870:	2114      	movs	r1, #20
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f000 f8ad 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P4, nrf_config->payload_len );
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800087e:	461a      	mov	r2, r3
 8000880:	2115      	movs	r1, #21
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f000 f8a5 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P5, nrf_config->payload_len );
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800088e:	461a      	mov	r2, r3
 8000890:	2116      	movs	r1, #22
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f000 f89d 	bl	80009d2 <mbal_NRF24L01_WriteRegister>

	/* Set RF settings (2mbps, output power) */
	mbal_NRF24L01_SetRF( nrf_config );
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f000 fa0a 	bl	8000cb2 <mbal_NRF24L01_SetRF>

	/* Config register */
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_CONFIG, NRF24L01_CONFIG );
 800089e:	2278      	movs	r2, #120	; 0x78
 80008a0:	2100      	movs	r1, #0
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f000 f895 	bl	80009d2 <mbal_NRF24L01_WriteRegister>

	/* Enable auto-acknowledgment for all pipes */
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_EN_AA, 0x00 ); //0x3F
 80008a8:	2200      	movs	r2, #0
 80008aa:	2101      	movs	r1, #1
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f000 f890 	bl	80009d2 <mbal_NRF24L01_WriteRegister>

	/* Enable RX addresses */
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_EN_RXADDR, 0x3F );
 80008b2:	223f      	movs	r2, #63	; 0x3f
 80008b4:	2102      	movs	r1, #2
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f88b 	bl	80009d2 <mbal_NRF24L01_WriteRegister>

	/* Auto retransmit delay: 1000 (4x250) us and Up to 15 retransmit trials */
	//mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_SETUP_RETR, 0x4F );
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_SETUP_RETR, 0x40 ); //retransmit disabled
 80008bc:	2240      	movs	r2, #64	; 0x40
 80008be:	2104      	movs	r1, #4
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f000 f886 	bl	80009d2 <mbal_NRF24L01_WriteRegister>

	/* Dynamic length configurations: No dynamic length */
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_DYNPD, (0 << NRF24L01_DPL_P0) | (0 << NRF24L01_DPL_P1) | (0 << NRF24L01_DPL_P2) | (0 << NRF24L01_DPL_P3) | (0 << NRF24L01_DPL_P4) | (0 << NRF24L01_DPL_P5));
 80008c6:	2200      	movs	r2, #0
 80008c8:	211c      	movs	r1, #28
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f000 f881 	bl	80009d2 <mbal_NRF24L01_WriteRegister>

	/* Clear FIFOs */
	mbal_NRF24L01_FLUSH_TX( nrf_config );
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f000 f84e 	bl	8000972 <mbal_NRF24L01_FLUSH_TX>
	mbal_NRF24L01_FLUSH_RX( nrf_config );
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f000 f863 	bl	80009a2 <mbal_NRF24L01_FLUSH_RX>

	/* Clear interrupts */
	mbal_NRF24L01_Clear_Interrupts( nrf_config );
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f000 fa26 	bl	8000d2e <mbal_NRF24L01_Clear_Interrupts>

	/* Go to RX mode */
	mbal_NRF24L01_PowerUpRx( nrf_config );
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f000 f8da 	bl	8000a9c <mbal_NRF24L01_PowerUpRx>

	/* Return OK */
	return 1;
 80008e8:	2301      	movs	r3, #1
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <mbal_NRF24L01_CE_LOW>:
//#define NRF24L01_CE_LOW				TM_GPIO_SetPinLow(NRF24L01_CE_PORT, NRF24L01_CE_PIN)
//#define NRF24L01_CE_HIGH			TM_GPIO_SetPinHigh(NRF24L01_CE_PORT, NRF24L01_CE_PIN)
//#define NRF24L01_CSN_LOW			TM_GPIO_SetPinLow(NRF24L01_CSN_PORT, NRF24L01_CSN_PIN)
//#define NRF24L01_CSN_HIGH			TM_GPIO_SetPinHigh(NRF24L01_CSN_PORT, NRF24L01_CSN_PIN)

void mbal_NRF24L01_CE_LOW( NRF24L01_config_TypeDef *nrf_config ) {
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin( nrf_config->CE_port, nrf_config->CE_pin, GPIO_PIN_RESET );
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6858      	ldr	r0, [r3, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	2200      	movs	r2, #0
 8000904:	4619      	mov	r1, r3
 8000906:	f001 fc9e 	bl	8002246 <HAL_GPIO_WritePin>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <mbal_NRF24L01_CE_HIGH>:

void mbal_NRF24L01_CE_HIGH( NRF24L01_config_TypeDef *nrf_config ) {
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin( nrf_config->CE_port, nrf_config->CE_pin, GPIO_PIN_SET );
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6858      	ldr	r0, [r3, #4]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	2201      	movs	r2, #1
 8000924:	4619      	mov	r1, r3
 8000926:	f001 fc8e 	bl	8002246 <HAL_GPIO_WritePin>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <mbal_NRF24L01_CSN_LOW>:

void mbal_NRF24L01_CSN_LOW( NRF24L01_config_TypeDef *nrf_config ) {
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin( nrf_config->CSN_port, nrf_config->CSN_pin, GPIO_PIN_RESET );
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	68d8      	ldr	r0, [r3, #12]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	891b      	ldrh	r3, [r3, #8]
 8000942:	2200      	movs	r2, #0
 8000944:	4619      	mov	r1, r3
 8000946:	f001 fc7e 	bl	8002246 <HAL_GPIO_WritePin>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <mbal_NRF24L01_CSN_HIGH>:

void mbal_NRF24L01_CSN_HIGH( NRF24L01_config_TypeDef *nrf_config ) {
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin( nrf_config->CSN_port, nrf_config->CSN_pin, GPIO_PIN_SET );
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	68d8      	ldr	r0, [r3, #12]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	891b      	ldrh	r3, [r3, #8]
 8000962:	2201      	movs	r2, #1
 8000964:	4619      	mov	r1, r3
 8000966:	f001 fc6e 	bl	8002246 <HAL_GPIO_WritePin>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <mbal_NRF24L01_FLUSH_TX>:

/* Flush FIFOs */
//#define NRF24L01_FLUSH_TX					do { NRF24L01_CSN_LOW; TM_SPI_Send(NRF24L01_SPI, NRF24L01_FLUSH_TX_MASK); NRF24L01_CSN_HIGH; } while (0)
//#define NRF24L01_FLUSH_RX					do { NRF24L01_CSN_LOW; TM_SPI_Send(NRF24L01_SPI, NRF24L01_FLUSH_RX_MASK); NRF24L01_CSN_HIGH; } while (0)

void mbal_NRF24L01_FLUSH_TX( NRF24L01_config_TypeDef *nrf_config ) {
 8000972:	b580      	push	{r7, lr}
 8000974:	b084      	sub	sp, #16
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
	do {
		mbal_NRF24L01_CSN_LOW( nrf_config );
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ffd9 	bl	8000932 <mbal_NRF24L01_CSN_LOW>
		unsigned char cData = NRF24L01_FLUSH_TX_MASK;
 8000980:	23e1      	movs	r3, #225	; 0xe1
 8000982:	73fb      	strb	r3, [r7, #15]
		HAL_SPI_Transmit( nrf_config->SPI, &cData, 1, 100 );
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6918      	ldr	r0, [r3, #16]
 8000988:	f107 010f 	add.w	r1, r7, #15
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	f002 faa2 	bl	8002ed8 <HAL_SPI_Transmit>
		mbal_NRF24L01_CSN_HIGH( nrf_config );
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ffdc 	bl	8000952 <mbal_NRF24L01_CSN_HIGH>
	} while( 0 );
}
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <mbal_NRF24L01_FLUSH_RX>:

void mbal_NRF24L01_FLUSH_RX( NRF24L01_config_TypeDef *nrf_config ) {
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b084      	sub	sp, #16
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
	do {
		mbal_NRF24L01_CSN_LOW( nrf_config );
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ffc1 	bl	8000932 <mbal_NRF24L01_CSN_LOW>
		unsigned char cData = NRF24L01_FLUSH_RX_MASK;
 80009b0:	23e2      	movs	r3, #226	; 0xe2
 80009b2:	73fb      	strb	r3, [r7, #15]
		HAL_SPI_Transmit( nrf_config->SPI, &cData, 1, 100 );
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6918      	ldr	r0, [r3, #16]
 80009b8:	f107 010f 	add.w	r1, r7, #15
 80009bc:	2364      	movs	r3, #100	; 0x64
 80009be:	2201      	movs	r2, #1
 80009c0:	f002 fa8a 	bl	8002ed8 <HAL_SPI_Transmit>
		mbal_NRF24L01_CSN_HIGH( nrf_config );
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ffc4 	bl	8000952 <mbal_NRF24L01_CSN_HIGH>
	} while( 0 );
}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <mbal_NRF24L01_WriteRegister>:
	//TM_SPI_ReadMulti( nrf_config, data, NRF24L01_NOP_MASK, count );
	HAL_SPI_TransmitReceive( nrf_config->SPI, txData, rxData, count, 100 );
	mbal_NRF24L01_CSN_HIGH( nrf_config );
}

void mbal_NRF24L01_WriteRegister( NRF24L01_config_TypeDef *nrf_config, uint8_t reg, uint8_t value ) {
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b084      	sub	sp, #16
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
 80009da:	460b      	mov	r3, r1
 80009dc:	70fb      	strb	r3, [r7, #3]
 80009de:	4613      	mov	r3, r2
 80009e0:	70bb      	strb	r3, [r7, #2]
	unsigned char cData;

	mbal_NRF24L01_CSN_LOW( nrf_config );
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ffa5 	bl	8000932 <mbal_NRF24L01_CSN_LOW>
	//TM_SPI_Send(NRF24L01_SPI, NRF24L01_WRITE_REGISTER_MASK(reg));
	cData = NRF24L01_WRITE_REGISTER_MASK( reg );
 80009e8:	78fb      	ldrb	r3, [r7, #3]
 80009ea:	f003 031f 	and.w	r3, r3, #31
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	f043 0320 	orr.w	r3, r3, #32
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit( nrf_config->SPI, &cData, 1, 100 );
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6918      	ldr	r0, [r3, #16]
 80009fc:	f107 010f 	add.w	r1, r7, #15
 8000a00:	2364      	movs	r3, #100	; 0x64
 8000a02:	2201      	movs	r2, #1
 8000a04:	f002 fa68 	bl	8002ed8 <HAL_SPI_Transmit>
	//TM_SPI_Send(NRF24L01_SPI, value);
	HAL_SPI_Transmit( nrf_config->SPI, &value, 1, 100 );
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6918      	ldr	r0, [r3, #16]
 8000a0c:	1cb9      	adds	r1, r7, #2
 8000a0e:	2364      	movs	r3, #100	; 0x64
 8000a10:	2201      	movs	r2, #1
 8000a12:	f002 fa61 	bl	8002ed8 <HAL_SPI_Transmit>
	mbal_NRF24L01_CSN_HIGH( nrf_config );
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff ff9b 	bl	8000952 <mbal_NRF24L01_CSN_HIGH>
}
 8000a1c:	bf00      	nop
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <mbal_NRF24L01_WriteRegisterMulti>:

void mbal_NRF24L01_WriteRegisterMulti( NRF24L01_config_TypeDef *nrf_config, uint8_t reg, uint8_t *data, uint8_t count ) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	607a      	str	r2, [r7, #4]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	460b      	mov	r3, r1
 8000a32:	72fb      	strb	r3, [r7, #11]
 8000a34:	4613      	mov	r3, r2
 8000a36:	72bb      	strb	r3, [r7, #10]
	unsigned char cData;

	mbal_NRF24L01_CSN_LOW( nrf_config );
 8000a38:	68f8      	ldr	r0, [r7, #12]
 8000a3a:	f7ff ff7a 	bl	8000932 <mbal_NRF24L01_CSN_LOW>
	//TM_SPI_Send(NRF24L01_SPI, NRF24L01_WRITE_REGISTER_MASK( reg ));
	cData = NRF24L01_WRITE_REGISTER_MASK( reg );
 8000a3e:	7afb      	ldrb	r3, [r7, #11]
 8000a40:	f003 031f 	and.w	r3, r3, #31
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	f043 0320 	orr.w	r3, r3, #32
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit( nrf_config->SPI, &cData, 1, 100 );
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	6918      	ldr	r0, [r3, #16]
 8000a52:	f107 0117 	add.w	r1, r7, #23
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f002 fa3d 	bl	8002ed8 <HAL_SPI_Transmit>
	//TM_SPI_WriteMulti(NRF24L01_SPI, data, count);
	HAL_SPI_Transmit( nrf_config->SPI, data, count, 100 );
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6918      	ldr	r0, [r3, #16]
 8000a62:	7abb      	ldrb	r3, [r7, #10]
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	2364      	movs	r3, #100	; 0x64
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	f002 fa35 	bl	8002ed8 <HAL_SPI_Transmit>
	mbal_NRF24L01_CSN_HIGH( nrf_config );
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	f7ff ff6f 	bl	8000952 <mbal_NRF24L01_CSN_HIGH>
}
 8000a74:	bf00      	nop
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <mbal_NRF24L01_PowerUpTx>:

void mbal_NRF24L01_PowerUpTx( NRF24L01_config_TypeDef *nrf_config ) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	mbal_NRF24L01_Clear_Interrupts( nrf_config );
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f000 f952 	bl	8000d2e <mbal_NRF24L01_Clear_Interrupts>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_CONFIG, NRF24L01_CONFIG | (0 << NRF24L01_PRIM_RX) | (1 << NRF24L01_PWR_UP));
 8000a8a:	227a      	movs	r2, #122	; 0x7a
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f7ff ff9f 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <mbal_NRF24L01_PowerUpRx>:

void mbal_NRF24L01_PowerUpRx( NRF24L01_config_TypeDef *nrf_config ) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	/* Disable RX/TX mode */
	mbal_NRF24L01_CE_LOW( nrf_config );
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff24 	bl	80008f2 <mbal_NRF24L01_CE_LOW>
	/* Clear RX buffer */
	mbal_NRF24L01_FLUSH_RX( nrf_config );
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff ff79 	bl	80009a2 <mbal_NRF24L01_FLUSH_RX>
	/* Clear interrupts */
	mbal_NRF24L01_Clear_Interrupts( nrf_config );
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 f93c 	bl	8000d2e <mbal_NRF24L01_Clear_Interrupts>
	/* Setup RX mode */
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_CONFIG, NRF24L01_CONFIG | 1 << NRF24L01_PWR_UP | 1 << NRF24L01_PRIM_RX);
 8000ab6:	227b      	movs	r2, #123	; 0x7b
 8000ab8:	2100      	movs	r1, #0
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ff89 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	/* Start listening */
	mbal_NRF24L01_CE_HIGH( nrf_config );
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff26 	bl	8000912 <mbal_NRF24L01_CE_HIGH>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <mbal_NRF24L01_Transmit>:
void mbal_NRF24L01_PowerDown( NRF24L01_config_TypeDef *nrf_config ) {
	mbal_NRF24L01_CE_LOW( nrf_config );
	mbal_NRF24L01_WriteBit( nrf_config, NRF24L01_REG_CONFIG, NRF24L01_PWR_UP, 0 );
}

void mbal_NRF24L01_Transmit( NRF24L01_config_TypeDef *nrf_config, uint8_t *data ) {
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b084      	sub	sp, #16
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	6039      	str	r1, [r7, #0]
	uint8_t count = nrf_config->payload_len;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ade:	73fb      	strb	r3, [r7, #15]
	unsigned char cData;

	/* Chip enable put to low, disable it */
	mbal_NRF24L01_CE_LOW( nrf_config );
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff ff06 	bl	80008f2 <mbal_NRF24L01_CE_LOW>

	/* Go to power up tx mode */
	mbal_NRF24L01_PowerUpTx( nrf_config );
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ffc8 	bl	8000a7c <mbal_NRF24L01_PowerUpTx>

	/* Clear TX FIFO from NRF24L01+ */
	mbal_NRF24L01_FLUSH_TX( nrf_config );
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff40 	bl	8000972 <mbal_NRF24L01_FLUSH_TX>

	/* Send payload to nRF24L01+ */
	mbal_NRF24L01_CSN_LOW( nrf_config );
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff ff1d 	bl	8000932 <mbal_NRF24L01_CSN_LOW>
	/* Send write payload command */
	//TM_SPI_Send(NRF24L01_SPI, NRF24L01_W_TX_PAYLOAD_MASK);
	cData = NRF24L01_W_TX_PAYLOAD_MASK;
 8000af8:	23a0      	movs	r3, #160	; 0xa0
 8000afa:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit( nrf_config->SPI, &cData, 1, 100 );
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6918      	ldr	r0, [r3, #16]
 8000b00:	f107 010e 	add.w	r1, r7, #14
 8000b04:	2364      	movs	r3, #100	; 0x64
 8000b06:	2201      	movs	r2, #1
 8000b08:	f002 f9e6 	bl	8002ed8 <HAL_SPI_Transmit>
	/* Fill payload with data*/
	//TM_SPI_WriteMulti(NRF24L01_SPI, data, count);
	HAL_SPI_Transmit( nrf_config->SPI, data, count, 100 );
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6918      	ldr	r0, [r3, #16]
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	2364      	movs	r3, #100	; 0x64
 8000b16:	6839      	ldr	r1, [r7, #0]
 8000b18:	f002 f9de 	bl	8002ed8 <HAL_SPI_Transmit>
	/* Disable SPI */
	mbal_NRF24L01_CSN_HIGH( nrf_config );
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff18 	bl	8000952 <mbal_NRF24L01_CSN_HIGH>

	/* Send data! */
	mbal_NRF24L01_CE_HIGH( nrf_config );
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff fef5 	bl	8000912 <mbal_NRF24L01_CE_HIGH>
}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <mbal_NRF24L01_SoftwareReset>:

	/* Still sending */
	return TM_NRF24L01_Transmit_Status_Sending;
}

void mbal_NRF24L01_SoftwareReset( NRF24L01_config_TypeDef *nrf_config ) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	uint8_t data[5];

	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_CONFIG, 	 NRF24L01_REG_DEFAULT_VAL_CONFIG );
 8000b38:	2208      	movs	r2, #8
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ff48 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_EN_AA,		 NRF24L01_REG_DEFAULT_VAL_EN_AA );
 8000b42:	223f      	movs	r2, #63	; 0x3f
 8000b44:	2101      	movs	r1, #1
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ff43 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_EN_RXADDR,  NRF24L01_REG_DEFAULT_VAL_EN_RXADDR );
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	2102      	movs	r1, #2
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff3e 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_SETUP_AW, 	 NRF24L01_REG_DEFAULT_VAL_SETUP_AW );
 8000b56:	2203      	movs	r2, #3
 8000b58:	2103      	movs	r1, #3
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ff39 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_SETUP_RETR, NRF24L01_REG_DEFAULT_VAL_SETUP_RETR );
 8000b60:	2203      	movs	r2, #3
 8000b62:	2104      	movs	r1, #4
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff ff34 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RF_CH, 	 NRF24L01_REG_DEFAULT_VAL_RF_CH );
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	2105      	movs	r1, #5
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff ff2f 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RF_SETUP, 	 NRF24L01_REG_DEFAULT_VAL_RF_SETUP );
 8000b74:	220e      	movs	r2, #14
 8000b76:	2106      	movs	r1, #6
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff2a 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_STATUS, 	 NRF24L01_REG_DEFAULT_VAL_STATUS );
 8000b7e:	220e      	movs	r2, #14
 8000b80:	2107      	movs	r1, #7
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff ff25 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_OBSERVE_TX, NRF24L01_REG_DEFAULT_VAL_OBSERVE_TX );
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2108      	movs	r1, #8
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ff20 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RPD, 		 NRF24L01_REG_DEFAULT_VAL_RPD );
 8000b92:	2200      	movs	r2, #0
 8000b94:	2109      	movs	r1, #9
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ff1b 	bl	80009d2 <mbal_NRF24L01_WriteRegister>

	//P0
	data[0] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_0;
 8000b9c:	23e7      	movs	r3, #231	; 0xe7
 8000b9e:	723b      	strb	r3, [r7, #8]
	data[1] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_1;
 8000ba0:	23e7      	movs	r3, #231	; 0xe7
 8000ba2:	727b      	strb	r3, [r7, #9]
	data[2] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_2;
 8000ba4:	23e7      	movs	r3, #231	; 0xe7
 8000ba6:	72bb      	strb	r3, [r7, #10]
	data[3] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_3;
 8000ba8:	23e7      	movs	r3, #231	; 0xe7
 8000baa:	72fb      	strb	r3, [r7, #11]
	data[4] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_4;
 8000bac:	23e7      	movs	r3, #231	; 0xe7
 8000bae:	733b      	strb	r3, [r7, #12]
	mbal_NRF24L01_WriteRegisterMulti( nrf_config, NRF24L01_REG_RX_ADDR_P0, data, 5 );
 8000bb0:	f107 0208 	add.w	r2, r7, #8
 8000bb4:	2305      	movs	r3, #5
 8000bb6:	210a      	movs	r1, #10
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ff33 	bl	8000a24 <mbal_NRF24L01_WriteRegisterMulti>

	//P1
	data[0] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_0;
 8000bbe:	23c2      	movs	r3, #194	; 0xc2
 8000bc0:	723b      	strb	r3, [r7, #8]
	data[1] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_1;
 8000bc2:	23c2      	movs	r3, #194	; 0xc2
 8000bc4:	727b      	strb	r3, [r7, #9]
	data[2] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_2;
 8000bc6:	23c2      	movs	r3, #194	; 0xc2
 8000bc8:	72bb      	strb	r3, [r7, #10]
	data[3] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_3;
 8000bca:	23c2      	movs	r3, #194	; 0xc2
 8000bcc:	72fb      	strb	r3, [r7, #11]
	data[4] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_4;
 8000bce:	23c2      	movs	r3, #194	; 0xc2
 8000bd0:	733b      	strb	r3, [r7, #12]
	mbal_NRF24L01_WriteRegisterMulti( nrf_config, NRF24L01_REG_RX_ADDR_P1, data, 5 );
 8000bd2:	f107 0208 	add.w	r2, r7, #8
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	210b      	movs	r1, #11
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ff22 	bl	8000a24 <mbal_NRF24L01_WriteRegisterMulti>

	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_ADDR_P2, NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P2 );
 8000be0:	22c3      	movs	r2, #195	; 0xc3
 8000be2:	210c      	movs	r1, #12
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fef4 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_ADDR_P3, NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P3 );
 8000bea:	22c4      	movs	r2, #196	; 0xc4
 8000bec:	210d      	movs	r1, #13
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff feef 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_ADDR_P4, NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P4 );
 8000bf4:	22c5      	movs	r2, #197	; 0xc5
 8000bf6:	210e      	movs	r1, #14
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff feea 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_ADDR_P5, NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P5 );
 8000bfe:	22c6      	movs	r2, #198	; 0xc6
 8000c00:	210f      	movs	r1, #15
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff fee5 	bl	80009d2 <mbal_NRF24L01_WriteRegister>

	//TX
	data[0] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_0;
 8000c08:	23e7      	movs	r3, #231	; 0xe7
 8000c0a:	723b      	strb	r3, [r7, #8]
	data[1] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_1;
 8000c0c:	23e7      	movs	r3, #231	; 0xe7
 8000c0e:	727b      	strb	r3, [r7, #9]
	data[2] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_2;
 8000c10:	23e7      	movs	r3, #231	; 0xe7
 8000c12:	72bb      	strb	r3, [r7, #10]
	data[3] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_3;
 8000c14:	23e7      	movs	r3, #231	; 0xe7
 8000c16:	72fb      	strb	r3, [r7, #11]
	data[4] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_4;
 8000c18:	23e7      	movs	r3, #231	; 0xe7
 8000c1a:	733b      	strb	r3, [r7, #12]
	mbal_NRF24L01_WriteRegisterMulti( nrf_config, NRF24L01_REG_TX_ADDR, data, 5 );
 8000c1c:	f107 0208 	add.w	r2, r7, #8
 8000c20:	2305      	movs	r3, #5
 8000c22:	2110      	movs	r1, #16
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff fefd 	bl	8000a24 <mbal_NRF24L01_WriteRegisterMulti>

	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P0, 	  NRF24L01_REG_DEFAULT_VAL_RX_PW_P0 );
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2111      	movs	r1, #17
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff fecf 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P1, 	  NRF24L01_REG_DEFAULT_VAL_RX_PW_P1 );
 8000c34:	2200      	movs	r2, #0
 8000c36:	2112      	movs	r1, #18
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff feca 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P2, 	  NRF24L01_REG_DEFAULT_VAL_RX_PW_P2 );
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2113      	movs	r1, #19
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff fec5 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P3, 	  NRF24L01_REG_DEFAULT_VAL_RX_PW_P3 );
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2114      	movs	r1, #20
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff fec0 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P4, 	  NRF24L01_REG_DEFAULT_VAL_RX_PW_P4 );
 8000c52:	2200      	movs	r2, #0
 8000c54:	2115      	movs	r1, #21
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff febb 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RX_PW_P5, 	  NRF24L01_REG_DEFAULT_VAL_RX_PW_P5 );
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2116      	movs	r1, #22
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff feb6 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_FIFO_STATUS, NRF24L01_REG_DEFAULT_VAL_FIFO_STATUS );
 8000c66:	2211      	movs	r2, #17
 8000c68:	2117      	movs	r1, #23
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff feb1 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_DYNPD, 	  NRF24L01_REG_DEFAULT_VAL_DYNPD );
 8000c70:	2200      	movs	r2, #0
 8000c72:	211c      	movs	r1, #28
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff feac 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_FEATURE, 	  NRF24L01_REG_DEFAULT_VAL_FEATURE );
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	211d      	movs	r1, #29
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff fea7 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <mbal_NRF24L01_SetChannel>:
uint8_t mbal_NRF24L01_GetRetransmissionsCount( NRF24L01_config_TypeDef *nrf_config ) {
	/* Low 4 bits */
	return mbal_NRF24L01_ReadRegister( nrf_config, NRF24L01_REG_OBSERVE_TX ) & 0x0F;
}

void mbal_NRF24L01_SetChannel( NRF24L01_config_TypeDef *nrf_config ) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	if( nrf_config->radio_channel <= 125 ) {
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7f9b      	ldrb	r3, [r3, #30]
 8000c98:	2b7d      	cmp	r3, #125	; 0x7d
 8000c9a:	d806      	bhi.n	8000caa <mbal_NRF24L01_SetChannel+0x1e>
		/* Write channel */
		mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RF_CH, nrf_config->radio_channel );
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	7f9b      	ldrb	r3, [r3, #30]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	2105      	movs	r1, #5
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff fe94 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
	}
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <mbal_NRF24L01_SetRF>:

void mbal_NRF24L01_SetRF( NRF24L01_config_TypeDef *nrf_config ) {
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	73fb      	strb	r3, [r7, #15]

	if (nrf_config->baud_rate == TM_NRF24L01_DataRate_2M) {
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	7fdb      	ldrb	r3, [r3, #31]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <mbal_NRF24L01_SetRF+0x1e>
		tmp |= 1 << NRF24L01_RF_DR_HIGH;
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	73fb      	strb	r3, [r7, #15]
 8000cce:	e007      	b.n	8000ce0 <mbal_NRF24L01_SetRF+0x2e>
	} else if (nrf_config->baud_rate == TM_NRF24L01_DataRate_250k) {
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7fdb      	ldrb	r3, [r3, #31]
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d103      	bne.n	8000ce0 <mbal_NRF24L01_SetRF+0x2e>
		tmp |= 1 << NRF24L01_RF_DR_LOW;
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	f043 0320 	orr.w	r3, r3, #32
 8000cde:	73fb      	strb	r3, [r7, #15]
	}
	/* If 1Mbps, all bits set to 0 */

	if (nrf_config->output_power == TM_NRF24L01_OutputPower_0dBm) {
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	d104      	bne.n	8000cf4 <mbal_NRF24L01_SetRF+0x42>
		tmp |= 3 << NRF24L01_RF_PWR;
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	f043 0306 	orr.w	r3, r3, #6
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	e012      	b.n	8000d1a <mbal_NRF24L01_SetRF+0x68>
	} else if (nrf_config->output_power == TM_NRF24L01_OutputPower_M6dBm) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d104      	bne.n	8000d08 <mbal_NRF24L01_SetRF+0x56>
		tmp |= 2 << NRF24L01_RF_PWR;
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	73fb      	strb	r3, [r7, #15]
 8000d06:	e008      	b.n	8000d1a <mbal_NRF24L01_SetRF+0x68>
	} else if (nrf_config->output_power == TM_NRF24L01_OutputPower_M12dBm) {
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d103      	bne.n	8000d1a <mbal_NRF24L01_SetRF+0x68>
		tmp |= 1 << NRF24L01_RF_PWR;
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	73fb      	strb	r3, [r7, #15]
	}

	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_RF_SETUP, tmp );
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	2106      	movs	r1, #6
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff fe56 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <mbal_NRF24L01_Clear_Interrupts>:
//uint8_t TM_NRF24L01_Read_Interrupts(TM_NRF24L01_IRQ_t* IRQ) {
//	IRQ->Status = TM_NRF24L01_GetStatus();
//	return IRQ->Status;
//}

void mbal_NRF24L01_Clear_Interrupts( NRF24L01_config_TypeDef *nrf_config ) {
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	mbal_NRF24L01_WriteRegister( nrf_config, NRF24L01_REG_STATUS, 0x70 );
 8000d36:	2270      	movs	r2, #112	; 0x70
 8000d38:	2107      	movs	r1, #7
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff fe49 	bl	80009d2 <mbal_NRF24L01_WriteRegister>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_MspInit+0x5c>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <HAL_MspInit+0x5c>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6193      	str	r3, [r2, #24]
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_MspInit+0x5c>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <HAL_MspInit+0x5c>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <HAL_MspInit+0x5c>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d70:	61d3      	str	r3, [r2, #28]
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <HAL_MspInit+0x5c>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_MspInit+0x60>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_MspInit+0x60>)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40010000 	.word	0x40010000

08000dac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a18      	ldr	r2, [pc, #96]	; (8000e28 <HAL_ADC_MspInit+0x7c>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d129      	bne.n	8000e20 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_ADC_MspInit+0x80>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a16      	ldr	r2, [pc, #88]	; (8000e2c <HAL_ADC_MspInit+0x80>)
 8000dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_ADC_MspInit+0x80>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_ADC_MspInit+0x80>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <HAL_ADC_MspInit+0x80>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_ADC_MspInit+0x80>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e00:	2303      	movs	r3, #3
 8000e02:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4809      	ldr	r0, [pc, #36]	; (8000e30 <HAL_ADC_MspInit+0x84>)
 8000e0c:	f001 f880 	bl	8001f10 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2100      	movs	r1, #0
 8000e14:	2012      	movs	r0, #18
 8000e16:	f001 f844 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e1a:	2012      	movs	r0, #18
 8000e1c:	f001 f85d 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e20:	bf00      	nop
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40012400 	.word	0x40012400
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010800 	.word	0x40010800

08000e34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <HAL_SPI_MspInit+0x88>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d12f      	bne.n	8000eb4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <HAL_SPI_MspInit+0x8c>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <HAL_SPI_MspInit+0x8c>)
 8000e5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_SPI_MspInit+0x8c>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_SPI_MspInit+0x8c>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <HAL_SPI_MspInit+0x8c>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_SPI_MspInit+0x8c>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e84:	23a0      	movs	r3, #160	; 0xa0
 8000e86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	4619      	mov	r1, r3
 8000e96:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <HAL_SPI_MspInit+0x90>)
 8000e98:	f001 f83a 	bl	8001f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e9c:	2340      	movs	r3, #64	; 0x40
 8000e9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4619      	mov	r1, r3
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <HAL_SPI_MspInit+0x90>)
 8000eb0:	f001 f82e 	bl	8001f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3720      	adds	r7, #32
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40013000 	.word	0x40013000
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010800 	.word	0x40010800

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr

08000ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr

08000f0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0e:	f000 f89b 	bl	8001048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <ADC1_2_IRQHandler+0x10>)
 8000f1e:	f000 fc81 	bl	8001824 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000028 	.word	0x20000028

08000f2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(up_pin_Pin);
 8000f30:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f34:	f001 f9b8 	bl	80022a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(down_pin_Pin);
 8000f40:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f44:	f001 f9b0 	bl	80022a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(setting_pin_0_Pin);
 8000f48:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f4c:	f001 f9ac 	bl	80022a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(setting_pin_1_Pin);
 8000f50:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000f54:	f001 f9a8 	bl	80022a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(setting_pin_2_Pin);
 8000f58:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f5c:	f001 f9a4 	bl	80022a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	; (8000fa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	; (8000fb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f96:	f7ff ffe5 	bl	8000f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9a:	f002 f97f 	bl	800329c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f9e:	f7ff fa73 	bl	8000488 <main>
  bx lr
 8000fa2:	4770      	bx	lr
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fac:	0800334c 	.word	0x0800334c
  ldr r2, =_sbss
 8000fb0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fb4:	200000e4 	.word	0x200000e4

08000fb8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <CAN1_RX1_IRQHandler>
	...

08000fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_Init+0x28>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_Init+0x28>)
 8000fc6:	f043 0310 	orr.w	r3, r3, #16
 8000fca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 ff5d 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd2:	200f      	movs	r0, #15
 8000fd4:	f000 f808 	bl	8000fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd8:	f7ff feb6 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40022000 	.word	0x40022000

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x54>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x58>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 ff75 	bl	8001ef6 <HAL_SYSTICK_Config>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e00e      	b.n	8001034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d80a      	bhi.n	8001032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f000 ff3d 	bl	8001ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_InitTick+0x5c>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000000 	.word	0x20000000
 8001040:	20000008 	.word	0x20000008
 8001044:	20000004 	.word	0x20000004

08001048 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_IncTick+0x1c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_IncTick+0x20>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a03      	ldr	r2, [pc, #12]	; (8001068 <HAL_IncTick+0x20>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	20000008 	.word	0x20000008
 8001068:	200000e0 	.word	0x200000e0

0800106c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b02      	ldr	r3, [pc, #8]	; (800107c <HAL_GetTick+0x10>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	200000e0 	.word	0x200000e0

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff fff0 	bl	800106c <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_Delay+0x44>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a6:	bf00      	nop
 80010a8:	f7ff ffe0 	bl	800106c <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000008 	.word	0x20000008

080010c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e0be      	b.n	8001268 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d109      	bne.n	800110c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff fe50 	bl	8000dac <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f000 fda7 	bl	8001c60 <ADC_ConversionStop_Disable>
 8001112:	4603      	mov	r3, r0
 8001114:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111a:	f003 0310 	and.w	r3, r3, #16
 800111e:	2b00      	cmp	r3, #0
 8001120:	f040 8099 	bne.w	8001256 <HAL_ADC_Init+0x18e>
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	2b00      	cmp	r3, #0
 8001128:	f040 8095 	bne.w	8001256 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001134:	f023 0302 	bic.w	r3, r3, #2
 8001138:	f043 0202 	orr.w	r2, r3, #2
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001148:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7b1b      	ldrb	r3, [r3, #12]
 800114e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001150:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	4313      	orrs	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001160:	d003      	beq.n	800116a <HAL_ADC_Init+0xa2>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d102      	bne.n	8001170 <HAL_ADC_Init+0xa8>
 800116a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116e:	e000      	b.n	8001172 <HAL_ADC_Init+0xaa>
 8001170:	2300      	movs	r3, #0
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7d1b      	ldrb	r3, [r3, #20]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d119      	bne.n	80011b4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7b1b      	ldrb	r3, [r3, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d109      	bne.n	800119c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	3b01      	subs	r3, #1
 800118e:	035a      	lsls	r2, r3, #13
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	e00b      	b.n	80011b4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a0:	f043 0220 	orr.w	r2, r3, #32
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ac:	f043 0201 	orr.w	r2, r3, #1
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <HAL_ADC_Init+0x1a8>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6812      	ldr	r2, [r2, #0]
 80011d6:	68b9      	ldr	r1, [r7, #8]
 80011d8:	430b      	orrs	r3, r1
 80011da:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011e4:	d003      	beq.n	80011ee <HAL_ADC_Init+0x126>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d104      	bne.n	80011f8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	051b      	lsls	r3, r3, #20
 80011f6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	430a      	orrs	r2, r1
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	4b18      	ldr	r3, [pc, #96]	; (8001274 <HAL_ADC_Init+0x1ac>)
 8001214:	4013      	ands	r3, r2
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	429a      	cmp	r2, r3
 800121a:	d10b      	bne.n	8001234 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001226:	f023 0303 	bic.w	r3, r3, #3
 800122a:	f043 0201 	orr.w	r2, r3, #1
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001232:	e018      	b.n	8001266 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001238:	f023 0312 	bic.w	r3, r3, #18
 800123c:	f043 0210 	orr.w	r2, r3, #16
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001248:	f043 0201 	orr.w	r2, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001254:	e007      	b.n	8001266 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125a:	f043 0210 	orr.w	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001266:	7dfb      	ldrb	r3, [r7, #23]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	ffe1f7fd 	.word	0xffe1f7fd
 8001274:	ff1f0efe 	.word	0xff1f0efe

08001278 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800128a:	2b01      	cmp	r3, #1
 800128c:	d101      	bne.n	8001292 <HAL_ADC_Start+0x1a>
 800128e:	2302      	movs	r3, #2
 8001290:	e098      	b.n	80013c4 <HAL_ADC_Start+0x14c>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fc86 	bl	8001bac <ADC_Enable>
 80012a0:	4603      	mov	r3, r0
 80012a2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f040 8087 	bne.w	80013ba <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012b4:	f023 0301 	bic.w	r3, r3, #1
 80012b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a41      	ldr	r2, [pc, #260]	; (80013cc <HAL_ADC_Start+0x154>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d105      	bne.n	80012d6 <HAL_ADC_Start+0x5e>
 80012ca:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <HAL_ADC_Start+0x158>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d115      	bne.n	8001302 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d026      	beq.n	800133e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001300:	e01d      	b.n	800133e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001306:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a2f      	ldr	r2, [pc, #188]	; (80013d0 <HAL_ADC_Start+0x158>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d004      	beq.n	8001322 <HAL_ADC_Start+0xaa>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a2b      	ldr	r2, [pc, #172]	; (80013cc <HAL_ADC_Start+0x154>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d10d      	bne.n	800133e <HAL_ADC_Start+0xc6>
 8001322:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <HAL_ADC_Start+0x158>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132a:	2b00      	cmp	r3, #0
 800132c:	d007      	beq.n	800133e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001336:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134e:	f023 0206 	bic.w	r2, r3, #6
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	62da      	str	r2, [r3, #44]	; 0x2c
 8001356:	e002      	b.n	800135e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f06f 0202 	mvn.w	r2, #2
 800136e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800137a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800137e:	d113      	bne.n	80013a8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001384:	4a11      	ldr	r2, [pc, #68]	; (80013cc <HAL_ADC_Start+0x154>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d105      	bne.n	8001396 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_ADC_Start+0x158>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001392:	2b00      	cmp	r3, #0
 8001394:	d108      	bne.n	80013a8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	e00c      	b.n	80013c2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	e003      	b.n	80013c2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40012800 	.word	0x40012800
 80013d0:	40012400 	.word	0x40012400

080013d4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d101      	bne.n	80013ee <HAL_ADC_Stop+0x1a>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e01a      	b.n	8001424 <HAL_ADC_Stop+0x50>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 fc32 	bl	8001c60 <ADC_ConversionStop_Disable>
 80013fc:	4603      	mov	r3, r0
 80013fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d109      	bne.n	800141a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800140e:	f023 0301 	bic.w	r3, r3, #1
 8001412:	f043 0201 	orr.w	r2, r3, #1
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b087      	sub	sp, #28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001442:	f7ff fe13 	bl	800106c <HAL_GetTick>
 8001446:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00b      	beq.n	800146e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145a:	f043 0220 	orr.w	r2, r3, #32
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e0d3      	b.n	8001616 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001478:	2b00      	cmp	r3, #0
 800147a:	d131      	bne.n	80014e0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001482:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001486:	2b00      	cmp	r3, #0
 8001488:	d12a      	bne.n	80014e0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800148a:	e021      	b.n	80014d0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001492:	d01d      	beq.n	80014d0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <HAL_ADC_PollForConversion+0x7e>
 800149a:	f7ff fde7 	bl	800106c <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d212      	bcs.n	80014d0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10b      	bne.n	80014d0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	f043 0204 	orr.w	r2, r3, #4
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e0a2      	b.n	8001616 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0d6      	beq.n	800148c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014de:	e070      	b.n	80015c2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80014e0:	4b4f      	ldr	r3, [pc, #316]	; (8001620 <HAL_ADC_PollForConversion+0x1f4>)
 80014e2:	681c      	ldr	r4, [r3, #0]
 80014e4:	2002      	movs	r0, #2
 80014e6:	f001 fbb3 	bl	8002c50 <HAL_RCCEx_GetPeriphCLKFreq>
 80014ea:	4603      	mov	r3, r0
 80014ec:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6919      	ldr	r1, [r3, #16]
 80014f6:	4b4b      	ldr	r3, [pc, #300]	; (8001624 <HAL_ADC_PollForConversion+0x1f8>)
 80014f8:	400b      	ands	r3, r1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d118      	bne.n	8001530 <HAL_ADC_PollForConversion+0x104>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68d9      	ldr	r1, [r3, #12]
 8001504:	4b48      	ldr	r3, [pc, #288]	; (8001628 <HAL_ADC_PollForConversion+0x1fc>)
 8001506:	400b      	ands	r3, r1
 8001508:	2b00      	cmp	r3, #0
 800150a:	d111      	bne.n	8001530 <HAL_ADC_PollForConversion+0x104>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6919      	ldr	r1, [r3, #16]
 8001512:	4b46      	ldr	r3, [pc, #280]	; (800162c <HAL_ADC_PollForConversion+0x200>)
 8001514:	400b      	ands	r3, r1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d108      	bne.n	800152c <HAL_ADC_PollForConversion+0x100>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68d9      	ldr	r1, [r3, #12]
 8001520:	4b43      	ldr	r3, [pc, #268]	; (8001630 <HAL_ADC_PollForConversion+0x204>)
 8001522:	400b      	ands	r3, r1
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_ADC_PollForConversion+0x100>
 8001528:	2314      	movs	r3, #20
 800152a:	e020      	b.n	800156e <HAL_ADC_PollForConversion+0x142>
 800152c:	2329      	movs	r3, #41	; 0x29
 800152e:	e01e      	b.n	800156e <HAL_ADC_PollForConversion+0x142>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6919      	ldr	r1, [r3, #16]
 8001536:	4b3d      	ldr	r3, [pc, #244]	; (800162c <HAL_ADC_PollForConversion+0x200>)
 8001538:	400b      	ands	r3, r1
 800153a:	2b00      	cmp	r3, #0
 800153c:	d106      	bne.n	800154c <HAL_ADC_PollForConversion+0x120>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68d9      	ldr	r1, [r3, #12]
 8001544:	4b3a      	ldr	r3, [pc, #232]	; (8001630 <HAL_ADC_PollForConversion+0x204>)
 8001546:	400b      	ands	r3, r1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00d      	beq.n	8001568 <HAL_ADC_PollForConversion+0x13c>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6919      	ldr	r1, [r3, #16]
 8001552:	4b38      	ldr	r3, [pc, #224]	; (8001634 <HAL_ADC_PollForConversion+0x208>)
 8001554:	400b      	ands	r3, r1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d108      	bne.n	800156c <HAL_ADC_PollForConversion+0x140>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68d9      	ldr	r1, [r3, #12]
 8001560:	4b34      	ldr	r3, [pc, #208]	; (8001634 <HAL_ADC_PollForConversion+0x208>)
 8001562:	400b      	ands	r3, r1
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_ADC_PollForConversion+0x140>
 8001568:	2354      	movs	r3, #84	; 0x54
 800156a:	e000      	b.n	800156e <HAL_ADC_PollForConversion+0x142>
 800156c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001574:	e021      	b.n	80015ba <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157c:	d01a      	beq.n	80015b4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d007      	beq.n	8001594 <HAL_ADC_PollForConversion+0x168>
 8001584:	f7ff fd72 	bl	800106c <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d20f      	bcs.n	80015b4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	429a      	cmp	r2, r3
 800159a:	d90b      	bls.n	80015b4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a0:	f043 0204 	orr.w	r2, r3, #4
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e030      	b.n	8001616 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	3301      	adds	r3, #1
 80015b8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d8d9      	bhi.n	8001576 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f06f 0212 	mvn.w	r2, #18
 80015ca:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015e2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015e6:	d115      	bne.n	8001614 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d111      	bne.n	8001614 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d105      	bne.n	8001614 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	f043 0201 	orr.w	r2, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd90      	pop	{r4, r7, pc}
 800161e:	bf00      	nop
 8001620:	20000000 	.word	0x20000000
 8001624:	24924924 	.word	0x24924924
 8001628:	00924924 	.word	0x00924924
 800162c:	12492492 	.word	0x12492492
 8001630:	00492492 	.word	0x00492492
 8001634:	00249249 	.word	0x00249249

08001638 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <HAL_ADC_Start_IT+0x1a>
 800164e:	2302      	movs	r3, #2
 8001650:	e0a0      	b.n	8001794 <HAL_ADC_Start_IT+0x15c>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 faa6 	bl	8001bac <ADC_Enable>
 8001660:	4603      	mov	r3, r0
 8001662:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f040 808f 	bne.w	800178a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001670:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001674:	f023 0301 	bic.w	r3, r3, #1
 8001678:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a45      	ldr	r2, [pc, #276]	; (800179c <HAL_ADC_Start_IT+0x164>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d105      	bne.n	8001696 <HAL_ADC_Start_IT+0x5e>
 800168a:	4b45      	ldr	r3, [pc, #276]	; (80017a0 <HAL_ADC_Start_IT+0x168>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d115      	bne.n	80016c2 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d026      	beq.n	80016fe <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016c0:	e01d      	b.n	80016fe <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a33      	ldr	r2, [pc, #204]	; (80017a0 <HAL_ADC_Start_IT+0x168>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d004      	beq.n	80016e2 <HAL_ADC_Start_IT+0xaa>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a2f      	ldr	r2, [pc, #188]	; (800179c <HAL_ADC_Start_IT+0x164>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d10d      	bne.n	80016fe <HAL_ADC_Start_IT+0xc6>
 80016e2:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <HAL_ADC_Start_IT+0x168>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d007      	beq.n	80016fe <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d006      	beq.n	8001718 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	f023 0206 	bic.w	r2, r3, #6
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c
 8001716:	e002      	b.n	800171e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f06f 0202 	mvn.w	r2, #2
 800172e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0220 	orr.w	r2, r2, #32
 800173e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800174a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800174e:	d113      	bne.n	8001778 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001754:	4a11      	ldr	r2, [pc, #68]	; (800179c <HAL_ADC_Start_IT+0x164>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d105      	bne.n	8001766 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_ADC_Start_IT+0x168>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001762:	2b00      	cmp	r3, #0
 8001764:	d108      	bne.n	8001778 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	e00c      	b.n	8001792 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	e003      	b.n	8001792 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40012800 	.word	0x40012800
 80017a0:	40012400 	.word	0x40012400

080017a4 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_ADC_Stop_IT+0x1a>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e022      	b.n	8001804 <HAL_ADC_Stop_IT+0x60>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 fa4a 	bl	8001c60 <ADC_ConversionStop_Disable>
 80017cc:	4603      	mov	r3, r0
 80017ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d111      	bne.n	80017fa <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0220 	bic.w	r2, r2, #32
 80017e4:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	f043 0201 	orr.w	r2, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0320 	and.w	r3, r3, #32
 8001836:	2b20      	cmp	r3, #32
 8001838:	d140      	bne.n	80018bc <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b02      	cmp	r3, #2
 8001846:	d139      	bne.n	80018bc <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	2b00      	cmp	r3, #0
 8001852:	d105      	bne.n	8001860 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800186a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800186e:	d11d      	bne.n	80018ac <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001874:	2b00      	cmp	r3, #0
 8001876:	d119      	bne.n	80018ac <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0220 	bic.w	r2, r2, #32
 8001886:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d105      	bne.n	80018ac <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	f043 0201 	orr.w	r2, r3, #1
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7fe fd23 	bl	80002f8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f06f 0212 	mvn.w	r2, #18
 80018ba:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c6:	2b80      	cmp	r3, #128	; 0x80
 80018c8:	d14f      	bne.n	800196a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d148      	bne.n	800196a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d105      	bne.n	80018f0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80018fa:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80018fe:	d012      	beq.n	8001926 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800190a:	2b00      	cmp	r3, #0
 800190c:	d125      	bne.n	800195a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001918:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800191c:	d11d      	bne.n	800195a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001922:	2b00      	cmp	r3, #0
 8001924:	d119      	bne.n	800195a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001934:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d105      	bne.n	800195a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001952:	f043 0201 	orr.w	r2, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f9c1 	bl	8001ce2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f06f 020c 	mvn.w	r2, #12
 8001968:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001974:	2b40      	cmp	r3, #64	; 0x40
 8001976:	d114      	bne.n	80019a2 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b01      	cmp	r3, #1
 8001984:	d10d      	bne.n	80019a2 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f809 	bl	80019aa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f06f 0201 	mvn.w	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x20>
 80019d8:	2302      	movs	r3, #2
 80019da:	e0dc      	b.n	8001b96 <HAL_ADC_ConfigChannel+0x1da>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b06      	cmp	r3, #6
 80019ea:	d81c      	bhi.n	8001a26 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	3b05      	subs	r3, #5
 80019fe:	221f      	movs	r2, #31
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	4019      	ands	r1, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	3b05      	subs	r3, #5
 8001a18:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	635a      	str	r2, [r3, #52]	; 0x34
 8001a24:	e03c      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b0c      	cmp	r3, #12
 8001a2c:	d81c      	bhi.n	8001a68 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3b23      	subs	r3, #35	; 0x23
 8001a40:	221f      	movs	r2, #31
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	4019      	ands	r1, r3
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	3b23      	subs	r3, #35	; 0x23
 8001a5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	631a      	str	r2, [r3, #48]	; 0x30
 8001a66:	e01b      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	3b41      	subs	r3, #65	; 0x41
 8001a7a:	221f      	movs	r2, #31
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	4019      	ands	r1, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	3b41      	subs	r3, #65	; 0x41
 8001a94:	fa00 f203 	lsl.w	r2, r0, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b09      	cmp	r3, #9
 8001aa6:	d91c      	bls.n	8001ae2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68d9      	ldr	r1, [r3, #12]
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3b1e      	subs	r3, #30
 8001aba:	2207      	movs	r2, #7
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	4019      	ands	r1, r3
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	6898      	ldr	r0, [r3, #8]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3b1e      	subs	r3, #30
 8001ad4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	e019      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6919      	ldr	r1, [r3, #16]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	2207      	movs	r2, #7
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	4019      	ands	r1, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	6898      	ldr	r0, [r3, #8]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4613      	mov	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b10      	cmp	r3, #16
 8001b1c:	d003      	beq.n	8001b26 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b22:	2b11      	cmp	r3, #17
 8001b24:	d132      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <HAL_ADC_ConfigChannel+0x1e4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d125      	bne.n	8001b7c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d126      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b4c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b10      	cmp	r3, #16
 8001b54:	d11a      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a13      	ldr	r2, [pc, #76]	; (8001ba8 <HAL_ADC_ConfigChannel+0x1ec>)
 8001b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b60:	0c9a      	lsrs	r2, r3, #18
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b6c:	e002      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	3b01      	subs	r3, #1
 8001b72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f9      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x1b2>
 8001b7a:	e007      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	f043 0220 	orr.w	r2, r3, #32
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	40012400 	.word	0x40012400
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	431bde83 	.word	0x431bde83

08001bac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d040      	beq.n	8001c4c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0201 	orr.w	r2, r2, #1
 8001bd8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bda:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <ADC_Enable+0xac>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a1f      	ldr	r2, [pc, #124]	; (8001c5c <ADC_Enable+0xb0>)
 8001be0:	fba2 2303 	umull	r2, r3, r2, r3
 8001be4:	0c9b      	lsrs	r3, r3, #18
 8001be6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001be8:	e002      	b.n	8001bf0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	3b01      	subs	r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f9      	bne.n	8001bea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bf6:	f7ff fa39 	bl	800106c <HAL_GetTick>
 8001bfa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bfc:	e01f      	b.n	8001c3e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bfe:	f7ff fa35 	bl	800106c <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d918      	bls.n	8001c3e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d011      	beq.n	8001c3e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1e:	f043 0210 	orr.w	r2, r3, #16
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2a:	f043 0201 	orr.w	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e007      	b.n	8001c4e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d1d8      	bne.n	8001bfe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	431bde83 	.word	0x431bde83

08001c60 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d12e      	bne.n	8001cd8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0201 	bic.w	r2, r2, #1
 8001c88:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c8a:	f7ff f9ef 	bl	800106c <HAL_GetTick>
 8001c8e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c90:	e01b      	b.n	8001cca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c92:	f7ff f9eb 	bl	800106c <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d914      	bls.n	8001cca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d10d      	bne.n	8001cca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	f043 0210 	orr.w	r2, r3, #16
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbe:	f043 0201 	orr.w	r2, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e007      	b.n	8001cda <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d0dc      	beq.n	8001c92 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db0b      	blt.n	8001d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4906      	ldr	r1, [pc, #24]	; (8001d8c <__NVIC_EnableIRQ+0x34>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2001      	movs	r0, #1
 8001d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	e000e100 	.word	0xe000e100

08001d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db0a      	blt.n	8001dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	490c      	ldr	r1, [pc, #48]	; (8001ddc <__NVIC_SetPriority+0x4c>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	440b      	add	r3, r1
 8001db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db8:	e00a      	b.n	8001dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4908      	ldr	r1, [pc, #32]	; (8001de0 <__NVIC_SetPriority+0x50>)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	761a      	strb	r2, [r3, #24]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000e100 	.word	0xe000e100
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f1c3 0307 	rsb	r3, r3, #7
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	bf28      	it	cs
 8001e02:	2304      	movcs	r3, #4
 8001e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d902      	bls.n	8001e14 <NVIC_EncodePriority+0x30>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b03      	subs	r3, #3
 8001e12:	e000      	b.n	8001e16 <NVIC_EncodePriority+0x32>
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43d9      	mvns	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	4313      	orrs	r3, r2
         );
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	; 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff ff90 	bl	8001d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff2d 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff42 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff90 	bl	8001de4 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5f 	bl	8001d90 <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff35 	bl	8001d58 <__NVIC_EnableIRQ>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffa2 	bl	8001e48 <SysTick_Config>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b08b      	sub	sp, #44	; 0x2c
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f22:	e169      	b.n	80021f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f24:	2201      	movs	r2, #1
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	f040 8158 	bne.w	80021f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4a9a      	ldr	r2, [pc, #616]	; (80021b0 <HAL_GPIO_Init+0x2a0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d05e      	beq.n	800200a <HAL_GPIO_Init+0xfa>
 8001f4c:	4a98      	ldr	r2, [pc, #608]	; (80021b0 <HAL_GPIO_Init+0x2a0>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d875      	bhi.n	800203e <HAL_GPIO_Init+0x12e>
 8001f52:	4a98      	ldr	r2, [pc, #608]	; (80021b4 <HAL_GPIO_Init+0x2a4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d058      	beq.n	800200a <HAL_GPIO_Init+0xfa>
 8001f58:	4a96      	ldr	r2, [pc, #600]	; (80021b4 <HAL_GPIO_Init+0x2a4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d86f      	bhi.n	800203e <HAL_GPIO_Init+0x12e>
 8001f5e:	4a96      	ldr	r2, [pc, #600]	; (80021b8 <HAL_GPIO_Init+0x2a8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d052      	beq.n	800200a <HAL_GPIO_Init+0xfa>
 8001f64:	4a94      	ldr	r2, [pc, #592]	; (80021b8 <HAL_GPIO_Init+0x2a8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d869      	bhi.n	800203e <HAL_GPIO_Init+0x12e>
 8001f6a:	4a94      	ldr	r2, [pc, #592]	; (80021bc <HAL_GPIO_Init+0x2ac>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d04c      	beq.n	800200a <HAL_GPIO_Init+0xfa>
 8001f70:	4a92      	ldr	r2, [pc, #584]	; (80021bc <HAL_GPIO_Init+0x2ac>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d863      	bhi.n	800203e <HAL_GPIO_Init+0x12e>
 8001f76:	4a92      	ldr	r2, [pc, #584]	; (80021c0 <HAL_GPIO_Init+0x2b0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d046      	beq.n	800200a <HAL_GPIO_Init+0xfa>
 8001f7c:	4a90      	ldr	r2, [pc, #576]	; (80021c0 <HAL_GPIO_Init+0x2b0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d85d      	bhi.n	800203e <HAL_GPIO_Init+0x12e>
 8001f82:	2b12      	cmp	r3, #18
 8001f84:	d82a      	bhi.n	8001fdc <HAL_GPIO_Init+0xcc>
 8001f86:	2b12      	cmp	r3, #18
 8001f88:	d859      	bhi.n	800203e <HAL_GPIO_Init+0x12e>
 8001f8a:	a201      	add	r2, pc, #4	; (adr r2, 8001f90 <HAL_GPIO_Init+0x80>)
 8001f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f90:	0800200b 	.word	0x0800200b
 8001f94:	08001fe5 	.word	0x08001fe5
 8001f98:	08001ff7 	.word	0x08001ff7
 8001f9c:	08002039 	.word	0x08002039
 8001fa0:	0800203f 	.word	0x0800203f
 8001fa4:	0800203f 	.word	0x0800203f
 8001fa8:	0800203f 	.word	0x0800203f
 8001fac:	0800203f 	.word	0x0800203f
 8001fb0:	0800203f 	.word	0x0800203f
 8001fb4:	0800203f 	.word	0x0800203f
 8001fb8:	0800203f 	.word	0x0800203f
 8001fbc:	0800203f 	.word	0x0800203f
 8001fc0:	0800203f 	.word	0x0800203f
 8001fc4:	0800203f 	.word	0x0800203f
 8001fc8:	0800203f 	.word	0x0800203f
 8001fcc:	0800203f 	.word	0x0800203f
 8001fd0:	0800203f 	.word	0x0800203f
 8001fd4:	08001fed 	.word	0x08001fed
 8001fd8:	08002001 	.word	0x08002001
 8001fdc:	4a79      	ldr	r2, [pc, #484]	; (80021c4 <HAL_GPIO_Init+0x2b4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fe2:	e02c      	b.n	800203e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	623b      	str	r3, [r7, #32]
          break;
 8001fea:	e029      	b.n	8002040 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	623b      	str	r3, [r7, #32]
          break;
 8001ff4:	e024      	b.n	8002040 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	3308      	adds	r3, #8
 8001ffc:	623b      	str	r3, [r7, #32]
          break;
 8001ffe:	e01f      	b.n	8002040 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	330c      	adds	r3, #12
 8002006:	623b      	str	r3, [r7, #32]
          break;
 8002008:	e01a      	b.n	8002040 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d102      	bne.n	8002018 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002012:	2304      	movs	r3, #4
 8002014:	623b      	str	r3, [r7, #32]
          break;
 8002016:	e013      	b.n	8002040 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d105      	bne.n	800202c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002020:	2308      	movs	r3, #8
 8002022:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	611a      	str	r2, [r3, #16]
          break;
 800202a:	e009      	b.n	8002040 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800202c:	2308      	movs	r3, #8
 800202e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	615a      	str	r2, [r3, #20]
          break;
 8002036:	e003      	b.n	8002040 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002038:	2300      	movs	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
          break;
 800203c:	e000      	b.n	8002040 <HAL_GPIO_Init+0x130>
          break;
 800203e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	2bff      	cmp	r3, #255	; 0xff
 8002044:	d801      	bhi.n	800204a <HAL_GPIO_Init+0x13a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	e001      	b.n	800204e <HAL_GPIO_Init+0x13e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3304      	adds	r3, #4
 800204e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	2bff      	cmp	r3, #255	; 0xff
 8002054:	d802      	bhi.n	800205c <HAL_GPIO_Init+0x14c>
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	e002      	b.n	8002062 <HAL_GPIO_Init+0x152>
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	3b08      	subs	r3, #8
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	210f      	movs	r1, #15
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	fa01 f303 	lsl.w	r3, r1, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	401a      	ands	r2, r3
 8002074:	6a39      	ldr	r1, [r7, #32]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	431a      	orrs	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80b1 	beq.w	80021f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002090:	4b4d      	ldr	r3, [pc, #308]	; (80021c8 <HAL_GPIO_Init+0x2b8>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	4a4c      	ldr	r2, [pc, #304]	; (80021c8 <HAL_GPIO_Init+0x2b8>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6193      	str	r3, [r2, #24]
 800209c:	4b4a      	ldr	r3, [pc, #296]	; (80021c8 <HAL_GPIO_Init+0x2b8>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020a8:	4a48      	ldr	r2, [pc, #288]	; (80021cc <HAL_GPIO_Init+0x2bc>)
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	3302      	adds	r3, #2
 80020b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	220f      	movs	r2, #15
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4013      	ands	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a40      	ldr	r2, [pc, #256]	; (80021d0 <HAL_GPIO_Init+0x2c0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d013      	beq.n	80020fc <HAL_GPIO_Init+0x1ec>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a3f      	ldr	r2, [pc, #252]	; (80021d4 <HAL_GPIO_Init+0x2c4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d00d      	beq.n	80020f8 <HAL_GPIO_Init+0x1e8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a3e      	ldr	r2, [pc, #248]	; (80021d8 <HAL_GPIO_Init+0x2c8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d007      	beq.n	80020f4 <HAL_GPIO_Init+0x1e4>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a3d      	ldr	r2, [pc, #244]	; (80021dc <HAL_GPIO_Init+0x2cc>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d101      	bne.n	80020f0 <HAL_GPIO_Init+0x1e0>
 80020ec:	2303      	movs	r3, #3
 80020ee:	e006      	b.n	80020fe <HAL_GPIO_Init+0x1ee>
 80020f0:	2304      	movs	r3, #4
 80020f2:	e004      	b.n	80020fe <HAL_GPIO_Init+0x1ee>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e002      	b.n	80020fe <HAL_GPIO_Init+0x1ee>
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <HAL_GPIO_Init+0x1ee>
 80020fc:	2300      	movs	r3, #0
 80020fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002100:	f002 0203 	and.w	r2, r2, #3
 8002104:	0092      	lsls	r2, r2, #2
 8002106:	4093      	lsls	r3, r2
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800210e:	492f      	ldr	r1, [pc, #188]	; (80021cc <HAL_GPIO_Init+0x2bc>)
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	089b      	lsrs	r3, r3, #2
 8002114:	3302      	adds	r3, #2
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d006      	beq.n	8002136 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002128:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	492c      	ldr	r1, [pc, #176]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	600b      	str	r3, [r1, #0]
 8002134:	e006      	b.n	8002144 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002136:	4b2a      	ldr	r3, [pc, #168]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	43db      	mvns	r3, r3
 800213e:	4928      	ldr	r1, [pc, #160]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 8002140:	4013      	ands	r3, r2
 8002142:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d006      	beq.n	800215e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002150:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	4922      	ldr	r1, [pc, #136]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
 800215c:	e006      	b.n	800216c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	43db      	mvns	r3, r3
 8002166:	491e      	ldr	r1, [pc, #120]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 8002168:	4013      	ands	r3, r2
 800216a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d006      	beq.n	8002186 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002178:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	4918      	ldr	r1, [pc, #96]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	608b      	str	r3, [r1, #8]
 8002184:	e006      	b.n	8002194 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	43db      	mvns	r3, r3
 800218e:	4914      	ldr	r1, [pc, #80]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 8002190:	4013      	ands	r3, r2
 8002192:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d021      	beq.n	80021e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	490e      	ldr	r1, [pc, #56]	; (80021e0 <HAL_GPIO_Init+0x2d0>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	60cb      	str	r3, [r1, #12]
 80021ac:	e021      	b.n	80021f2 <HAL_GPIO_Init+0x2e2>
 80021ae:	bf00      	nop
 80021b0:	10320000 	.word	0x10320000
 80021b4:	10310000 	.word	0x10310000
 80021b8:	10220000 	.word	0x10220000
 80021bc:	10210000 	.word	0x10210000
 80021c0:	10120000 	.word	0x10120000
 80021c4:	10110000 	.word	0x10110000
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40010000 	.word	0x40010000
 80021d0:	40010800 	.word	0x40010800
 80021d4:	40010c00 	.word	0x40010c00
 80021d8:	40011000 	.word	0x40011000
 80021dc:	40011400 	.word	0x40011400
 80021e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_GPIO_Init+0x304>)
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	4909      	ldr	r1, [pc, #36]	; (8002214 <HAL_GPIO_Init+0x304>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	3301      	adds	r3, #1
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	f47f ae8e 	bne.w	8001f24 <HAL_GPIO_Init+0x14>
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	372c      	adds	r7, #44	; 0x2c
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	40010400 	.word	0x40010400

08002218 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	887b      	ldrh	r3, [r7, #2]
 800222a:	4013      	ands	r3, r2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	e001      	b.n	800223a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002236:	2300      	movs	r3, #0
 8002238:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800223a:	7bfb      	ldrb	r3, [r7, #15]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr

08002246 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	460b      	mov	r3, r1
 8002250:	807b      	strh	r3, [r7, #2]
 8002252:	4613      	mov	r3, r2
 8002254:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002256:	787b      	ldrb	r3, [r7, #1]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225c:	887a      	ldrh	r2, [r7, #2]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002262:	e003      	b.n	800226c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002264:	887b      	ldrh	r3, [r7, #2]
 8002266:	041a      	lsls	r2, r3, #16
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	611a      	str	r2, [r3, #16]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002276:	b480      	push	{r7}
 8002278:	b085      	sub	sp, #20
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002288:	887a      	ldrh	r2, [r7, #2]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	4013      	ands	r3, r2
 800228e:	041a      	lsls	r2, r3, #16
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	43d9      	mvns	r1, r3
 8002294:	887b      	ldrh	r3, [r7, #2]
 8002296:	400b      	ands	r3, r1
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	611a      	str	r2, [r3, #16]
}
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d006      	beq.n	80022cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022be:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fd ff7c 	bl	80001c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40010400 	.word	0x40010400

080022d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e272      	b.n	80027d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 8087 	beq.w	8002406 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022f8:	4b92      	ldr	r3, [pc, #584]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b04      	cmp	r3, #4
 8002302:	d00c      	beq.n	800231e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002304:	4b8f      	ldr	r3, [pc, #572]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 030c 	and.w	r3, r3, #12
 800230c:	2b08      	cmp	r3, #8
 800230e:	d112      	bne.n	8002336 <HAL_RCC_OscConfig+0x5e>
 8002310:	4b8c      	ldr	r3, [pc, #560]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800231c:	d10b      	bne.n	8002336 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231e:	4b89      	ldr	r3, [pc, #548]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d06c      	beq.n	8002404 <HAL_RCC_OscConfig+0x12c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d168      	bne.n	8002404 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e24c      	b.n	80027d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x76>
 8002340:	4b80      	ldr	r3, [pc, #512]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a7f      	ldr	r2, [pc, #508]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	e02e      	b.n	80023ac <HAL_RCC_OscConfig+0xd4>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0x98>
 8002356:	4b7b      	ldr	r3, [pc, #492]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a7a      	ldr	r2, [pc, #488]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800235c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b78      	ldr	r3, [pc, #480]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a77      	ldr	r2, [pc, #476]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e01d      	b.n	80023ac <HAL_RCC_OscConfig+0xd4>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0xbc>
 800237a:	4b72      	ldr	r3, [pc, #456]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a71      	ldr	r2, [pc, #452]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	4b6f      	ldr	r3, [pc, #444]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a6e      	ldr	r2, [pc, #440]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0xd4>
 8002394:	4b6b      	ldr	r3, [pc, #428]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a6a      	ldr	r2, [pc, #424]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800239a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b68      	ldr	r3, [pc, #416]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a67      	ldr	r2, [pc, #412]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80023a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7fe fe5a 	bl	800106c <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023bc:	f7fe fe56 	bl	800106c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e200      	b.n	80027d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ce:	4b5d      	ldr	r3, [pc, #372]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0xe4>
 80023da:	e014      	b.n	8002406 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7fe fe46 	bl	800106c <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e4:	f7fe fe42 	bl	800106c <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e1ec      	b.n	80027d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f6:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x10c>
 8002402:	e000      	b.n	8002406 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d063      	beq.n	80024da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002412:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800241e:	4b49      	ldr	r3, [pc, #292]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b08      	cmp	r3, #8
 8002428:	d11c      	bne.n	8002464 <HAL_RCC_OscConfig+0x18c>
 800242a:	4b46      	ldr	r3, [pc, #280]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d116      	bne.n	8002464 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002436:	4b43      	ldr	r3, [pc, #268]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_RCC_OscConfig+0x176>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d001      	beq.n	800244e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e1c0      	b.n	80027d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244e:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4939      	ldr	r1, [pc, #228]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	e03a      	b.n	80024da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d020      	beq.n	80024ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800246c:	4b36      	ldr	r3, [pc, #216]	; (8002548 <HAL_RCC_OscConfig+0x270>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7fe fdfb 	bl	800106c <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247a:	f7fe fdf7 	bl	800106c <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e1a1      	b.n	80027d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248c:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002498:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4927      	ldr	r1, [pc, #156]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]
 80024ac:	e015      	b.n	80024da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <HAL_RCC_OscConfig+0x270>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7fe fdda 	bl	800106c <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024bc:	f7fe fdd6 	bl	800106c <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e180      	b.n	80027d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ce:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d03a      	beq.n	800255c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d019      	beq.n	8002522 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ee:	4b17      	ldr	r3, [pc, #92]	; (800254c <HAL_RCC_OscConfig+0x274>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f4:	f7fe fdba 	bl	800106c <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024fc:	f7fe fdb6 	bl	800106c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e160      	b.n	80027d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <HAL_RCC_OscConfig+0x26c>)
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800251a:	2001      	movs	r0, #1
 800251c:	f000 fac4 	bl	8002aa8 <RCC_Delay>
 8002520:	e01c      	b.n	800255c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_RCC_OscConfig+0x274>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002528:	f7fe fda0 	bl	800106c <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252e:	e00f      	b.n	8002550 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002530:	f7fe fd9c 	bl	800106c <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d908      	bls.n	8002550 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e146      	b.n	80027d0 <HAL_RCC_OscConfig+0x4f8>
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000
 8002548:	42420000 	.word	0x42420000
 800254c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002550:	4b92      	ldr	r3, [pc, #584]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1e9      	bne.n	8002530 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80a6 	beq.w	80026b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256e:	4b8b      	ldr	r3, [pc, #556]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10d      	bne.n	8002596 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	4b88      	ldr	r3, [pc, #544]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	4a87      	ldr	r2, [pc, #540]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 8002580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002584:	61d3      	str	r3, [r2, #28]
 8002586:	4b85      	ldr	r3, [pc, #532]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002592:	2301      	movs	r3, #1
 8002594:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002596:	4b82      	ldr	r3, [pc, #520]	; (80027a0 <HAL_RCC_OscConfig+0x4c8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d118      	bne.n	80025d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025a2:	4b7f      	ldr	r3, [pc, #508]	; (80027a0 <HAL_RCC_OscConfig+0x4c8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a7e      	ldr	r2, [pc, #504]	; (80027a0 <HAL_RCC_OscConfig+0x4c8>)
 80025a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ae:	f7fe fd5d 	bl	800106c <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b6:	f7fe fd59 	bl	800106c <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b64      	cmp	r3, #100	; 0x64
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e103      	b.n	80027d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c8:	4b75      	ldr	r3, [pc, #468]	; (80027a0 <HAL_RCC_OscConfig+0x4c8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d106      	bne.n	80025ea <HAL_RCC_OscConfig+0x312>
 80025dc:	4b6f      	ldr	r3, [pc, #444]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	4a6e      	ldr	r2, [pc, #440]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6213      	str	r3, [r2, #32]
 80025e8:	e02d      	b.n	8002646 <HAL_RCC_OscConfig+0x36e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10c      	bne.n	800260c <HAL_RCC_OscConfig+0x334>
 80025f2:	4b6a      	ldr	r3, [pc, #424]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	4a69      	ldr	r2, [pc, #420]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	6213      	str	r3, [r2, #32]
 80025fe:	4b67      	ldr	r3, [pc, #412]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	4a66      	ldr	r2, [pc, #408]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 8002604:	f023 0304 	bic.w	r3, r3, #4
 8002608:	6213      	str	r3, [r2, #32]
 800260a:	e01c      	b.n	8002646 <HAL_RCC_OscConfig+0x36e>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b05      	cmp	r3, #5
 8002612:	d10c      	bne.n	800262e <HAL_RCC_OscConfig+0x356>
 8002614:	4b61      	ldr	r3, [pc, #388]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4a60      	ldr	r2, [pc, #384]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 800261a:	f043 0304 	orr.w	r3, r3, #4
 800261e:	6213      	str	r3, [r2, #32]
 8002620:	4b5e      	ldr	r3, [pc, #376]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	4a5d      	ldr	r2, [pc, #372]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6213      	str	r3, [r2, #32]
 800262c:	e00b      	b.n	8002646 <HAL_RCC_OscConfig+0x36e>
 800262e:	4b5b      	ldr	r3, [pc, #364]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4a5a      	ldr	r2, [pc, #360]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 8002634:	f023 0301 	bic.w	r3, r3, #1
 8002638:	6213      	str	r3, [r2, #32]
 800263a:	4b58      	ldr	r3, [pc, #352]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	4a57      	ldr	r2, [pc, #348]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 8002640:	f023 0304 	bic.w	r3, r3, #4
 8002644:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d015      	beq.n	800267a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264e:	f7fe fd0d 	bl	800106c <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002654:	e00a      	b.n	800266c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7fe fd09 	bl	800106c <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f241 3288 	movw	r2, #5000	; 0x1388
 8002664:	4293      	cmp	r3, r2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e0b1      	b.n	80027d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266c:	4b4b      	ldr	r3, [pc, #300]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0ee      	beq.n	8002656 <HAL_RCC_OscConfig+0x37e>
 8002678:	e014      	b.n	80026a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267a:	f7fe fcf7 	bl	800106c <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7fe fcf3 	bl	800106c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e09b      	b.n	80027d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002698:	4b40      	ldr	r3, [pc, #256]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1ee      	bne.n	8002682 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026a4:	7dfb      	ldrb	r3, [r7, #23]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d105      	bne.n	80026b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026aa:	4b3c      	ldr	r3, [pc, #240]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	4a3b      	ldr	r2, [pc, #236]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8087 	beq.w	80027ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026c0:	4b36      	ldr	r3, [pc, #216]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d061      	beq.n	8002790 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d146      	bne.n	8002762 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d4:	4b33      	ldr	r3, [pc, #204]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026da:	f7fe fcc7 	bl	800106c <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e2:	f7fe fcc3 	bl	800106c <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e06d      	b.n	80027d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f4:	4b29      	ldr	r3, [pc, #164]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f0      	bne.n	80026e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002708:	d108      	bne.n	800271c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800270a:	4b24      	ldr	r3, [pc, #144]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	4921      	ldr	r1, [pc, #132]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800271c:	4b1f      	ldr	r3, [pc, #124]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a19      	ldr	r1, [r3, #32]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	430b      	orrs	r3, r1
 800272e:	491b      	ldr	r1, [pc, #108]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002734:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273a:	f7fe fc97 	bl	800106c <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002742:	f7fe fc93 	bl	800106c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e03d      	b.n	80027d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x46a>
 8002760:	e035      	b.n	80027ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002762:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <HAL_RCC_OscConfig+0x4cc>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7fe fc80 	bl	800106c <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002770:	f7fe fc7c 	bl	800106c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e026      	b.n	80027d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <HAL_RCC_OscConfig+0x4c4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x498>
 800278e:	e01e      	b.n	80027ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d107      	bne.n	80027a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e019      	b.n	80027d0 <HAL_RCC_OscConfig+0x4f8>
 800279c:	40021000 	.word	0x40021000
 80027a0:	40007000 	.word	0x40007000
 80027a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_OscConfig+0x500>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d106      	bne.n	80027ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d001      	beq.n	80027ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000

080027dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0d0      	b.n	8002992 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f0:	4b6a      	ldr	r3, [pc, #424]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d910      	bls.n	8002820 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b67      	ldr	r3, [pc, #412]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 0207 	bic.w	r2, r3, #7
 8002806:	4965      	ldr	r1, [pc, #404]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b63      	ldr	r3, [pc, #396]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0b8      	b.n	8002992 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d020      	beq.n	800286e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002838:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4a58      	ldr	r2, [pc, #352]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002842:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002850:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4a52      	ldr	r2, [pc, #328]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800285a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800285c:	4b50      	ldr	r3, [pc, #320]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	494d      	ldr	r1, [pc, #308]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	4313      	orrs	r3, r2
 800286c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d040      	beq.n	80028fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	4b47      	ldr	r3, [pc, #284]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d115      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e07f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289a:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e073      	b.n	8002992 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028aa:	4b3d      	ldr	r3, [pc, #244]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e06b      	b.n	8002992 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f023 0203 	bic.w	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4936      	ldr	r1, [pc, #216]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028cc:	f7fe fbce 	bl	800106c <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d4:	f7fe fbca 	bl	800106c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e053      	b.n	8002992 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ea:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 020c 	and.w	r2, r3, #12
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d1eb      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028fc:	4b27      	ldr	r3, [pc, #156]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d210      	bcs.n	800292c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b24      	ldr	r3, [pc, #144]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 0207 	bic.w	r2, r3, #7
 8002912:	4922      	ldr	r1, [pc, #136]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b20      	ldr	r3, [pc, #128]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e032      	b.n	8002992 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002938:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4916      	ldr	r1, [pc, #88]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	490e      	ldr	r1, [pc, #56]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	4313      	orrs	r3, r2
 8002968:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800296a:	f000 f821 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 800296e:	4602      	mov	r2, r0
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	490a      	ldr	r1, [pc, #40]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 800297c:	5ccb      	ldrb	r3, [r1, r3]
 800297e:	fa22 f303 	lsr.w	r3, r2, r3
 8002982:	4a09      	ldr	r2, [pc, #36]	; (80029a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_RCC_ClockConfig+0x1d0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe fb2c 	bl	8000fe8 <HAL_InitTick>

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40022000 	.word	0x40022000
 80029a0:	40021000 	.word	0x40021000
 80029a4:	0800332c 	.word	0x0800332c
 80029a8:	20000000 	.word	0x20000000
 80029ac:	20000004 	.word	0x20000004

080029b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b0:	b490      	push	{r4, r7}
 80029b2:	b08a      	sub	sp, #40	; 0x28
 80029b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029b6:	4b29      	ldr	r3, [pc, #164]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xac>)
 80029b8:	1d3c      	adds	r4, r7, #4
 80029ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029c0:	f240 2301 	movw	r3, #513	; 0x201
 80029c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	2300      	movs	r3, #0
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	2300      	movs	r3, #0
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029da:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d002      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0x40>
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d003      	beq.n	80029f6 <HAL_RCC_GetSysClockFreq+0x46>
 80029ee:	e02b      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029f0:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029f2:	623b      	str	r3, [r7, #32]
      break;
 80029f4:	e02b      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	0c9b      	lsrs	r3, r3, #18
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	3328      	adds	r3, #40	; 0x28
 8002a00:	443b      	add	r3, r7
 8002a02:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a06:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d012      	beq.n	8002a38 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a12:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	0c5b      	lsrs	r3, r3, #17
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	3328      	adds	r3, #40	; 0x28
 8002a1e:	443b      	add	r3, r7
 8002a20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a24:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	4a0e      	ldr	r2, [pc, #56]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a2a:	fb03 f202 	mul.w	r2, r3, r2
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
 8002a36:	e004      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	4a0b      	ldr	r2, [pc, #44]	; (8002a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a3c:	fb02 f303 	mul.w	r3, r2, r3
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	623b      	str	r3, [r7, #32]
      break;
 8002a46:	e002      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a4a:	623b      	str	r3, [r7, #32]
      break;
 8002a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3728      	adds	r7, #40	; 0x28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc90      	pop	{r4, r7}
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	0800330c 	.word	0x0800330c
 8002a60:	40021000 	.word	0x40021000
 8002a64:	007a1200 	.word	0x007a1200
 8002a68:	003d0900 	.word	0x003d0900

08002a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a70:	4b02      	ldr	r3, [pc, #8]	; (8002a7c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a72:	681b      	ldr	r3, [r3, #0]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr
 8002a7c:	20000000 	.word	0x20000000

08002a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a84:	f7ff fff2 	bl	8002a6c <HAL_RCC_GetHCLKFreq>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	0adb      	lsrs	r3, r3, #11
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	4903      	ldr	r1, [pc, #12]	; (8002aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a96:	5ccb      	ldrb	r3, [r1, r3]
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	0800333c 	.word	0x0800333c

08002aa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <RCC_Delay+0x34>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <RCC_Delay+0x38>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0a5b      	lsrs	r3, r3, #9
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ac4:	bf00      	nop
  }
  while (Delay --);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1e5a      	subs	r2, r3, #1
 8002aca:	60fa      	str	r2, [r7, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f9      	bne.n	8002ac4 <RCC_Delay+0x1c>
}
 8002ad0:	bf00      	nop
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	10624dd3 	.word	0x10624dd3

08002ae4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d07d      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b00:	2300      	movs	r3, #0
 8002b02:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b04:	4b4f      	ldr	r3, [pc, #316]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10d      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b10:	4b4c      	ldr	r3, [pc, #304]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	4a4b      	ldr	r2, [pc, #300]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	61d3      	str	r3, [r2, #28]
 8002b1c:	4b49      	ldr	r3, [pc, #292]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	4b46      	ldr	r3, [pc, #280]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d118      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b38:	4b43      	ldr	r3, [pc, #268]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a42      	ldr	r2, [pc, #264]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b44:	f7fe fa92 	bl	800106c <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4a:	e008      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4c:	f7fe fa8e 	bl	800106c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e06d      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5e:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b6a:	4b36      	ldr	r3, [pc, #216]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b72:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d02e      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d027      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b88:	4b2e      	ldr	r3, [pc, #184]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b92:	4b2e      	ldr	r3, [pc, #184]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b98:	4b2c      	ldr	r3, [pc, #176]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b9e:	4a29      	ldr	r2, [pc, #164]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d014      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7fe fa5d 	bl	800106c <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb6:	f7fe fa59 	bl	800106c <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e036      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0ee      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4917      	ldr	r1, [pc, #92]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d105      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf0:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	4a13      	ldr	r2, [pc, #76]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c08:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	490b      	ldr	r1, [pc, #44]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c26:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	4904      	ldr	r1, [pc, #16]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40007000 	.word	0x40007000
 8002c4c:	42420440 	.word	0x42420440

08002c50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b08d      	sub	sp, #52	; 0x34
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c58:	4b58      	ldr	r3, [pc, #352]	; (8002dbc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002c5a:	f107 040c 	add.w	r4, r7, #12
 8002c5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c64:	f240 2301 	movw	r3, #513	; 0x201
 8002c68:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6e:	2300      	movs	r3, #0
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c72:	2300      	movs	r3, #0
 8002c74:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b10      	cmp	r3, #16
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b10      	cmp	r3, #16
 8002c88:	f200 808e 	bhi.w	8002da8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d049      	beq.n	8002d26 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d079      	beq.n	8002d8c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002c98:	e086      	b.n	8002da8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002c9a:	4b49      	ldr	r3, [pc, #292]	; (8002dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002ca0:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d07f      	beq.n	8002dac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	0c9b      	lsrs	r3, r3, #18
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	3330      	adds	r3, #48	; 0x30
 8002cb6:	443b      	add	r3, r7
 8002cb8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cbc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d017      	beq.n	8002cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cc8:	4b3d      	ldr	r3, [pc, #244]	; (8002dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	0c5b      	lsrs	r3, r3, #17
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	3330      	adds	r3, #48	; 0x30
 8002cd4:	443b      	add	r3, r7
 8002cd6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00d      	beq.n	8002d02 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ce6:	4a37      	ldr	r2, [pc, #220]	; (8002dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	fb02 f303 	mul.w	r3, r2, r3
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf6:	e004      	b.n	8002d02 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	4a33      	ldr	r2, [pc, #204]	; (8002dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002cfc:	fb02 f303 	mul.w	r3, r2, r3
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002d02:	4b2f      	ldr	r3, [pc, #188]	; (8002dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d0e:	d102      	bne.n	8002d16 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002d14:	e04a      	b.n	8002dac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	4a2c      	ldr	r2, [pc, #176]	; (8002dcc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d20:	085b      	lsrs	r3, r3, #1
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002d24:	e042      	b.n	8002dac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002d26:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d36:	d108      	bne.n	8002d4a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d48:	e01f      	b.n	8002d8a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d54:	d109      	bne.n	8002d6a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002d56:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002d62:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d68:	e00f      	b.n	8002d8a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d74:	d11c      	bne.n	8002db0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002d76:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d016      	beq.n	8002db0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002d82:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002d88:	e012      	b.n	8002db0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002d8a:	e011      	b.n	8002db0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002d8c:	f7ff fe78 	bl	8002a80 <HAL_RCC_GetPCLK2Freq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	0b9b      	lsrs	r3, r3, #14
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002da6:	e004      	b.n	8002db2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002da8:	bf00      	nop
 8002daa:	e002      	b.n	8002db2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002dac:	bf00      	nop
 8002dae:	e000      	b.n	8002db2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002db0:	bf00      	nop
    }
  }
  return (frequency);
 8002db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3734      	adds	r7, #52	; 0x34
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd90      	pop	{r4, r7, pc}
 8002dbc:	0800331c 	.word	0x0800331c
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	007a1200 	.word	0x007a1200
 8002dc8:	003d0900 	.word	0x003d0900
 8002dcc:	aaaaaaab 	.word	0xaaaaaaab

08002dd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e076      	b.n	8002ed0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d108      	bne.n	8002dfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002df2:	d009      	beq.n	8002e08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	61da      	str	r2, [r3, #28]
 8002dfa:	e005      	b.n	8002e08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fe f806 	bl	8000e34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8c:	ea42 0103 	orr.w	r1, r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	0c1a      	lsrs	r2, r3, #16
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f002 0204 	and.w	r2, r2, #4
 8002eae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69da      	ldr	r2, [r3, #28]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ebe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d101      	bne.n	8002efa <HAL_SPI_Transmit+0x22>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e126      	b.n	8003148 <HAL_SPI_Transmit+0x270>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f02:	f7fe f8b3 	bl	800106c <HAL_GetTick>
 8002f06:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f08:	88fb      	ldrh	r3, [r7, #6]
 8002f0a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d002      	beq.n	8002f1e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f1c:	e10b      	b.n	8003136 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <HAL_SPI_Transmit+0x52>
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d102      	bne.n	8002f30 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f2e:	e102      	b.n	8003136 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2203      	movs	r2, #3
 8002f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	88fa      	ldrh	r2, [r7, #6]
 8002f48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	88fa      	ldrh	r2, [r7, #6]
 8002f4e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f76:	d10f      	bne.n	8002f98 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f86:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa2:	2b40      	cmp	r3, #64	; 0x40
 8002fa4:	d007      	beq.n	8002fb6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fbe:	d14b      	bne.n	8003058 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <HAL_SPI_Transmit+0xf6>
 8002fc8:	8afb      	ldrh	r3, [r7, #22]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d13e      	bne.n	800304c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	881a      	ldrh	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	1c9a      	adds	r2, r3, #2
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ff2:	e02b      	b.n	800304c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d112      	bne.n	8003028 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	881a      	ldrh	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	1c9a      	adds	r2, r3, #2
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	86da      	strh	r2, [r3, #54]	; 0x36
 8003026:	e011      	b.n	800304c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003028:	f7fe f820 	bl	800106c <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d803      	bhi.n	8003040 <HAL_SPI_Transmit+0x168>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303e:	d102      	bne.n	8003046 <HAL_SPI_Transmit+0x16e>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d102      	bne.n	800304c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	77fb      	strb	r3, [r7, #31]
          goto error;
 800304a:	e074      	b.n	8003136 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1ce      	bne.n	8002ff4 <HAL_SPI_Transmit+0x11c>
 8003056:	e04c      	b.n	80030f2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <HAL_SPI_Transmit+0x18e>
 8003060:	8afb      	ldrh	r3, [r7, #22]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d140      	bne.n	80030e8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	330c      	adds	r3, #12
 8003070:	7812      	ldrb	r2, [r2, #0]
 8003072:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800308c:	e02c      	b.n	80030e8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b02      	cmp	r3, #2
 800309a:	d113      	bne.n	80030c4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	330c      	adds	r3, #12
 80030a6:	7812      	ldrb	r2, [r2, #0]
 80030a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80030c2:	e011      	b.n	80030e8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030c4:	f7fd ffd2 	bl	800106c <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d803      	bhi.n	80030dc <HAL_SPI_Transmit+0x204>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030da:	d102      	bne.n	80030e2 <HAL_SPI_Transmit+0x20a>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d102      	bne.n	80030e8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030e6:	e026      	b.n	8003136 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1cd      	bne.n	800308e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	6839      	ldr	r1, [r7, #0]
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 f8b2 	bl	8003260 <SPI_EndRxTxTransaction>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003110:	2300      	movs	r3, #0
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	77fb      	strb	r3, [r7, #31]
 8003132:	e000      	b.n	8003136 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003134:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003146:	7ffb      	ldrb	r3, [r7, #31]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3720      	adds	r7, #32
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	603b      	str	r3, [r7, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003160:	f7fd ff84 	bl	800106c <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	4413      	add	r3, r2
 800316e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003170:	f7fd ff7c 	bl	800106c <HAL_GetTick>
 8003174:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003176:	4b39      	ldr	r3, [pc, #228]	; (800325c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	015b      	lsls	r3, r3, #5
 800317c:	0d1b      	lsrs	r3, r3, #20
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	fb02 f303 	mul.w	r3, r2, r3
 8003184:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003186:	e054      	b.n	8003232 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318e:	d050      	beq.n	8003232 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003190:	f7fd ff6c 	bl	800106c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	69fa      	ldr	r2, [r7, #28]
 800319c:	429a      	cmp	r2, r3
 800319e:	d902      	bls.n	80031a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d13d      	bne.n	8003222 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031be:	d111      	bne.n	80031e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031c8:	d004      	beq.n	80031d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d2:	d107      	bne.n	80031e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ec:	d10f      	bne.n	800320e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800320c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e017      	b.n	8003252 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	3b01      	subs	r3, #1
 8003230:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4013      	ands	r3, r2
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	429a      	cmp	r2, r3
 8003240:	bf0c      	ite	eq
 8003242:	2301      	moveq	r3, #1
 8003244:	2300      	movne	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	429a      	cmp	r2, r3
 800324e:	d19b      	bne.n	8003188 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3720      	adds	r7, #32
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20000000 	.word	0x20000000

08003260 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af02      	add	r7, sp, #8
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2200      	movs	r2, #0
 8003274:	2180      	movs	r1, #128	; 0x80
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f7ff ff6a 	bl	8003150 <SPI_WaitFlagStateUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d007      	beq.n	8003292 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003286:	f043 0220 	orr.w	r2, r3, #32
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e000      	b.n	8003294 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <__libc_init_array>:
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	2600      	movs	r6, #0
 80032a0:	4d0c      	ldr	r5, [pc, #48]	; (80032d4 <__libc_init_array+0x38>)
 80032a2:	4c0d      	ldr	r4, [pc, #52]	; (80032d8 <__libc_init_array+0x3c>)
 80032a4:	1b64      	subs	r4, r4, r5
 80032a6:	10a4      	asrs	r4, r4, #2
 80032a8:	42a6      	cmp	r6, r4
 80032aa:	d109      	bne.n	80032c0 <__libc_init_array+0x24>
 80032ac:	f000 f822 	bl	80032f4 <_init>
 80032b0:	2600      	movs	r6, #0
 80032b2:	4d0a      	ldr	r5, [pc, #40]	; (80032dc <__libc_init_array+0x40>)
 80032b4:	4c0a      	ldr	r4, [pc, #40]	; (80032e0 <__libc_init_array+0x44>)
 80032b6:	1b64      	subs	r4, r4, r5
 80032b8:	10a4      	asrs	r4, r4, #2
 80032ba:	42a6      	cmp	r6, r4
 80032bc:	d105      	bne.n	80032ca <__libc_init_array+0x2e>
 80032be:	bd70      	pop	{r4, r5, r6, pc}
 80032c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c4:	4798      	blx	r3
 80032c6:	3601      	adds	r6, #1
 80032c8:	e7ee      	b.n	80032a8 <__libc_init_array+0xc>
 80032ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ce:	4798      	blx	r3
 80032d0:	3601      	adds	r6, #1
 80032d2:	e7f2      	b.n	80032ba <__libc_init_array+0x1e>
 80032d4:	08003344 	.word	0x08003344
 80032d8:	08003344 	.word	0x08003344
 80032dc:	08003344 	.word	0x08003344
 80032e0:	08003348 	.word	0x08003348

080032e4 <memset>:
 80032e4:	4603      	mov	r3, r0
 80032e6:	4402      	add	r2, r0
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d100      	bne.n	80032ee <memset+0xa>
 80032ec:	4770      	bx	lr
 80032ee:	f803 1b01 	strb.w	r1, [r3], #1
 80032f2:	e7f9      	b.n	80032e8 <memset+0x4>

080032f4 <_init>:
 80032f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f6:	bf00      	nop
 80032f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fa:	bc08      	pop	{r3}
 80032fc:	469e      	mov	lr, r3
 80032fe:	4770      	bx	lr

08003300 <_fini>:
 8003300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003302:	bf00      	nop
 8003304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003306:	bc08      	pop	{r3}
 8003308:	469e      	mov	lr, r3
 800330a:	4770      	bx	lr
